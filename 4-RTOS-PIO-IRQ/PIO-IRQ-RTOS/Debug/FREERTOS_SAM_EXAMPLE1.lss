
FREERTOS_SAM_EXAMPLE1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000062ac  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  004062ac  004062ac  000162ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009b8  20400000  004062b4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000290  204009b8  00406c6c  000209b8  2**2
                  ALLOC
  4 .stack        00002000  20400c48  00406efc  000209b8  2**0
                  ALLOC
  5 .heap         00000200  20402c48  00408efc  000209b8  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209b8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209e6  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001de77  00000000  00000000  00020a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003fcd  00000000  00000000  0003e8b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000a5fa  00000000  00000000  00042883  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000de8  00000000  00000000  0004ce7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001e08  00000000  00000000  0004dc65  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000211f4  00000000  00000000  0004fa6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000105be  00000000  00000000  00070c61  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000936be  00000000  00000000  0008121f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000031e0  00000000  00000000  001148e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	48 2c 40 20 bd 09 40 00 b9 09 40 00 b9 09 40 00     H,@ ..@...@...@.
  400010:	b9 09 40 00 b9 09 40 00 b9 09 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	79 0d 40 00 b9 09 40 00 00 00 00 00 15 0e 40 00     y.@...@.......@.
  40003c:	7d 0e 40 00 b9 09 40 00 b9 09 40 00 b9 09 40 00     }.@...@...@...@.
  40004c:	b9 09 40 00 b9 09 40 00 b9 09 40 00 b9 09 40 00     ..@...@...@...@.
  40005c:	b9 09 40 00 b9 09 40 00 00 00 00 00 f1 06 40 00     ..@...@.......@.
  40006c:	01 07 40 00 11 07 40 00 b9 09 40 00 b9 09 40 00     ..@...@...@...@.
  40007c:	b9 09 40 00 21 07 40 00 31 07 40 00 b9 09 40 00     ..@.!.@.1.@...@.
  40008c:	b9 09 40 00 b9 09 40 00 b9 09 40 00 b9 09 40 00     ..@...@...@...@.
  40009c:	b9 09 40 00 b9 09 40 00 b9 09 40 00 b9 09 40 00     ..@...@...@...@.
  4000ac:	b9 09 40 00 b9 09 40 00 b9 09 40 00 b9 09 40 00     ..@...@...@...@.
  4000bc:	b9 09 40 00 b9 09 40 00 b9 09 40 00 b9 09 40 00     ..@...@...@...@.
  4000cc:	b9 09 40 00 00 00 00 00 b9 09 40 00 00 00 00 00     ..@.......@.....
  4000dc:	b9 09 40 00 b9 09 40 00 b9 09 40 00 b9 09 40 00     ..@...@...@...@.
  4000ec:	b9 09 40 00 b9 09 40 00 b9 09 40 00 b9 09 40 00     ..@...@...@...@.
  4000fc:	b9 09 40 00 b9 09 40 00 b9 09 40 00 b9 09 40 00     ..@...@...@...@.
  40010c:	b9 09 40 00 b9 09 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 b9 09 40 00 b9 09 40 00 b9 09 40 00     ......@...@...@.
  40012c:	b9 09 40 00 b9 09 40 00 00 00 00 00 b9 09 40 00     ..@...@.......@.
  40013c:	b9 09 40 00                                         ..@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009b8 	.word	0x204009b8
  40015c:	00000000 	.word	0x00000000
  400160:	004062b4 	.word	0x004062b4

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	004062b4 	.word	0x004062b4
  4001a0:	204009bc 	.word	0x204009bc
  4001a4:	004062b4 	.word	0x004062b4
  4001a8:	00000000 	.word	0x00000000

004001ac <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4001ac:	b570      	push	{r4, r5, r6, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4001ae:	4810      	ldr	r0, [pc, #64]	; (4001f0 <sysclk_init+0x44>)
  4001b0:	4d10      	ldr	r5, [pc, #64]	; (4001f4 <sysclk_init+0x48>)
  4001b2:	47a8      	blx	r5
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001b4:	213e      	movs	r1, #62	; 0x3e
  4001b6:	2000      	movs	r0, #0
  4001b8:	4b0f      	ldr	r3, [pc, #60]	; (4001f8 <sysclk_init+0x4c>)
  4001ba:	4c10      	ldr	r4, [pc, #64]	; (4001fc <sysclk_init+0x50>)
  4001bc:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4001be:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4001c0:	2800      	cmp	r0, #0
  4001c2:	d0fc      	beq.n	4001be <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4001c4:	4b0e      	ldr	r3, [pc, #56]	; (400200 <sysclk_init+0x54>)
  4001c6:	4798      	blx	r3
  4001c8:	4c0e      	ldr	r4, [pc, #56]	; (400204 <sysclk_init+0x58>)
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4001ca:	4b0f      	ldr	r3, [pc, #60]	; (400208 <sysclk_init+0x5c>)
  4001cc:	4a0f      	ldr	r2, [pc, #60]	; (40020c <sysclk_init+0x60>)
  4001ce:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4001d0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4001d2:	2800      	cmp	r0, #0
  4001d4:	d0fc      	beq.n	4001d0 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4001d6:	2002      	movs	r0, #2
  4001d8:	4b0d      	ldr	r3, [pc, #52]	; (400210 <sysclk_init+0x64>)
  4001da:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4001dc:	4b0d      	ldr	r3, [pc, #52]	; (400214 <sysclk_init+0x68>)
  4001de:	2000      	movs	r0, #0
  4001e0:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4001e2:	4b0d      	ldr	r3, [pc, #52]	; (400218 <sysclk_init+0x6c>)
  4001e4:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4001e6:	462b      	mov	r3, r5
  4001e8:	4801      	ldr	r0, [pc, #4]	; (4001f0 <sysclk_init+0x44>)

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  4001ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	system_init_flash(sysclk_get_cpu_hz());
  4001ee:	4718      	bx	r3
  4001f0:	11e1a300 	.word	0x11e1a300
  4001f4:	00400b61 	.word	0x00400b61
  4001f8:	004007c5 	.word	0x004007c5
  4001fc:	00400819 	.word	0x00400819
  400200:	00400829 	.word	0x00400829
  400204:	00400839 	.word	0x00400839
  400208:	400e0600 	.word	0x400e0600
  40020c:	20183f01 	.word	0x20183f01
  400210:	00400741 	.word	0x00400741
  400214:	00400771 	.word	0x00400771
  400218:	00400a7d 	.word	0x00400a7d

0040021c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  40021c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400220:	b990      	cbnz	r0, 400248 <_read+0x2c>
		return -1;
	}

	for (; len > 0; --len) {
  400222:	2a00      	cmp	r2, #0
  400224:	4690      	mov	r8, r2
  400226:	dd0d      	ble.n	400244 <_read+0x28>
  400228:	460c      	mov	r4, r1
  40022a:	188f      	adds	r7, r1, r2
  40022c:	4e08      	ldr	r6, [pc, #32]	; (400250 <_read+0x34>)
  40022e:	4d09      	ldr	r5, [pc, #36]	; (400254 <_read+0x38>)
		ptr_get(stdio_base, ptr);
  400230:	4621      	mov	r1, r4
		ptr++;
  400232:	3401      	adds	r4, #1
		ptr_get(stdio_base, ptr);
  400234:	6830      	ldr	r0, [r6, #0]
  400236:	682b      	ldr	r3, [r5, #0]
  400238:	4798      	blx	r3
	for (; len > 0; --len) {
  40023a:	42bc      	cmp	r4, r7
  40023c:	d1f8      	bne.n	400230 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  40023e:	4640      	mov	r0, r8
  400240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (; len > 0; --len) {
  400244:	4680      	mov	r8, r0
  400246:	e7fa      	b.n	40023e <_read+0x22>
		return -1;
  400248:	f04f 38ff 	mov.w	r8, #4294967295
  40024c:	e7f7      	b.n	40023e <_read+0x22>
  40024e:	bf00      	nop
  400250:	20400bcc 	.word	0x20400bcc
  400254:	20400bc4 	.word	0x20400bc4

00400258 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400258:	3801      	subs	r0, #1
  40025a:	2802      	cmp	r0, #2
  40025c:	d81e      	bhi.n	40029c <_write+0x44>
{
  40025e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400262:	4615      	mov	r5, r2
		return -1;
	}

	for (; len != 0; --len) {
  400264:	b1ba      	cbz	r2, 400296 <_write+0x3e>
  400266:	460e      	mov	r6, r1
  400268:	460c      	mov	r4, r1
  40026a:	f8df 803c 	ldr.w	r8, [pc, #60]	; 4002a8 <_write+0x50>
  40026e:	4f0d      	ldr	r7, [pc, #52]	; (4002a4 <_write+0x4c>)
  400270:	e001      	b.n	400276 <_write+0x1e>
  400272:	3d01      	subs	r5, #1
  400274:	d00d      	beq.n	400292 <_write+0x3a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400276:	f814 1b01 	ldrb.w	r1, [r4], #1
  40027a:	f8d8 0000 	ldr.w	r0, [r8]
  40027e:	683b      	ldr	r3, [r7, #0]
  400280:	4798      	blx	r3
  400282:	2800      	cmp	r0, #0
  400284:	eba4 0006 	sub.w	r0, r4, r6
  400288:	daf3      	bge.n	400272 <_write+0x1a>
		return -1;
  40028a:	f04f 30ff 	mov.w	r0, #4294967295
  40028e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (; len != 0; --len) {
  400296:	4610      	mov	r0, r2
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  400298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  40029c:	f04f 30ff 	mov.w	r0, #4294967295
}
  4002a0:	4770      	bx	lr
  4002a2:	bf00      	nop
  4002a4:	20400bc8 	.word	0x20400bc8
  4002a8:	20400bcc 	.word	0x20400bcc

004002ac <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  4002ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4002ae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4002b2:	4b5a      	ldr	r3, [pc, #360]	; (40041c <board_init+0x170>)
  4002b4:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4002b6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4002ba:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  4002be:	4c58      	ldr	r4, [pc, #352]	; (400420 <board_init+0x174>)
  4002c0:	2300      	movs	r3, #0
  4002c2:	f8c4 3250 	str.w	r3, [r4, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  4002c6:	6963      	ldr	r3, [r4, #20]
  4002c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  4002cc:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb");
  4002ce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4002d2:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  4002d6:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  4002da:	f003 0607 	and.w	r6, r3, #7
    sets    = CCSIDR_SETS(ccsidr);
  4002de:	f3c3 3e4e 	ubfx	lr, r3, #13, #15
    ways    = CCSIDR_WAYS(ccsidr);
  4002e2:	f3c3 0cc9 	ubfx	ip, r3, #3, #10
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  4002e6:	3604      	adds	r6, #4
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  4002e8:	fabc f38c 	clz	r3, ip
    wshift  = __CLZ(ways) & 0x1f;
  4002ec:	f003 031f 	and.w	r3, r3, #31
  __ASM volatile ("dsb");
  4002f0:	f3bf 8f4f 	dsb	sy
  4002f4:	f04f 35ff 	mov.w	r5, #4294967295
  4002f8:	fa0e f006 	lsl.w	r0, lr, r6
  4002fc:	fa0c f703 	lsl.w	r7, ip, r3
  400300:	fa05 f606 	lsl.w	r6, r5, r6
  400304:	409d      	lsls	r5, r3
{
  400306:	463a      	mov	r2, r7

    __DSB();

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
  400308:	4663      	mov	r3, ip
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
  40030a:	ea40 0102 	orr.w	r1, r0, r2
              SCB->DCISW = sw;
            } while(tmpways--);
  40030e:	3b01      	subs	r3, #1
  400310:	442a      	add	r2, r5
              SCB->DCISW = sw;
  400312:	f8c4 1260 	str.w	r1, [r4, #608]	; 0x260
            } while(tmpways--);
  400316:	1c59      	adds	r1, r3, #1
  400318:	d1f7      	bne.n	40030a <board_init+0x5e>
        } while(sets--);
  40031a:	f10e 3eff 	add.w	lr, lr, #4294967295
  40031e:	4430      	add	r0, r6
  400320:	f1be 3fff 	cmp.w	lr, #4294967295
  400324:	d1ef      	bne.n	400306 <board_init+0x5a>
  400326:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  40032a:	6963      	ldr	r3, [r4, #20]
  40032c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  400330:	6163      	str	r3, [r4, #20]
  400332:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400336:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  40033a:	4b3a      	ldr	r3, [pc, #232]	; (400424 <board_init+0x178>)
  40033c:	493a      	ldr	r1, [pc, #232]	; (400428 <board_init+0x17c>)
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  40033e:	4a3b      	ldr	r2, [pc, #236]	; (40042c <board_init+0x180>)
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400340:	6059      	str	r1, [r3, #4]
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400342:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb");
  400344:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400348:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  40034c:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  400350:	f023 0301 	bic.w	r3, r3, #1
  400354:	f8c4 3290 	str.w	r3, [r4, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400358:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
  40035c:	f023 0301 	bic.w	r3, r3, #1
  400360:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  __ASM volatile ("dsb");
  400364:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400368:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40036c:	4c30      	ldr	r4, [pc, #192]	; (400430 <board_init+0x184>)
  40036e:	200a      	movs	r0, #10
  400370:	47a0      	blx	r4
  400372:	200b      	movs	r0, #11
  400374:	47a0      	blx	r4
  400376:	200c      	movs	r0, #12
  400378:	47a0      	blx	r4
  40037a:	2010      	movs	r0, #16
  40037c:	47a0      	blx	r4
  40037e:	2011      	movs	r0, #17
  400380:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400382:	f44f 7580 	mov.w	r5, #256	; 0x100
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400386:	4a2b      	ldr	r2, [pc, #172]	; (400434 <board_init+0x188>)
  400388:	f44f 6300 	mov.w	r3, #2048	; 0x800
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40038c:	492a      	ldr	r1, [pc, #168]	; (400438 <board_init+0x18c>)
		base->PIO_PUDR = mask;
  40038e:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400392:	4e2a      	ldr	r6, [pc, #168]	; (40043c <board_init+0x190>)
  400394:	2010      	movs	r0, #16
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400396:	610d      	str	r5, [r1, #16]
		base->PIO_PUDR = mask;
  400398:	f5a1 7100 	sub.w	r1, r1, #512	; 0x200
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40039c:	f8c1 52a0 	str.w	r5, [r1, #672]	; 0x2a0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4003a0:	f8c1 5230 	str.w	r5, [r1, #560]	; 0x230
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4003a4:	6153      	str	r3, [r2, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4003a6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
		base->PIO_PUER = mask;
  4003aa:	6653      	str	r3, [r2, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4003ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003b0:	6553      	str	r3, [r2, #84]	; 0x54
		base->PIO_IFER = mask;
  4003b2:	6213      	str	r3, [r2, #32]
		base->PIO_IFSCER = mask;
  4003b4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4003b8:	6f15      	ldr	r5, [r2, #112]	; 0x70
  4003ba:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
  4003be:	6715      	str	r5, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4003c0:	6f55      	ldr	r5, [r2, #116]	; 0x74
  4003c2:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
  4003c6:	6755      	str	r5, [r2, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  4003c8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4003cc:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4003d0:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
		base->PIO_PUDR = mask;
  4003d4:	6614      	str	r4, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4003d6:	f8c2 4090 	str.w	r4, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003da:	6554      	str	r4, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  4003dc:	6254      	str	r4, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4003de:	f8c2 4080 	str.w	r4, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4003e2:	6f13      	ldr	r3, [r2, #112]	; 0x70
  4003e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  4003e8:	6713      	str	r3, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4003ea:	6f53      	ldr	r3, [r2, #116]	; 0x74
  4003ec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  4003f0:	6753      	str	r3, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4003f2:	6054      	str	r4, [r2, #4]
  4003f4:	f8d6 3114 	ldr.w	r3, [r6, #276]	; 0x114
  4003f8:	4303      	orrs	r3, r0
  4003fa:	f8c6 3114 	str.w	r3, [r6, #276]	; 0x114
		base->PIO_PUDR = mask;
  4003fe:	6608      	str	r0, [r1, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400400:	f8c1 0090 	str.w	r0, [r1, #144]	; 0x90
		base->PIO_MDDR = mask;
  400404:	6548      	str	r0, [r1, #84]	; 0x54
		base->PIO_IFDR = mask;
  400406:	6248      	str	r0, [r1, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400408:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  40040c:	6f0b      	ldr	r3, [r1, #112]	; 0x70
  40040e:	4303      	orrs	r3, r0
  400410:	670b      	str	r3, [r1, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400412:	6f4b      	ldr	r3, [r1, #116]	; 0x74
  400414:	4303      	orrs	r3, r0
  400416:	674b      	str	r3, [r1, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400418:	6048      	str	r0, [r1, #4]
  40041a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40041c:	400e1850 	.word	0x400e1850
  400420:	e000ed00 	.word	0xe000ed00
  400424:	400e0c00 	.word	0x400e0c00
  400428:	5a00080c 	.word	0x5a00080c
  40042c:	5a00070c 	.word	0x5a00070c
  400430:	00400849 	.word	0x00400849
  400434:	400e0e00 	.word	0x400e0e00
  400438:	400e1200 	.word	0x400e1200
  40043c:	40088000 	.word	0x40088000

00400440 <pio_set>:
  400440:	6301      	str	r1, [r0, #48]	; 0x30
  400442:	4770      	bx	lr

00400444 <pio_clear>:
  400444:	6341      	str	r1, [r0, #52]	; 0x34
  400446:	4770      	bx	lr

00400448 <pio_set_peripheral>:

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400448:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
	p_pio->PIO_IDR = ul_mask;
  40044c:	6442      	str	r2, [r0, #68]	; 0x44
	switch (ul_type) {
  40044e:	d034      	beq.n	4004ba <pio_set_peripheral+0x72>
  400450:	d810      	bhi.n	400474 <pio_set_peripheral+0x2c>
  400452:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400456:	d01c      	beq.n	400492 <pio_set_peripheral+0x4a>
  400458:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  40045c:	d12a      	bne.n	4004b4 <pio_set_peripheral+0x6c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40045e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400460:	4313      	orrs	r3, r2
  400462:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400464:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400466:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400468:	400b      	ands	r3, r1
  40046a:	ea23 0302 	bic.w	r3, r3, r2
  40046e:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400470:	6042      	str	r2, [r0, #4]
  400472:	4770      	bx	lr
	switch (ul_type) {
  400474:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400478:	d01b      	beq.n	4004b2 <pio_set_peripheral+0x6a>
  40047a:	d829      	bhi.n	4004d0 <pio_set_peripheral+0x88>
  40047c:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400480:	d1f6      	bne.n	400470 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  400482:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400484:	4313      	orrs	r3, r2
  400486:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400488:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40048a:	4313      	orrs	r3, r2
  40048c:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  40048e:	6042      	str	r2, [r0, #4]
  400490:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  400492:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400494:	43d3      	mvns	r3, r2
{
  400496:	b410      	push	{r4}
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400498:	6f04      	ldr	r4, [r0, #112]	; 0x70
  40049a:	4021      	ands	r1, r4
  40049c:	461c      	mov	r4, r3
  40049e:	4019      	ands	r1, r3
  4004a0:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4004a2:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4004a4:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4004a6:	400b      	ands	r3, r1
  4004a8:	4023      	ands	r3, r4
}
  4004aa:	f85d 4b04 	ldr.w	r4, [sp], #4
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4004ae:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  4004b0:	6042      	str	r2, [r0, #4]
}
  4004b2:	4770      	bx	lr
	switch (ul_type) {
  4004b4:	2900      	cmp	r1, #0
  4004b6:	d1db      	bne.n	400470 <pio_set_peripheral+0x28>
  4004b8:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  4004ba:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4004bc:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4004be:	400b      	ands	r3, r1
  4004c0:	ea23 0302 	bic.w	r3, r3, r2
  4004c4:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4004c6:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4004c8:	4313      	orrs	r3, r2
  4004ca:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  4004cc:	6042      	str	r2, [r0, #4]
  4004ce:	4770      	bx	lr
	switch (ul_type) {
  4004d0:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4004d4:	d0ed      	beq.n	4004b2 <pio_set_peripheral+0x6a>
  4004d6:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4004da:	d0ea      	beq.n	4004b2 <pio_set_peripheral+0x6a>
  4004dc:	e7c8      	b.n	400470 <pio_set_peripheral+0x28>
  4004de:	bf00      	nop

004004e0 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  4004e0:	b410      	push	{r4}
  4004e2:	9c01      	ldr	r4, [sp, #4]
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4004e4:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4004e6:	b194      	cbz	r4, 40050e <pio_set_output+0x2e>
		p_pio->PIO_PUER = ul_mask;
  4004e8:	6641      	str	r1, [r0, #100]	; 0x64
	if (ul_multidrive_enable) {
  4004ea:	b13b      	cbz	r3, 4004fc <pio_set_output+0x1c>
		p_pio->PIO_MDER = ul_mask;
  4004ec:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  4004ee:	b942      	cbnz	r2, 400502 <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
  4004f0:	6341      	str	r1, [r0, #52]	; 0x34
}
  4004f2:	f85d 4b04 	ldr.w	r4, [sp], #4
	p_pio->PIO_OER = ul_mask;
  4004f6:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  4004f8:	6001      	str	r1, [r0, #0]
}
  4004fa:	4770      	bx	lr
		p_pio->PIO_MDDR = ul_mask;
  4004fc:	6541      	str	r1, [r0, #84]	; 0x54
	if (ul_default_level) {
  4004fe:	2a00      	cmp	r2, #0
  400500:	d0f6      	beq.n	4004f0 <pio_set_output+0x10>
		p_pio->PIO_SODR = ul_mask;
  400502:	6301      	str	r1, [r0, #48]	; 0x30
}
  400504:	f85d 4b04 	ldr.w	r4, [sp], #4
	p_pio->PIO_OER = ul_mask;
  400508:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  40050a:	6001      	str	r1, [r0, #0]
}
  40050c:	4770      	bx	lr
		p_pio->PIO_PUDR = ul_mask;
  40050e:	6601      	str	r1, [r0, #96]	; 0x60
  400510:	e7eb      	b.n	4004ea <pio_set_output+0xa>
  400512:	bf00      	nop

00400514 <pio_configure>:
	switch (ul_type) {
  400514:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
{
  400518:	b570      	push	{r4, r5, r6, lr}
	switch (ul_type) {
  40051a:	d037      	beq.n	40058c <pio_configure+0x78>
  40051c:	d92d      	bls.n	40057a <pio_configure+0x66>
  40051e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400522:	d019      	beq.n	400558 <pio_configure+0x44>
  400524:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400528:	d016      	beq.n	400558 <pio_configure+0x44>
  40052a:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40052e:	d002      	beq.n	400536 <pio_configure+0x22>
		return 0;
  400530:	2300      	movs	r3, #0
}
  400532:	4618      	mov	r0, r3
  400534:	bd70      	pop	{r4, r5, r6, pc}
	if (ul_pull_up_enable) {
  400536:	07dd      	lsls	r5, r3, #31
	p_pio->PIO_IDR = ul_mask;
  400538:	6442      	str	r2, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  40053a:	d436      	bmi.n	4005aa <pio_configure+0x96>
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  40053c:	f013 0f0a 	tst.w	r3, #10
		p_pio->PIO_PUDR = ul_mask;
  400540:	6602      	str	r2, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400542:	d036      	beq.n	4005b2 <pio_configure+0x9e>
	if (ul_attribute & PIO_DEGLITCH) {
  400544:	079c      	lsls	r4, r3, #30
		p_pio->PIO_IFER = ul_mask;
  400546:	6202      	str	r2, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  400548:	d536      	bpl.n	4005b8 <pio_configure+0xa4>
		p_pio->PIO_IFSCDR = ul_mask;
  40054a:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
	return 1;
  40054e:	2301      	movs	r3, #1
	p_pio->PIO_ODR = ul_mask;
  400550:	6142      	str	r2, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400552:	6002      	str	r2, [r0, #0]
}
  400554:	4618      	mov	r0, r3
  400556:	bd70      	pop	{r4, r5, r6, pc}
				(ul_attribute & PIO_OPENDRAIN) ? 1 : 0,
  400558:	f003 0404 	and.w	r4, r3, #4
	if (ul_pull_up_enable) {
  40055c:	07db      	lsls	r3, r3, #31
	p_pio->PIO_IDR = ul_mask;
  40055e:	6442      	str	r2, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400560:	d51e      	bpl.n	4005a0 <pio_configure+0x8c>
		p_pio->PIO_PUER = ul_mask;
  400562:	6642      	str	r2, [r0, #100]	; 0x64
	if (ul_multidrive_enable) {
  400564:	b1fc      	cbz	r4, 4005a6 <pio_configure+0x92>
		p_pio->PIO_MDER = ul_mask;
  400566:	6502      	str	r2, [r0, #80]	; 0x50
	if (ul_default_level) {
  400568:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  40056c:	d02d      	beq.n	4005ca <pio_configure+0xb6>
		p_pio->PIO_CODR = ul_mask;
  40056e:	6342      	str	r2, [r0, #52]	; 0x34
	return 1;
  400570:	2301      	movs	r3, #1
	p_pio->PIO_OER = ul_mask;
  400572:	6102      	str	r2, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400574:	6002      	str	r2, [r0, #0]
}
  400576:	4618      	mov	r0, r3
  400578:	bd70      	pop	{r4, r5, r6, pc}
	switch (ul_type) {
  40057a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  40057e:	d005      	beq.n	40058c <pio_configure+0x78>
  400580:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400584:	d002      	beq.n	40058c <pio_configure+0x78>
  400586:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40058a:	d1d1      	bne.n	400530 <pio_configure+0x1c>
  40058c:	461e      	mov	r6, r3
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  40058e:	4b10      	ldr	r3, [pc, #64]	; (4005d0 <pio_configure+0xbc>)
  400590:	4604      	mov	r4, r0
  400592:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400594:	07f6      	lsls	r6, r6, #31
  400596:	d514      	bpl.n	4005c2 <pio_configure+0xae>
	return 1;
  400598:	2301      	movs	r3, #1
		p_pio->PIO_PUER = ul_mask;
  40059a:	6662      	str	r2, [r4, #100]	; 0x64
}
  40059c:	4618      	mov	r0, r3
  40059e:	bd70      	pop	{r4, r5, r6, pc}
		p_pio->PIO_PUDR = ul_mask;
  4005a0:	6602      	str	r2, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  4005a2:	2c00      	cmp	r4, #0
  4005a4:	d1df      	bne.n	400566 <pio_configure+0x52>
		p_pio->PIO_MDDR = ul_mask;
  4005a6:	6542      	str	r2, [r0, #84]	; 0x54
  4005a8:	e7de      	b.n	400568 <pio_configure+0x54>
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4005aa:	f013 0f0a 	tst.w	r3, #10
		p_pio->PIO_PUER = ul_mask;
  4005ae:	6642      	str	r2, [r0, #100]	; 0x64
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4005b0:	d1c8      	bne.n	400544 <pio_configure+0x30>
	if (ul_attribute & PIO_DEGLITCH) {
  4005b2:	079c      	lsls	r4, r3, #30
		p_pio->PIO_IFDR = ul_mask;
  4005b4:	6242      	str	r2, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
  4005b6:	d4c8      	bmi.n	40054a <pio_configure+0x36>
		if (ul_attribute & PIO_DEBOUNCE) {
  4005b8:	0719      	lsls	r1, r3, #28
  4005ba:	d5c8      	bpl.n	40054e <pio_configure+0x3a>
			p_pio->PIO_IFSCER = ul_mask;
  4005bc:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  4005c0:	e7c5      	b.n	40054e <pio_configure+0x3a>
	return 1;
  4005c2:	2301      	movs	r3, #1
		p_pio->PIO_PUDR = ul_mask;
  4005c4:	6622      	str	r2, [r4, #96]	; 0x60
}
  4005c6:	4618      	mov	r0, r3
  4005c8:	bd70      	pop	{r4, r5, r6, pc}
		p_pio->PIO_SODR = ul_mask;
  4005ca:	6302      	str	r2, [r0, #48]	; 0x30
  4005cc:	e7d0      	b.n	400570 <pio_configure+0x5c>
  4005ce:	bf00      	nop
  4005d0:	00400449 	.word	0x00400449

004005d4 <pio_get_output_data_status>:
	if ((p_pio->PIO_ODSR & ul_mask) == 0) {
  4005d4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4005d6:	420b      	tst	r3, r1
}
  4005d8:	bf14      	ite	ne
  4005da:	2001      	movne	r0, #1
  4005dc:	2000      	moveq	r0, #0
  4005de:	4770      	bx	lr

004005e0 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  4005e0:	6401      	str	r1, [r0, #64]	; 0x40
  4005e2:	4770      	bx	lr

004005e4 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4005e4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4005e6:	4770      	bx	lr

004005e8 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4005e8:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4005ea:	4770      	bx	lr

004005ec <pio_set_additional_interrupt_mode>:
 */
void pio_set_additional_interrupt_mode(Pio *p_pio,
		const uint32_t ul_mask, const uint32_t ul_attribute)
{
	/* Enables additional interrupt mode if needed */
	if (ul_attribute & PIO_IT_AIME) {
  4005ec:	06d3      	lsls	r3, r2, #27
  4005ee:	d50a      	bpl.n	400606 <pio_set_additional_interrupt_mode+0x1a>
		/* Enables additional interrupt mode */
		p_pio->PIO_AIMER = ul_mask;

		/* Configures the Polarity of the event detection */
		/* (Rising/Falling Edge or High/Low Level) */
		if (ul_attribute & PIO_IT_RE_OR_HL) {
  4005f0:	0693      	lsls	r3, r2, #26
		p_pio->PIO_AIMER = ul_mask;
  4005f2:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attribute & PIO_IT_RE_OR_HL) {
  4005f6:	d409      	bmi.n	40060c <pio_set_additional_interrupt_mode+0x20>
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
		}

		/* Configures the type of event detection (Edge or Level) */
		if (ul_attribute & PIO_IT_EDGE) {
  4005f8:	0653      	lsls	r3, r2, #25
			p_pio->PIO_FELLSR = ul_mask;
  4005fa:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
		if (ul_attribute & PIO_IT_EDGE) {
  4005fe:	d509      	bpl.n	400614 <pio_set_additional_interrupt_mode+0x28>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  400600:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  400604:	4770      	bx	lr
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
		}
	} else {
		/* Disable additional interrupt mode */
		p_pio->PIO_AIMDR = ul_mask;
  400606:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  40060a:	4770      	bx	lr
		if (ul_attribute & PIO_IT_EDGE) {
  40060c:	0653      	lsls	r3, r2, #25
			p_pio->PIO_REHLSR = ul_mask;
  40060e:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attribute & PIO_IT_EDGE) {
  400612:	d4f5      	bmi.n	400600 <pio_set_additional_interrupt_mode+0x14>
			p_pio->PIO_LSR = ul_mask;
  400614:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  400618:	4770      	bx	lr
  40061a:	bf00      	nop

0040061c <pio_configure_interrupt>:
  40061c:	4b00      	ldr	r3, [pc, #0]	; (400620 <pio_configure_interrupt+0x4>)
  40061e:	4718      	bx	r3
  400620:	004005ed 	.word	0x004005ed

00400624 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400626:	4604      	mov	r4, r0
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400628:	4b0f      	ldr	r3, [pc, #60]	; (400668 <pio_handler_process+0x44>)
{
  40062a:	460f      	mov	r7, r1
	status = pio_get_interrupt_status(p_pio);
  40062c:	4798      	blx	r3
  40062e:	4606      	mov	r6, r0
	status &= pio_get_interrupt_mask(p_pio);
  400630:	4b0e      	ldr	r3, [pc, #56]	; (40066c <pio_handler_process+0x48>)
  400632:	4620      	mov	r0, r4
  400634:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400636:	4006      	ands	r6, r0
  400638:	d015      	beq.n	400666 <pio_handler_process+0x42>
  40063a:	4c0d      	ldr	r4, [pc, #52]	; (400670 <pio_handler_process+0x4c>)
  40063c:	2500      	movs	r5, #0
  40063e:	e004      	b.n	40064a <pio_handler_process+0x26>
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  400640:	2d07      	cmp	r5, #7
  400642:	f104 0410 	add.w	r4, r4, #16
  400646:	d00e      	beq.n	400666 <pio_handler_process+0x42>
  400648:	b16e      	cbz	r6, 400666 <pio_handler_process+0x42>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  40064a:	6823      	ldr	r3, [r4, #0]
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
  40064c:	3501      	adds	r5, #1
			if (gs_interrupt_sources[i].id == ul_id) {
  40064e:	42bb      	cmp	r3, r7
  400650:	d1f6      	bne.n	400640 <pio_handler_process+0x1c>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400652:	6861      	ldr	r1, [r4, #4]
  400654:	4231      	tst	r1, r6
  400656:	d0f3      	beq.n	400640 <pio_handler_process+0x1c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400658:	68e3      	ldr	r3, [r4, #12]
  40065a:	4638      	mov	r0, r7
  40065c:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  40065e:	6863      	ldr	r3, [r4, #4]
  400660:	ea26 0603 	bic.w	r6, r6, r3
  400664:	e7ec      	b.n	400640 <pio_handler_process+0x1c>
  400666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400668:	004005e5 	.word	0x004005e5
  40066c:	004005e9 	.word	0x004005e9
  400670:	204009d4 	.word	0x204009d4

00400674 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  400678:	f8df 9070 	ldr.w	r9, [pc, #112]	; 4006ec <pio_handler_set+0x78>
  40067c:	f8d9 c000 	ldr.w	ip, [r9]
  400680:	f1bc 0f06 	cmp.w	ip, #6
  400684:	d82b      	bhi.n	4006de <pio_handler_set+0x6a>
  400686:	f04f 0800 	mov.w	r8, #0
  40068a:	4e16      	ldr	r6, [pc, #88]	; (4006e4 <pio_handler_set+0x70>)
  40068c:	4644      	mov	r4, r8
  40068e:	e002      	b.n	400696 <pio_handler_set+0x22>
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400690:	45a4      	cmp	ip, r4
  400692:	46a0      	mov	r8, r4
  400694:	d30c      	bcc.n	4006b0 <pio_handler_set+0x3c>
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400696:	0125      	lsls	r5, r4, #4
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400698:	f104 0e01 	add.w	lr, r4, #1
		pSource = &(gs_interrupt_sources[i]);
  40069c:	46a2      	mov	sl, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  40069e:	5977      	ldr	r7, [r6, r5]
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  4006a0:	fa5f f48e 	uxtb.w	r4, lr
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  4006a4:	4435      	add	r5, r6
  4006a6:	428f      	cmp	r7, r1
  4006a8:	d1f2      	bne.n	400690 <pio_handler_set+0x1c>
  4006aa:	686d      	ldr	r5, [r5, #4]
  4006ac:	4295      	cmp	r5, r2
  4006ae:	d1ef      	bne.n	400690 <pio_handler_set+0x1c>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  4006b0:	ea4f 1a0a 	mov.w	sl, sl, lsl #4
	pSource->mask = ul_mask;
	pSource->attr = ul_attr;
	pSource->handler = p_handler;
	if (i == gs_ul_nb_sources + 1) {
  4006b4:	f10c 0c01 	add.w	ip, ip, #1
	pSource->id = ul_id;
  4006b8:	eb06 040a 	add.w	r4, r6, sl
  4006bc:	f846 100a 	str.w	r1, [r6, sl]
	pSource->handler = p_handler;
  4006c0:	9908      	ldr	r1, [sp, #32]
	if (i == gs_ul_nb_sources + 1) {
  4006c2:	45c4      	cmp	ip, r8
	pSource->mask = ul_mask;
  4006c4:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  4006c6:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  4006c8:	60e1      	str	r1, [r4, #12]
  4006ca:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  4006cc:	461a      	mov	r2, r3
  4006ce:	4b06      	ldr	r3, [pc, #24]	; (4006e8 <pio_handler_set+0x74>)
		gs_ul_nb_sources++;
  4006d0:	bf08      	it	eq
  4006d2:	f8c9 8000 	streq.w	r8, [r9]
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  4006d6:	4798      	blx	r3

	return 0;
  4006d8:	2000      	movs	r0, #0
  4006da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return 1;
  4006de:	2001      	movs	r0, #1
}
  4006e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4006e4:	204009d4 	.word	0x204009d4
  4006e8:	0040061d 	.word	0x0040061d
  4006ec:	20400a44 	.word	0x20400a44

004006f0 <PIOA_Handler>:
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
	pio_handler_process(PIOA, ID_PIOA);
  4006f0:	210a      	movs	r1, #10
  4006f2:	4801      	ldr	r0, [pc, #4]	; (4006f8 <PIOA_Handler+0x8>)
  4006f4:	4b01      	ldr	r3, [pc, #4]	; (4006fc <PIOA_Handler+0xc>)
  4006f6:	4718      	bx	r3
  4006f8:	400e0e00 	.word	0x400e0e00
  4006fc:	00400625 	.word	0x00400625

00400700 <PIOB_Handler>:
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
    pio_handler_process(PIOB, ID_PIOB);
  400700:	210b      	movs	r1, #11
  400702:	4801      	ldr	r0, [pc, #4]	; (400708 <PIOB_Handler+0x8>)
  400704:	4b01      	ldr	r3, [pc, #4]	; (40070c <PIOB_Handler+0xc>)
  400706:	4718      	bx	r3
  400708:	400e1000 	.word	0x400e1000
  40070c:	00400625 	.word	0x00400625

00400710 <PIOC_Handler>:
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
	pio_handler_process(PIOC, ID_PIOC);
  400710:	210c      	movs	r1, #12
  400712:	4801      	ldr	r0, [pc, #4]	; (400718 <PIOC_Handler+0x8>)
  400714:	4b01      	ldr	r3, [pc, #4]	; (40071c <PIOC_Handler+0xc>)
  400716:	4718      	bx	r3
  400718:	400e1200 	.word	0x400e1200
  40071c:	00400625 	.word	0x00400625

00400720 <PIOD_Handler>:
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
	pio_handler_process(PIOD, ID_PIOD);
  400720:	2110      	movs	r1, #16
  400722:	4801      	ldr	r0, [pc, #4]	; (400728 <PIOD_Handler+0x8>)
  400724:	4b01      	ldr	r3, [pc, #4]	; (40072c <PIOD_Handler+0xc>)
  400726:	4718      	bx	r3
  400728:	400e1400 	.word	0x400e1400
  40072c:	00400625 	.word	0x00400625

00400730 <PIOE_Handler>:
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
	pio_handler_process(PIOE, ID_PIOE);
  400730:	2111      	movs	r1, #17
  400732:	4801      	ldr	r0, [pc, #4]	; (400738 <PIOE_Handler+0x8>)
  400734:	4b01      	ldr	r3, [pc, #4]	; (40073c <PIOE_Handler+0xc>)
  400736:	4718      	bx	r3
  400738:	400e1600 	.word	0x400e1600
  40073c:	00400625 	.word	0x00400625

00400740 <pmc_mck_set_division>:
 * \brief Set the division of the MCK.
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
  400740:	3802      	subs	r0, #2
  400742:	2802      	cmp	r0, #2
  400744:	d80d      	bhi.n	400762 <pmc_mck_set_division+0x22>
  400746:	4b08      	ldr	r3, [pc, #32]	; (400768 <pmc_mck_set_division+0x28>)
  400748:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  40074c:	4907      	ldr	r1, [pc, #28]	; (40076c <pmc_mck_set_division+0x2c>)
  40074e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400750:	460a      	mov	r2, r1
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400752:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  400756:	4303      	orrs	r3, r0
	PMC->PMC_MCKR =
  400758:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40075a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40075c:	071b      	lsls	r3, r3, #28
  40075e:	d5fc      	bpl.n	40075a <pmc_mck_set_division+0x1a>
}
  400760:	4770      	bx	lr
{
  400762:	2000      	movs	r0, #0
  400764:	e7f2      	b.n	40074c <pmc_mck_set_division+0xc>
  400766:	bf00      	nop
  400768:	00405f58 	.word	0x00405f58
  40076c:	400e0600 	.word	0x400e0600

00400770 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400770:	4913      	ldr	r1, [pc, #76]	; (4007c0 <pmc_switch_mck_to_pllack+0x50>)
  400772:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400774:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400778:	4318      	orrs	r0, r3
  40077a:	6308      	str	r0, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40077c:	6e8b      	ldr	r3, [r1, #104]	; 0x68
  40077e:	0718      	lsls	r0, r3, #28
  400780:	d407      	bmi.n	400792 <pmc_switch_mck_to_pllack+0x22>
  400782:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400786:	e001      	b.n	40078c <pmc_switch_mck_to_pllack+0x1c>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400788:	3b01      	subs	r3, #1
  40078a:	d016      	beq.n	4007ba <pmc_switch_mck_to_pllack+0x4a>
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40078c:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40078e:	0712      	lsls	r2, r2, #28
  400790:	d5fa      	bpl.n	400788 <pmc_switch_mck_to_pllack+0x18>
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400792:	490b      	ldr	r1, [pc, #44]	; (4007c0 <pmc_switch_mck_to_pllack+0x50>)
  400794:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400796:	f023 0303 	bic.w	r3, r3, #3
  40079a:	f043 0302 	orr.w	r3, r3, #2
  40079e:	630b      	str	r3, [r1, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4007a0:	6e8b      	ldr	r3, [r1, #104]	; 0x68
  4007a2:	0718      	lsls	r0, r3, #28
  4007a4:	d407      	bmi.n	4007b6 <pmc_switch_mck_to_pllack+0x46>
  4007a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4007aa:	e001      	b.n	4007b0 <pmc_switch_mck_to_pllack+0x40>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4007ac:	3b01      	subs	r3, #1
  4007ae:	d004      	beq.n	4007ba <pmc_switch_mck_to_pllack+0x4a>
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4007b0:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4007b2:	0712      	lsls	r2, r2, #28
  4007b4:	d5fa      	bpl.n	4007ac <pmc_switch_mck_to_pllack+0x3c>
			return 1;
		}
	}

	return 0;
  4007b6:	2000      	movs	r0, #0
}
  4007b8:	4770      	bx	lr
			return 1;
  4007ba:	2001      	movs	r0, #1
  4007bc:	4770      	bx	lr
  4007be:	bf00      	nop
  4007c0:	400e0600 	.word	0x400e0600

004007c4 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4007c4:	b9a0      	cbnz	r0, 4007f0 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4007c6:	4b0e      	ldr	r3, [pc, #56]	; (400800 <pmc_switch_mainck_to_xtal+0x3c>)
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4007c8:	0209      	lsls	r1, r1, #8
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4007ca:	480e      	ldr	r0, [pc, #56]	; (400804 <pmc_switch_mainck_to_xtal+0x40>)
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4007cc:	b289      	uxth	r1, r1
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4007ce:	461a      	mov	r2, r3
{
  4007d0:	b430      	push	{r4, r5}
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4007d2:	4c0d      	ldr	r4, [pc, #52]	; (400808 <pmc_switch_mainck_to_xtal+0x44>)
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4007d4:	6a1d      	ldr	r5, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4007d6:	402c      	ands	r4, r5
  4007d8:	4320      	orrs	r0, r4
  4007da:	4301      	orrs	r1, r0
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4007dc:	6219      	str	r1, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4007de:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4007e0:	07db      	lsls	r3, r3, #31
  4007e2:	d5fc      	bpl.n	4007de <pmc_switch_mainck_to_xtal+0x1a>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4007e4:	6a11      	ldr	r1, [r2, #32]
  4007e6:	4b09      	ldr	r3, [pc, #36]	; (40080c <pmc_switch_mainck_to_xtal+0x48>)
  4007e8:	430b      	orrs	r3, r1
  4007ea:	6213      	str	r3, [r2, #32]
	}
}
  4007ec:	bc30      	pop	{r4, r5}
  4007ee:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4007f0:	4903      	ldr	r1, [pc, #12]	; (400800 <pmc_switch_mainck_to_xtal+0x3c>)
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4007f2:	4a07      	ldr	r2, [pc, #28]	; (400810 <pmc_switch_mainck_to_xtal+0x4c>)
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4007f4:	6a08      	ldr	r0, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4007f6:	4b07      	ldr	r3, [pc, #28]	; (400814 <pmc_switch_mainck_to_xtal+0x50>)
  4007f8:	4002      	ands	r2, r0
  4007fa:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4007fc:	620b      	str	r3, [r1, #32]
  4007fe:	4770      	bx	lr
  400800:	400e0600 	.word	0x400e0600
  400804:	00370001 	.word	0x00370001
  400808:	ffc8fffc 	.word	0xffc8fffc
  40080c:	01370000 	.word	0x01370000
  400810:	fec8fffc 	.word	0xfec8fffc
  400814:	01370002 	.word	0x01370002

00400818 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400818:	4b02      	ldr	r3, [pc, #8]	; (400824 <pmc_osc_is_ready_mainck+0xc>)
  40081a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40081c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400820:	4770      	bx	lr
  400822:	bf00      	nop
  400824:	400e0600 	.word	0x400e0600

00400828 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400828:	4b02      	ldr	r3, [pc, #8]	; (400834 <pmc_disable_pllack+0xc>)
  40082a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40082e:	629a      	str	r2, [r3, #40]	; 0x28
  400830:	4770      	bx	lr
  400832:	bf00      	nop
  400834:	400e0600 	.word	0x400e0600

00400838 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400838:	4b02      	ldr	r3, [pc, #8]	; (400844 <pmc_is_locked_pllack+0xc>)
  40083a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40083c:	f000 0002 	and.w	r0, r0, #2
  400840:	4770      	bx	lr
  400842:	bf00      	nop
  400844:	400e0600 	.word	0x400e0600

00400848 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400848:	283f      	cmp	r0, #63	; 0x3f
  40084a:	d81a      	bhi.n	400882 <pmc_enable_periph_clk+0x3a>
		return 1;
	}

	if (ul_id < 32) {
  40084c:	281f      	cmp	r0, #31
  40084e:	d80a      	bhi.n	400866 <pmc_enable_periph_clk+0x1e>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400850:	2301      	movs	r3, #1
  400852:	4a0e      	ldr	r2, [pc, #56]	; (40088c <pmc_enable_periph_clk+0x44>)
  400854:	fa03 f000 	lsl.w	r0, r3, r0
  400858:	6991      	ldr	r1, [r2, #24]
  40085a:	ea30 0301 	bics.w	r3, r0, r1
  40085e:	d012      	beq.n	400886 <pmc_enable_periph_clk+0x3e>
			PMC->PMC_PCER0 = 1 << ul_id;
  400860:	6110      	str	r0, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400862:	2000      	movs	r0, #0
  400864:	4770      	bx	lr
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400866:	2301      	movs	r3, #1
		ul_id -= 32;
  400868:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40086a:	4a08      	ldr	r2, [pc, #32]	; (40088c <pmc_enable_periph_clk+0x44>)
  40086c:	fa03 f000 	lsl.w	r0, r3, r0
  400870:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
  400874:	ea30 0303 	bics.w	r3, r0, r3
  400878:	d005      	beq.n	400886 <pmc_enable_periph_clk+0x3e>
			PMC->PMC_PCER1 = 1 << ul_id;
  40087a:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
	return 0;
  40087e:	2000      	movs	r0, #0
  400880:	4770      	bx	lr
		return 1;
  400882:	2001      	movs	r0, #1
  400884:	4770      	bx	lr
	return 0;
  400886:	2000      	movs	r0, #0
}
  400888:	4770      	bx	lr
  40088a:	bf00      	nop
  40088c:	400e0600 	.word	0x400e0600

00400890 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400890:	6943      	ldr	r3, [r0, #20]
  400892:	079b      	lsls	r3, r3, #30
  400894:	d502      	bpl.n	40089c <uart_write+0xc>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400896:	61c1      	str	r1, [r0, #28]
	return 0;
  400898:	2000      	movs	r0, #0
  40089a:	4770      	bx	lr
		return 1;
  40089c:	2001      	movs	r0, #1
}
  40089e:	4770      	bx	lr

004008a0 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  4008a0:	6943      	ldr	r3, [r0, #20]
  4008a2:	07db      	lsls	r3, r3, #31
  4008a4:	d503      	bpl.n	4008ae <uart_read+0xe>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4008a6:	6983      	ldr	r3, [r0, #24]
	return 0;
  4008a8:	2000      	movs	r0, #0
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4008aa:	700b      	strb	r3, [r1, #0]
	return 0;
  4008ac:	4770      	bx	lr
		return 1;
  4008ae:	2001      	movs	r0, #1
}
  4008b0:	4770      	bx	lr
  4008b2:	bf00      	nop

004008b4 <usart_set_async_baudrate>:
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4008b4:	010b      	lsls	r3, r1, #4
  4008b6:	4293      	cmp	r3, r2
{
  4008b8:	b410      	push	{r4}
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4008ba:	d814      	bhi.n	4008e6 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4008bc:	0859      	lsrs	r1, r3, #1
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4008be:	f64f 74fe 	movw	r4, #65534	; 0xfffe
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4008c2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  4008c6:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  4008ca:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4008cc:	1e59      	subs	r1, r3, #1
  4008ce:	42a1      	cmp	r1, r4
  4008d0:	d815      	bhi.n	4008fe <usart_set_async_baudrate+0x4a>
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  4008d2:	0412      	lsls	r2, r2, #16

	return 0;
  4008d4:	2100      	movs	r1, #0
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  4008d6:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  4008da:	431a      	orrs	r2, r3
  4008dc:	6202      	str	r2, [r0, #32]
}
  4008de:	4608      	mov	r0, r1
  4008e0:	f85d 4b04 	ldr.w	r4, [sp], #4
  4008e4:	4770      	bx	lr
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4008e6:	00c9      	lsls	r1, r1, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4008e8:	f64f 74fe 	movw	r4, #65534	; 0xfffe
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4008ec:	084b      	lsrs	r3, r1, #1
  4008ee:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  4008f2:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  4008f6:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4008f8:	1e59      	subs	r1, r3, #1
  4008fa:	42a1      	cmp	r1, r4
  4008fc:	d904      	bls.n	400908 <usart_set_async_baudrate+0x54>
		return 1;
  4008fe:	2101      	movs	r1, #1
}
  400900:	f85d 4b04 	ldr.w	r4, [sp], #4
  400904:	4608      	mov	r0, r1
  400906:	4770      	bx	lr
		p_usart->US_MR |= US_MR_OVER;
  400908:	6841      	ldr	r1, [r0, #4]
  40090a:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  40090e:	6041      	str	r1, [r0, #4]
  400910:	e7df      	b.n	4008d2 <usart_set_async_baudrate+0x1e>
  400912:	bf00      	nop

00400914 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  400914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	p_usart->US_MR = 0;
  400916:	2400      	movs	r4, #0
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  400918:	4d14      	ldr	r5, [pc, #80]	; (40096c <usart_init_rs232+0x58>)
	p_usart->US_CR = US_CR_RSTSTA;
  40091a:	f44f 7680 	mov.w	r6, #256	; 0x100
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  40091e:	f04f 0e88 	mov.w	lr, #136	; 0x88
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  400922:	2724      	movs	r7, #36	; 0x24
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  400924:	f8c0 50e4 	str.w	r5, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  400928:	6044      	str	r4, [r0, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  40092a:	f44f 2500 	mov.w	r5, #524288	; 0x80000
	p_usart->US_RTOR = 0;
  40092e:	6244      	str	r4, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  400930:	6284      	str	r4, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  400932:	f8c0 e000 	str.w	lr, [r0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  400936:	6007      	str	r7, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  400938:	6006      	str	r6, [r0, #0]
	ul_reg_val = 0;
  40093a:	4e0d      	ldr	r6, [pc, #52]	; (400970 <usart_init_rs232+0x5c>)
	p_usart->US_CR = US_CR_RTSDIS;
  40093c:	6005      	str	r5, [r0, #0]
	ul_reg_val = 0;
  40093e:	6034      	str	r4, [r6, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  400940:	b189      	cbz	r1, 400966 <usart_init_rs232+0x52>
  400942:	460d      	mov	r5, r1
  400944:	4b0b      	ldr	r3, [pc, #44]	; (400974 <usart_init_rs232+0x60>)
  400946:	6809      	ldr	r1, [r1, #0]
  400948:	4604      	mov	r4, r0
  40094a:	4798      	blx	r3
  40094c:	b958      	cbnz	r0, 400966 <usart_init_rs232+0x52>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40094e:	686a      	ldr	r2, [r5, #4]
  400950:	68ab      	ldr	r3, [r5, #8]
  400952:	692f      	ldr	r7, [r5, #16]
  400954:	4313      	orrs	r3, r2
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400956:	68e9      	ldr	r1, [r5, #12]
	p_usart->US_MR |= ul_reg_val;
  400958:	6862      	ldr	r2, [r4, #4]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40095a:	433b      	orrs	r3, r7
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  40095c:	430b      	orrs	r3, r1
	p_usart->US_MR |= ul_reg_val;
  40095e:	431a      	orrs	r2, r3
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400960:	6033      	str	r3, [r6, #0]
	p_usart->US_MR |= ul_reg_val;
  400962:	6062      	str	r2, [r4, #4]
}
  400964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
  400966:	2001      	movs	r0, #1
  400968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40096a:	bf00      	nop
  40096c:	55534100 	.word	0x55534100
  400970:	20400a48 	.word	0x20400a48
  400974:	004008b5 	.word	0x004008b5

00400978 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  400978:	2340      	movs	r3, #64	; 0x40
  40097a:	6003      	str	r3, [r0, #0]
  40097c:	4770      	bx	lr
  40097e:	bf00      	nop

00400980 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  400980:	2310      	movs	r3, #16
  400982:	6003      	str	r3, [r0, #0]
  400984:	4770      	bx	lr
  400986:	bf00      	nop

00400988 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400988:	6942      	ldr	r2, [r0, #20]
{
  40098a:	4603      	mov	r3, r0
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  40098c:	0792      	lsls	r2, r2, #30
  40098e:	d504      	bpl.n	40099a <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  400990:	f3c1 0108 	ubfx	r1, r1, #0, #9
	return 0;
  400994:	2000      	movs	r0, #0
	p_usart->US_THR = US_THR_TXCHR(c);
  400996:	61d9      	str	r1, [r3, #28]
	return 0;
  400998:	4770      	bx	lr
		return 1;
  40099a:	2001      	movs	r0, #1
}
  40099c:	4770      	bx	lr
  40099e:	bf00      	nop

004009a0 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4009a0:	6943      	ldr	r3, [r0, #20]
  4009a2:	07db      	lsls	r3, r3, #31
  4009a4:	d505      	bpl.n	4009b2 <usart_read+0x12>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4009a6:	6983      	ldr	r3, [r0, #24]
	return 0;
  4009a8:	2000      	movs	r0, #0
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4009aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4009ae:	600b      	str	r3, [r1, #0]
	return 0;
  4009b0:	4770      	bx	lr
		return 1;
  4009b2:	2001      	movs	r0, #1
}
  4009b4:	4770      	bx	lr
  4009b6:	bf00      	nop

004009b8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4009b8:	e7fe      	b.n	4009b8 <Dummy_Handler>
  4009ba:	bf00      	nop

004009bc <Reset_Handler>:
        if (pSrc != pDest) {
  4009bc:	4924      	ldr	r1, [pc, #144]	; (400a50 <Reset_Handler+0x94>)
  4009be:	4a25      	ldr	r2, [pc, #148]	; (400a54 <Reset_Handler+0x98>)
  4009c0:	4291      	cmp	r1, r2
{
  4009c2:	b500      	push	{lr}
  4009c4:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  4009c6:	d00e      	beq.n	4009e6 <Reset_Handler+0x2a>
                for (; pDest < &_erelocate;) {
  4009c8:	4823      	ldr	r0, [pc, #140]	; (400a58 <Reset_Handler+0x9c>)
  4009ca:	4282      	cmp	r2, r0
  4009cc:	d20b      	bcs.n	4009e6 <Reset_Handler+0x2a>
  4009ce:	43d3      	mvns	r3, r2
  4009d0:	4403      	add	r3, r0
  4009d2:	f023 0303 	bic.w	r3, r3, #3
  4009d6:	3304      	adds	r3, #4
  4009d8:	4413      	add	r3, r2
                        *pDest++ = *pSrc++;
  4009da:	f851 0b04 	ldr.w	r0, [r1], #4
  4009de:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  4009e2:	429a      	cmp	r2, r3
  4009e4:	d1f9      	bne.n	4009da <Reset_Handler+0x1e>
        for (pDest = &_szero; pDest < &_ezero;) {
  4009e6:	4a1d      	ldr	r2, [pc, #116]	; (400a5c <Reset_Handler+0xa0>)
  4009e8:	491d      	ldr	r1, [pc, #116]	; (400a60 <Reset_Handler+0xa4>)
  4009ea:	428a      	cmp	r2, r1
  4009ec:	d20a      	bcs.n	400a04 <Reset_Handler+0x48>
  4009ee:	43d3      	mvns	r3, r2
                *pDest++ = 0;
  4009f0:	2000      	movs	r0, #0
  4009f2:	440b      	add	r3, r1
  4009f4:	f023 0303 	bic.w	r3, r3, #3
  4009f8:	3304      	adds	r3, #4
  4009fa:	4413      	add	r3, r2
  4009fc:	f842 0b04 	str.w	r0, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400a00:	429a      	cmp	r2, r3
  400a02:	d1fb      	bne.n	4009fc <Reset_Handler+0x40>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400a04:	4b17      	ldr	r3, [pc, #92]	; (400a64 <Reset_Handler+0xa8>)
  400a06:	4a18      	ldr	r2, [pc, #96]	; (400a68 <Reset_Handler+0xac>)
  400a08:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400a0c:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400a0e:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400a12:	fab3 f383 	clz	r3, r3
  400a16:	095b      	lsrs	r3, r3, #5
  400a18:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400a1a:	b672      	cpsid	i
  __ASM volatile ("dmb");
  400a1c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400a20:	4a12      	ldr	r2, [pc, #72]	; (400a6c <Reset_Handler+0xb0>)
  400a22:	2300      	movs	r3, #0
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  400a24:	4912      	ldr	r1, [pc, #72]	; (400a70 <Reset_Handler+0xb4>)
  400a26:	7013      	strb	r3, [r2, #0]
	return flags;
  400a28:	9801      	ldr	r0, [sp, #4]
  400a2a:	680b      	ldr	r3, [r1, #0]
  400a2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400a30:	600b      	str	r3, [r1, #0]
  __ASM volatile ("dsb");
  400a32:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400a36:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400a3a:	b120      	cbz	r0, 400a46 <Reset_Handler+0x8a>
		cpu_irq_enable();
  400a3c:	2301      	movs	r3, #1
  400a3e:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("dmb");
  400a40:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400a44:	b662      	cpsie	i
        __libc_init_array();
  400a46:	4b0b      	ldr	r3, [pc, #44]	; (400a74 <Reset_Handler+0xb8>)
  400a48:	4798      	blx	r3
        main();
  400a4a:	4b0b      	ldr	r3, [pc, #44]	; (400a78 <Reset_Handler+0xbc>)
  400a4c:	4798      	blx	r3
  400a4e:	e7fe      	b.n	400a4e <Reset_Handler+0x92>
  400a50:	004062b4 	.word	0x004062b4
  400a54:	20400000 	.word	0x20400000
  400a58:	204009b8 	.word	0x204009b8
  400a5c:	204009b8 	.word	0x204009b8
  400a60:	20400c48 	.word	0x20400c48
  400a64:	00400000 	.word	0x00400000
  400a68:	e000ed00 	.word	0xe000ed00
  400a6c:	20400000 	.word	0x20400000
  400a70:	e000ed88 	.word	0xe000ed88
  400a74:	00402fcd 	.word	0x00402fcd
  400a78:	00402e29 	.word	0x00402e29

00400a7c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  400a7c:	4a31      	ldr	r2, [pc, #196]	; (400b44 <SystemCoreClockUpdate+0xc8>)
  400a7e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400a80:	f003 0303 	and.w	r3, r3, #3
  400a84:	2b01      	cmp	r3, #1
  400a86:	d03d      	beq.n	400b04 <SystemCoreClockUpdate+0x88>
  400a88:	d326      	bcc.n	400ad8 <SystemCoreClockUpdate+0x5c>
  400a8a:	2b02      	cmp	r3, #2
  400a8c:	d00d      	beq.n	400aaa <SystemCoreClockUpdate+0x2e>
  400a8e:	492e      	ldr	r1, [pc, #184]	; (400b48 <SystemCoreClockUpdate+0xcc>)
  400a90:	680b      	ldr	r3, [r1, #0]

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  400a92:	482c      	ldr	r0, [pc, #176]	; (400b44 <SystemCoreClockUpdate+0xc8>)
  400a94:	6b02      	ldr	r2, [r0, #48]	; 0x30
  400a96:	f002 0270 	and.w	r2, r2, #112	; 0x70
  400a9a:	2a70      	cmp	r2, #112	; 0x70
  400a9c:	d02c      	beq.n	400af8 <SystemCoreClockUpdate+0x7c>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400a9e:	6b02      	ldr	r2, [r0, #48]	; 0x30
  400aa0:	f3c2 1202 	ubfx	r2, r2, #4, #3
  400aa4:	40d3      	lsrs	r3, r2
  400aa6:	600b      	str	r3, [r1, #0]
  400aa8:	4770      	bx	lr
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400aaa:	6a13      	ldr	r3, [r2, #32]
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  400aac:	4926      	ldr	r1, [pc, #152]	; (400b48 <SystemCoreClockUpdate+0xcc>)
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400aae:	01db      	lsls	r3, r3, #7
  400ab0:	d538      	bpl.n	400b24 <SystemCoreClockUpdate+0xa8>
            SystemCoreClock *= 3U;
  400ab2:	4b26      	ldr	r3, [pc, #152]	; (400b4c <SystemCoreClockUpdate+0xd0>)
  400ab4:	600b      	str	r3, [r1, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  400ab6:	4823      	ldr	r0, [pc, #140]	; (400b44 <SystemCoreClockUpdate+0xc8>)
  400ab8:	6b02      	ldr	r2, [r0, #48]	; 0x30
  400aba:	f002 0203 	and.w	r2, r2, #3
  400abe:	2a02      	cmp	r2, #2
  400ac0:	d1e7      	bne.n	400a92 <SystemCoreClockUpdate+0x16>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400ac2:	6a82      	ldr	r2, [r0, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400ac4:	6a80      	ldr	r0, [r0, #40]	; 0x28
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400ac6:	f3c2 420a 	ubfx	r2, r2, #16, #11
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400aca:	b2c0      	uxtb	r0, r0
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400acc:	fb02 3303 	mla	r3, r2, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400ad0:	fbb3 f3f0 	udiv	r3, r3, r0
  400ad4:	600b      	str	r3, [r1, #0]
  400ad6:	e7dc      	b.n	400a92 <SystemCoreClockUpdate+0x16>
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  400ad8:	4b1d      	ldr	r3, [pc, #116]	; (400b50 <SystemCoreClockUpdate+0xd4>)
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400ada:	491b      	ldr	r1, [pc, #108]	; (400b48 <SystemCoreClockUpdate+0xcc>)
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  400adc:	695b      	ldr	r3, [r3, #20]
  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  400ade:	4819      	ldr	r0, [pc, #100]	; (400b44 <SystemCoreClockUpdate+0xc8>)
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  400ae0:	061b      	lsls	r3, r3, #24
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400ae2:	bf4c      	ite	mi
  400ae4:	f44f 4300 	movmi.w	r3, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400ae8:	f44f 43fa 	movpl.w	r3, #32000	; 0x7d00
  400aec:	600b      	str	r3, [r1, #0]
  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  400aee:	6b02      	ldr	r2, [r0, #48]	; 0x30
  400af0:	f002 0270 	and.w	r2, r2, #112	; 0x70
  400af4:	2a70      	cmp	r2, #112	; 0x70
  400af6:	d1d2      	bne.n	400a9e <SystemCoreClockUpdate+0x22>
    SystemCoreClock /= 3U;
  400af8:	4a16      	ldr	r2, [pc, #88]	; (400b54 <SystemCoreClockUpdate+0xd8>)
  400afa:	fba2 2303 	umull	r2, r3, r2, r3
  400afe:	085b      	lsrs	r3, r3, #1
  400b00:	600b      	str	r3, [r1, #0]
  400b02:	4770      	bx	lr
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400b04:	6a13      	ldr	r3, [r2, #32]
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400b06:	4910      	ldr	r1, [pc, #64]	; (400b48 <SystemCoreClockUpdate+0xcc>)
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400b08:	01d8      	lsls	r0, r3, #7
  400b0a:	d408      	bmi.n	400b1e <SystemCoreClockUpdate+0xa2>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400b0c:	4b12      	ldr	r3, [pc, #72]	; (400b58 <SystemCoreClockUpdate+0xdc>)
  400b0e:	600b      	str	r3, [r1, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400b10:	6a12      	ldr	r2, [r2, #32]
  400b12:	f002 0270 	and.w	r2, r2, #112	; 0x70
  400b16:	2a10      	cmp	r2, #16
  400b18:	d011      	beq.n	400b3e <SystemCoreClockUpdate+0xc2>
  400b1a:	2a20      	cmp	r2, #32
  400b1c:	d1b9      	bne.n	400a92 <SystemCoreClockUpdate+0x16>
            SystemCoreClock *= 3U;
  400b1e:	4b0b      	ldr	r3, [pc, #44]	; (400b4c <SystemCoreClockUpdate+0xd0>)
  400b20:	600b      	str	r3, [r1, #0]
          break;
  400b22:	e7b6      	b.n	400a92 <SystemCoreClockUpdate+0x16>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400b24:	4b0c      	ldr	r3, [pc, #48]	; (400b58 <SystemCoreClockUpdate+0xdc>)
  400b26:	600b      	str	r3, [r1, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400b28:	6a12      	ldr	r2, [r2, #32]
  400b2a:	f002 0270 	and.w	r2, r2, #112	; 0x70
  400b2e:	2a10      	cmp	r2, #16
  400b30:	d002      	beq.n	400b38 <SystemCoreClockUpdate+0xbc>
  400b32:	2a20      	cmp	r2, #32
  400b34:	d0bd      	beq.n	400ab2 <SystemCoreClockUpdate+0x36>
  400b36:	e7be      	b.n	400ab6 <SystemCoreClockUpdate+0x3a>
            SystemCoreClock *= 2U;
  400b38:	4b08      	ldr	r3, [pc, #32]	; (400b5c <SystemCoreClockUpdate+0xe0>)
  400b3a:	600b      	str	r3, [r1, #0]
          break;
  400b3c:	e7bb      	b.n	400ab6 <SystemCoreClockUpdate+0x3a>
            SystemCoreClock *= 2U;
  400b3e:	4b07      	ldr	r3, [pc, #28]	; (400b5c <SystemCoreClockUpdate+0xe0>)
  400b40:	600b      	str	r3, [r1, #0]
          break;
  400b42:	e7a6      	b.n	400a92 <SystemCoreClockUpdate+0x16>
  400b44:	400e0600 	.word	0x400e0600
  400b48:	20400004 	.word	0x20400004
  400b4c:	00b71b00 	.word	0x00b71b00
  400b50:	400e1810 	.word	0x400e1810
  400b54:	aaaaaaab 	.word	0xaaaaaaab
  400b58:	003d0900 	.word	0x003d0900
  400b5c:	007a1200 	.word	0x007a1200

00400b60 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  400b60:	4b16      	ldr	r3, [pc, #88]	; (400bbc <system_init_flash+0x5c>)
  400b62:	4298      	cmp	r0, r3
  400b64:	d917      	bls.n	400b96 <system_init_flash+0x36>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  400b66:	4b16      	ldr	r3, [pc, #88]	; (400bc0 <system_init_flash+0x60>)
  400b68:	4298      	cmp	r0, r3
  400b6a:	d910      	bls.n	400b8e <system_init_flash+0x2e>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  400b6c:	4b15      	ldr	r3, [pc, #84]	; (400bc4 <system_init_flash+0x64>)
  400b6e:	4298      	cmp	r0, r3
  400b70:	d91a      	bls.n	400ba8 <system_init_flash+0x48>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  400b72:	4b15      	ldr	r3, [pc, #84]	; (400bc8 <system_init_flash+0x68>)
  400b74:	4298      	cmp	r0, r3
  400b76:	d913      	bls.n	400ba0 <system_init_flash+0x40>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  400b78:	4b14      	ldr	r3, [pc, #80]	; (400bcc <system_init_flash+0x6c>)
  400b7a:	4298      	cmp	r0, r3
  400b7c:	d918      	bls.n	400bb0 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  400b7e:	4b14      	ldr	r3, [pc, #80]	; (400bd0 <system_init_flash+0x70>)
  400b80:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400b82:	4b14      	ldr	r3, [pc, #80]	; (400bd4 <system_init_flash+0x74>)
  400b84:	bf94      	ite	ls
  400b86:	4a14      	ldrls	r2, [pc, #80]	; (400bd8 <system_init_flash+0x78>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  400b88:	4a14      	ldrhi	r2, [pc, #80]	; (400bdc <system_init_flash+0x7c>)
  400b8a:	601a      	str	r2, [r3, #0]
  400b8c:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400b8e:	4b11      	ldr	r3, [pc, #68]	; (400bd4 <system_init_flash+0x74>)
  400b90:	4a13      	ldr	r2, [pc, #76]	; (400be0 <system_init_flash+0x80>)
  400b92:	601a      	str	r2, [r3, #0]
  400b94:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400b96:	4b0f      	ldr	r3, [pc, #60]	; (400bd4 <system_init_flash+0x74>)
  400b98:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400b9c:	601a      	str	r2, [r3, #0]
  400b9e:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400ba0:	4b0c      	ldr	r3, [pc, #48]	; (400bd4 <system_init_flash+0x74>)
  400ba2:	4a10      	ldr	r2, [pc, #64]	; (400be4 <system_init_flash+0x84>)
  400ba4:	601a      	str	r2, [r3, #0]
  400ba6:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400ba8:	4b0a      	ldr	r3, [pc, #40]	; (400bd4 <system_init_flash+0x74>)
  400baa:	4a0f      	ldr	r2, [pc, #60]	; (400be8 <system_init_flash+0x88>)
  400bac:	601a      	str	r2, [r3, #0]
  400bae:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400bb0:	4b08      	ldr	r3, [pc, #32]	; (400bd4 <system_init_flash+0x74>)
  400bb2:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  400bb6:	601a      	str	r2, [r3, #0]
  400bb8:	4770      	bx	lr
  400bba:	bf00      	nop
  400bbc:	015ef3bf 	.word	0x015ef3bf
  400bc0:	02bde77f 	.word	0x02bde77f
  400bc4:	041cdb3f 	.word	0x041cdb3f
  400bc8:	057bceff 	.word	0x057bceff
  400bcc:	06dac2bf 	.word	0x06dac2bf
  400bd0:	0839b67f 	.word	0x0839b67f
  400bd4:	400e0c00 	.word	0x400e0c00
  400bd8:	04000500 	.word	0x04000500
  400bdc:	04000600 	.word	0x04000600
  400be0:	04000100 	.word	0x04000100
  400be4:	04000300 	.word	0x04000300
  400be8:	04000200 	.word	0x04000200

00400bec <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400bec:	4a0d      	ldr	r2, [pc, #52]	; (400c24 <_sbrk+0x38>)
	int ramend = (int)&__ram_end__;
  400bee:	490e      	ldr	r1, [pc, #56]	; (400c28 <_sbrk+0x3c>)
	if (heap == NULL) {
  400bf0:	6813      	ldr	r3, [r2, #0]
  400bf2:	b143      	cbz	r3, 400c06 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
  400bf4:	4418      	add	r0, r3
  400bf6:	4281      	cmp	r1, r0
  400bf8:	db02      	blt.n	400c00 <_sbrk+0x14>
		return (caddr_t) -1;	
	}

	heap += incr;
  400bfa:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400bfc:	4618      	mov	r0, r3
  400bfe:	4770      	bx	lr
		return (caddr_t) -1;	
  400c00:	f04f 30ff 	mov.w	r0, #4294967295
  400c04:	4770      	bx	lr
{
  400c06:	b410      	push	{r4}
		heap = (unsigned char *)&_end;
  400c08:	4c08      	ldr	r4, [pc, #32]	; (400c2c <_sbrk+0x40>)
	if (((int)prev_heap + incr) > ramend) {
  400c0a:	4420      	add	r0, r4
		heap = (unsigned char *)&_end;
  400c0c:	6014      	str	r4, [r2, #0]
	if (((int)prev_heap + incr) > ramend) {
  400c0e:	4281      	cmp	r1, r0
  400c10:	db04      	blt.n	400c1c <_sbrk+0x30>
	heap += incr;
  400c12:	6010      	str	r0, [r2, #0]
	return (caddr_t) prev_heap;
  400c14:	4620      	mov	r0, r4
}
  400c16:	f85d 4b04 	ldr.w	r4, [sp], #4
  400c1a:	4770      	bx	lr
		return (caddr_t) -1;	
  400c1c:	f04f 30ff 	mov.w	r0, #4294967295
  400c20:	e7f9      	b.n	400c16 <_sbrk+0x2a>
  400c22:	bf00      	nop
  400c24:	20400a4c 	.word	0x20400a4c
  400c28:	2045fffc 	.word	0x2045fffc
  400c2c:	20402e48 	.word	0x20402e48

00400c30 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400c30:	f04f 30ff 	mov.w	r0, #4294967295
  400c34:	4770      	bx	lr
  400c36:	bf00      	nop

00400c38 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400c38:	f44f 5300 	mov.w	r3, #8192	; 0x2000

	return 0;
}
  400c3c:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
  400c3e:	604b      	str	r3, [r1, #4]
}
  400c40:	4770      	bx	lr
  400c42:	bf00      	nop

00400c44 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  400c44:	2001      	movs	r0, #1
  400c46:	4770      	bx	lr

00400c48 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400c48:	2000      	movs	r0, #0
  400c4a:	4770      	bx	lr

00400c4c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400c4c:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  400c50:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  400c54:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  400c56:	6081      	str	r1, [r0, #8]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400c58:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400c5a:	6103      	str	r3, [r0, #16]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400c5c:	e880 000c 	stmia.w	r0, {r2, r3}
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400c60:	4770      	bx	lr
  400c62:	bf00      	nop

00400c64 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  400c64:	2300      	movs	r3, #0
  400c66:	6103      	str	r3, [r0, #16]
  400c68:	4770      	bx	lr
  400c6a:	bf00      	nop

00400c6c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  400c6c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  400c6e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  400c70:	689a      	ldr	r2, [r3, #8]
  400c72:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  400c74:	689a      	ldr	r2, [r3, #8]
  400c76:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  400c78:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400c7a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400c7c:	6803      	ldr	r3, [r0, #0]
  400c7e:	3301      	adds	r3, #1
  400c80:	6003      	str	r3, [r0, #0]
  400c82:	4770      	bx	lr

00400c84 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  400c84:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  400c86:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  400c88:	1c6b      	adds	r3, r5, #1
  400c8a:	d011      	beq.n	400cb0 <vListInsert+0x2c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400c8c:	f100 0208 	add.w	r2, r0, #8
  400c90:	e000      	b.n	400c94 <vListInsert+0x10>
  400c92:	461a      	mov	r2, r3
  400c94:	6853      	ldr	r3, [r2, #4]
  400c96:	681c      	ldr	r4, [r3, #0]
  400c98:	42a5      	cmp	r5, r4
  400c9a:	d2fa      	bcs.n	400c92 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  400c9c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  400c9e:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  400ca0:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  400ca2:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400ca4:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400ca6:	6803      	ldr	r3, [r0, #0]
  400ca8:	3301      	adds	r3, #1
}
  400caa:	bc30      	pop	{r4, r5}
	( pxList->uxNumberOfItems )++;
  400cac:	6003      	str	r3, [r0, #0]
}
  400cae:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
  400cb0:	6902      	ldr	r2, [r0, #16]
  400cb2:	6853      	ldr	r3, [r2, #4]
  400cb4:	e7f2      	b.n	400c9c <vListInsert+0x18>
  400cb6:	bf00      	nop

00400cb8 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  400cb8:	6842      	ldr	r2, [r0, #4]
  400cba:	6881      	ldr	r1, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  400cbc:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  400cbe:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  400cc0:	6882      	ldr	r2, [r0, #8]
  400cc2:	6841      	ldr	r1, [r0, #4]
  400cc4:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  400cc6:	685a      	ldr	r2, [r3, #4]
  400cc8:	4290      	cmp	r0, r2
  400cca:	d005      	beq.n	400cd8 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  400ccc:	2200      	movs	r2, #0
  400cce:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  400cd0:	6818      	ldr	r0, [r3, #0]
  400cd2:	3801      	subs	r0, #1
  400cd4:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  400cd6:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  400cd8:	6882      	ldr	r2, [r0, #8]
  400cda:	605a      	str	r2, [r3, #4]
  400cdc:	e7f6      	b.n	400ccc <uxListRemove+0x14>
  400cde:	bf00      	nop

00400ce0 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  400ce0:	4b0c      	ldr	r3, [pc, #48]	; (400d14 <prvTaskExitError+0x34>)
  400ce2:	681b      	ldr	r3, [r3, #0]
  400ce4:	3301      	adds	r3, #1
  400ce6:	d00a      	beq.n	400cfe <prvTaskExitError+0x1e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  400ce8:	f04f 0380 	mov.w	r3, #128	; 0x80
  400cec:	b672      	cpsid	i
  400cee:	f383 8811 	msr	BASEPRI, r3
  400cf2:	f3bf 8f6f 	isb	sy
  400cf6:	f3bf 8f4f 	dsb	sy
  400cfa:	b662      	cpsie	i
  400cfc:	e7fe      	b.n	400cfc <prvTaskExitError+0x1c>
  400cfe:	f04f 0380 	mov.w	r3, #128	; 0x80
  400d02:	b672      	cpsid	i
  400d04:	f383 8811 	msr	BASEPRI, r3
  400d08:	f3bf 8f6f 	isb	sy
  400d0c:	f3bf 8f4f 	dsb	sy
  400d10:	b662      	cpsie	i
  400d12:	e7fe      	b.n	400d12 <prvTaskExitError+0x32>
  400d14:	20400008 	.word	0x20400008

00400d18 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  400d18:	4806      	ldr	r0, [pc, #24]	; (400d34 <prvPortStartFirstTask+0x1c>)
  400d1a:	6800      	ldr	r0, [r0, #0]
  400d1c:	6800      	ldr	r0, [r0, #0]
  400d1e:	f380 8808 	msr	MSP, r0
  400d22:	b662      	cpsie	i
  400d24:	b661      	cpsie	f
  400d26:	f3bf 8f4f 	dsb	sy
  400d2a:	f3bf 8f6f 	isb	sy
  400d2e:	df00      	svc	0
  400d30:	bf00      	nop
  400d32:	0000      	.short	0x0000
  400d34:	e000ed08 	.word	0xe000ed08

00400d38 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  400d38:	f8df 000c 	ldr.w	r0, [pc, #12]	; 400d48 <vPortEnableVFP+0x10>
  400d3c:	6801      	ldr	r1, [r0, #0]
  400d3e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  400d42:	6001      	str	r1, [r0, #0]
  400d44:	4770      	bx	lr
  400d46:	0000      	.short	0x0000
  400d48:	e000ed88 	.word	0xe000ed88

00400d4c <pxPortInitialiseStack>:
{
  400d4c:	b470      	push	{r4, r5, r6}
  400d4e:	4603      	mov	r3, r0
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  400d50:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  400d54:	4d07      	ldr	r5, [pc, #28]	; (400d74 <pxPortInitialiseStack+0x28>)
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  400d56:	f06f 0402 	mvn.w	r4, #2
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  400d5a:	f840 1c08 	str.w	r1, [r0, #-8]
}
  400d5e:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  400d60:	f843 2c20 	str.w	r2, [r3, #-32]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  400d64:	f843 6c04 	str.w	r6, [r3, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  400d68:	f843 5c0c 	str.w	r5, [r3, #-12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  400d6c:	f843 4c24 	str.w	r4, [r3, #-36]
}
  400d70:	bc70      	pop	{r4, r5, r6}
  400d72:	4770      	bx	lr
  400d74:	00400ce1 	.word	0x00400ce1

00400d78 <SVC_Handler>:
	__asm volatile (
  400d78:	4b06      	ldr	r3, [pc, #24]	; (400d94 <pxCurrentTCBConst2>)
  400d7a:	6819      	ldr	r1, [r3, #0]
  400d7c:	6808      	ldr	r0, [r1, #0]
  400d7e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400d82:	f380 8809 	msr	PSP, r0
  400d86:	f3bf 8f6f 	isb	sy
  400d8a:	f04f 0000 	mov.w	r0, #0
  400d8e:	f380 8811 	msr	BASEPRI, r0
  400d92:	4770      	bx	lr

00400d94 <pxCurrentTCBConst2>:
  400d94:	20400a58 	.word	0x20400a58
  400d98:	4770      	bx	lr
  400d9a:	bf00      	nop

00400d9c <vPortEnterCritical>:
  400d9c:	f04f 0380 	mov.w	r3, #128	; 0x80
  400da0:	b672      	cpsid	i
  400da2:	f383 8811 	msr	BASEPRI, r3
  400da6:	f3bf 8f6f 	isb	sy
  400daa:	f3bf 8f4f 	dsb	sy
  400dae:	b662      	cpsie	i
	uxCriticalNesting++;
  400db0:	4a0b      	ldr	r2, [pc, #44]	; (400de0 <vPortEnterCritical+0x44>)
  400db2:	6813      	ldr	r3, [r2, #0]
  400db4:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
  400db6:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
  400db8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  400dba:	d000      	beq.n	400dbe <vPortEnterCritical+0x22>
  400dbc:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  400dbe:	4b09      	ldr	r3, [pc, #36]	; (400de4 <vPortEnterCritical+0x48>)
  400dc0:	681b      	ldr	r3, [r3, #0]
  400dc2:	f013 0fff 	tst.w	r3, #255	; 0xff
  400dc6:	d0f9      	beq.n	400dbc <vPortEnterCritical+0x20>
  400dc8:	f04f 0380 	mov.w	r3, #128	; 0x80
  400dcc:	b672      	cpsid	i
  400dce:	f383 8811 	msr	BASEPRI, r3
  400dd2:	f3bf 8f6f 	isb	sy
  400dd6:	f3bf 8f4f 	dsb	sy
  400dda:	b662      	cpsie	i
  400ddc:	e7fe      	b.n	400ddc <vPortEnterCritical+0x40>
  400dde:	bf00      	nop
  400de0:	20400008 	.word	0x20400008
  400de4:	e000ed04 	.word	0xe000ed04

00400de8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  400de8:	4a09      	ldr	r2, [pc, #36]	; (400e10 <vPortExitCritical+0x28>)
  400dea:	6813      	ldr	r3, [r2, #0]
  400dec:	b953      	cbnz	r3, 400e04 <vPortExitCritical+0x1c>
  400dee:	f04f 0380 	mov.w	r3, #128	; 0x80
  400df2:	b672      	cpsid	i
  400df4:	f383 8811 	msr	BASEPRI, r3
  400df8:	f3bf 8f6f 	isb	sy
  400dfc:	f3bf 8f4f 	dsb	sy
  400e00:	b662      	cpsie	i
  400e02:	e7fe      	b.n	400e02 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  400e04:	3b01      	subs	r3, #1
  400e06:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  400e08:	b90b      	cbnz	r3, 400e0e <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  400e0a:	f383 8811 	msr	BASEPRI, r3
  400e0e:	4770      	bx	lr
  400e10:	20400008 	.word	0x20400008

00400e14 <PendSV_Handler>:
	__asm volatile
  400e14:	f3ef 8009 	mrs	r0, PSP
  400e18:	f3bf 8f6f 	isb	sy
  400e1c:	4b15      	ldr	r3, [pc, #84]	; (400e74 <pxCurrentTCBConst>)
  400e1e:	681a      	ldr	r2, [r3, #0]
  400e20:	f01e 0f10 	tst.w	lr, #16
  400e24:	bf08      	it	eq
  400e26:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  400e2a:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400e2e:	6010      	str	r0, [r2, #0]
  400e30:	f84d 3d04 	str.w	r3, [sp, #-4]!
  400e34:	f04f 0080 	mov.w	r0, #128	; 0x80
  400e38:	b672      	cpsid	i
  400e3a:	f380 8811 	msr	BASEPRI, r0
  400e3e:	f3bf 8f4f 	dsb	sy
  400e42:	f3bf 8f6f 	isb	sy
  400e46:	b662      	cpsie	i
  400e48:	f001 f922 	bl	402090 <vTaskSwitchContext>
  400e4c:	f04f 0000 	mov.w	r0, #0
  400e50:	f380 8811 	msr	BASEPRI, r0
  400e54:	bc08      	pop	{r3}
  400e56:	6819      	ldr	r1, [r3, #0]
  400e58:	6808      	ldr	r0, [r1, #0]
  400e5a:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400e5e:	f01e 0f10 	tst.w	lr, #16
  400e62:	bf08      	it	eq
  400e64:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  400e68:	f380 8809 	msr	PSP, r0
  400e6c:	f3bf 8f6f 	isb	sy
  400e70:	4770      	bx	lr
  400e72:	bf00      	nop

00400e74 <pxCurrentTCBConst>:
  400e74:	20400a58 	.word	0x20400a58
  400e78:	4770      	bx	lr
  400e7a:	bf00      	nop

00400e7c <SysTick_Handler>:
{
  400e7c:	b508      	push	{r3, lr}
	__asm volatile
  400e7e:	f3ef 8311 	mrs	r3, BASEPRI
  400e82:	f04f 0280 	mov.w	r2, #128	; 0x80
  400e86:	b672      	cpsid	i
  400e88:	f382 8811 	msr	BASEPRI, r2
  400e8c:	f3bf 8f6f 	isb	sy
  400e90:	f3bf 8f4f 	dsb	sy
  400e94:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  400e96:	4b05      	ldr	r3, [pc, #20]	; (400eac <SysTick_Handler+0x30>)
  400e98:	4798      	blx	r3
  400e9a:	b118      	cbz	r0, 400ea4 <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  400e9c:	4b04      	ldr	r3, [pc, #16]	; (400eb0 <SysTick_Handler+0x34>)
  400e9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400ea2:	601a      	str	r2, [r3, #0]
	__asm volatile
  400ea4:	2300      	movs	r3, #0
  400ea6:	f383 8811 	msr	BASEPRI, r3
  400eaa:	bd08      	pop	{r3, pc}
  400eac:	00401cc1 	.word	0x00401cc1
  400eb0:	e000ed04 	.word	0xe000ed04

00400eb4 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  400eb4:	4903      	ldr	r1, [pc, #12]	; (400ec4 <vPortSetupTimerInterrupt+0x10>)
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  400eb6:	2207      	movs	r2, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  400eb8:	4803      	ldr	r0, [pc, #12]	; (400ec8 <vPortSetupTimerInterrupt+0x14>)
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  400eba:	4b04      	ldr	r3, [pc, #16]	; (400ecc <vPortSetupTimerInterrupt+0x18>)
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  400ebc:	6008      	str	r0, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  400ebe:	601a      	str	r2, [r3, #0]
  400ec0:	4770      	bx	lr
  400ec2:	bf00      	nop
  400ec4:	e000e014 	.word	0xe000e014
  400ec8:	000927bf 	.word	0x000927bf
  400ecc:	e000e010 	.word	0xe000e010

00400ed0 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  400ed0:	4b23      	ldr	r3, [pc, #140]	; (400f60 <xPortStartScheduler+0x90>)
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  400ed2:	2207      	movs	r2, #7
  400ed4:	4823      	ldr	r0, [pc, #140]	; (400f64 <xPortStartScheduler+0x94>)
{
  400ed6:	b530      	push	{r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  400ed8:	7819      	ldrb	r1, [r3, #0]
{
  400eda:	b083      	sub	sp, #12
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  400edc:	25ff      	movs	r5, #255	; 0xff
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  400ede:	4c22      	ldr	r4, [pc, #136]	; (400f68 <xPortStartScheduler+0x98>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  400ee0:	b2c9      	uxtb	r1, r1
  400ee2:	9101      	str	r1, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  400ee4:	701d      	strb	r5, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  400ee6:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  400ee8:	6002      	str	r2, [r0, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  400eea:	b2db      	uxtb	r3, r3
  400eec:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  400ef0:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  400ef4:	f89d 1003 	ldrb.w	r1, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  400ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  400efc:	0609      	lsls	r1, r1, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  400efe:	7023      	strb	r3, [r4, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  400f00:	d50d      	bpl.n	400f1e <xPortStartScheduler+0x4e>
  400f02:	2206      	movs	r2, #6
  400f04:	e000      	b.n	400f08 <xPortStartScheduler+0x38>
  400f06:	460a      	mov	r2, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  400f08:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400f0c:	1e51      	subs	r1, r2, #1
  400f0e:	005b      	lsls	r3, r3, #1
  400f10:	b2db      	uxtb	r3, r3
  400f12:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  400f16:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400f1a:	061b      	lsls	r3, r3, #24
  400f1c:	d4f3      	bmi.n	400f06 <xPortStartScheduler+0x36>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  400f1e:	9901      	ldr	r1, [sp, #4]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  400f20:	0212      	lsls	r2, r2, #8
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  400f22:	4b12      	ldr	r3, [pc, #72]	; (400f6c <xPortStartScheduler+0x9c>)
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  400f24:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  400f28:	b2c9      	uxtb	r1, r1
  400f2a:	4c0d      	ldr	r4, [pc, #52]	; (400f60 <xPortStartScheduler+0x90>)
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  400f2c:	6002      	str	r2, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  400f2e:	7021      	strb	r1, [r4, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  400f30:	681a      	ldr	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  400f32:	490f      	ldr	r1, [pc, #60]	; (400f70 <xPortStartScheduler+0xa0>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  400f34:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  400f38:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  400f3a:	681a      	ldr	r2, [r3, #0]
  400f3c:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  400f40:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  400f42:	4788      	blx	r1
	uxCriticalNesting = 0;
  400f44:	4a0b      	ldr	r2, [pc, #44]	; (400f74 <xPortStartScheduler+0xa4>)
  400f46:	2100      	movs	r1, #0
	vPortEnableVFP();
  400f48:	4b0b      	ldr	r3, [pc, #44]	; (400f78 <xPortStartScheduler+0xa8>)
	uxCriticalNesting = 0;
  400f4a:	6011      	str	r1, [r2, #0]
	vPortEnableVFP();
  400f4c:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  400f4e:	4a0b      	ldr	r2, [pc, #44]	; (400f7c <xPortStartScheduler+0xac>)
	prvPortStartFirstTask();
  400f50:	490b      	ldr	r1, [pc, #44]	; (400f80 <xPortStartScheduler+0xb0>)
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  400f52:	6813      	ldr	r3, [r2, #0]
  400f54:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  400f58:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  400f5a:	4788      	blx	r1
	prvTaskExitError();
  400f5c:	4b09      	ldr	r3, [pc, #36]	; (400f84 <xPortStartScheduler+0xb4>)
  400f5e:	4798      	blx	r3
  400f60:	e000e400 	.word	0xe000e400
  400f64:	20400a54 	.word	0x20400a54
  400f68:	20400a50 	.word	0x20400a50
  400f6c:	e000ed20 	.word	0xe000ed20
  400f70:	00400eb5 	.word	0x00400eb5
  400f74:	20400008 	.word	0x20400008
  400f78:	00400d39 	.word	0x00400d39
  400f7c:	e000ef34 	.word	0xe000ef34
  400f80:	00400d19 	.word	0x00400d19
  400f84:	00400ce1 	.word	0x00400ce1

00400f88 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  400f88:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  400f8c:	2b0f      	cmp	r3, #15
  400f8e:	d910      	bls.n	400fb2 <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  400f90:	4912      	ldr	r1, [pc, #72]	; (400fdc <vPortValidateInterruptPriority+0x54>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  400f92:	4a13      	ldr	r2, [pc, #76]	; (400fe0 <vPortValidateInterruptPriority+0x58>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  400f94:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  400f96:	7812      	ldrb	r2, [r2, #0]
  400f98:	429a      	cmp	r2, r3
  400f9a:	d90a      	bls.n	400fb2 <vPortValidateInterruptPriority+0x2a>
	__asm volatile
  400f9c:	f04f 0380 	mov.w	r3, #128	; 0x80
  400fa0:	b672      	cpsid	i
  400fa2:	f383 8811 	msr	BASEPRI, r3
  400fa6:	f3bf 8f6f 	isb	sy
  400faa:	f3bf 8f4f 	dsb	sy
  400fae:	b662      	cpsie	i
  400fb0:	e7fe      	b.n	400fb0 <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  400fb2:	4b0c      	ldr	r3, [pc, #48]	; (400fe4 <vPortValidateInterruptPriority+0x5c>)
  400fb4:	4a0c      	ldr	r2, [pc, #48]	; (400fe8 <vPortValidateInterruptPriority+0x60>)
  400fb6:	681b      	ldr	r3, [r3, #0]
  400fb8:	6812      	ldr	r2, [r2, #0]
  400fba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  400fbe:	4293      	cmp	r3, r2
  400fc0:	d90a      	bls.n	400fd8 <vPortValidateInterruptPriority+0x50>
  400fc2:	f04f 0380 	mov.w	r3, #128	; 0x80
  400fc6:	b672      	cpsid	i
  400fc8:	f383 8811 	msr	BASEPRI, r3
  400fcc:	f3bf 8f6f 	isb	sy
  400fd0:	f3bf 8f4f 	dsb	sy
  400fd4:	b662      	cpsie	i
  400fd6:	e7fe      	b.n	400fd6 <vPortValidateInterruptPriority+0x4e>
  400fd8:	4770      	bx	lr
  400fda:	bf00      	nop
  400fdc:	e000e3f0 	.word	0xe000e3f0
  400fe0:	20400a50 	.word	0x20400a50
  400fe4:	e000ed0c 	.word	0xe000ed0c
  400fe8:	20400a54 	.word	0x20400a54

00400fec <pvPortMalloc>:
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  400fec:	b510      	push	{r4, lr}
  400fee:	4604      	mov	r4, r0
void *pvReturn;

	vTaskSuspendAll();
  400ff0:	4b07      	ldr	r3, [pc, #28]	; (401010 <pvPortMalloc+0x24>)
  400ff2:	4798      	blx	r3
	{
		pvReturn = malloc( xWantedSize );
  400ff4:	4b07      	ldr	r3, [pc, #28]	; (401014 <pvPortMalloc+0x28>)
  400ff6:	4620      	mov	r0, r4
  400ff8:	4798      	blx	r3
  400ffa:	4604      	mov	r4, r0
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  400ffc:	4b06      	ldr	r3, [pc, #24]	; (401018 <pvPortMalloc+0x2c>)
  400ffe:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  401000:	b10c      	cbz	r4, 401006 <pvPortMalloc+0x1a>
		}
	}
	#endif

	return pvReturn;
}
  401002:	4620      	mov	r0, r4
  401004:	bd10      	pop	{r4, pc}
			vApplicationMallocFailedHook();
  401006:	4b05      	ldr	r3, [pc, #20]	; (40101c <pvPortMalloc+0x30>)
  401008:	4798      	blx	r3
}
  40100a:	4620      	mov	r0, r4
  40100c:	bd10      	pop	{r4, pc}
  40100e:	bf00      	nop
  401010:	00401ca5 	.word	0x00401ca5
  401014:	00403045 	.word	0x00403045
  401018:	00401e35 	.word	0x00401e35
  40101c:	00402d39 	.word	0x00402d39

00401020 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
	if( pv )
  401020:	b150      	cbz	r0, 401038 <vPortFree+0x18>
	{
		vTaskSuspendAll();
  401022:	4b06      	ldr	r3, [pc, #24]	; (40103c <vPortFree+0x1c>)
{
  401024:	b510      	push	{r4, lr}
  401026:	4604      	mov	r4, r0
		vTaskSuspendAll();
  401028:	4798      	blx	r3
		{
			free( pv );
  40102a:	4b05      	ldr	r3, [pc, #20]	; (401040 <vPortFree+0x20>)
  40102c:	4620      	mov	r0, r4
  40102e:	4798      	blx	r3
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
  401030:	4b04      	ldr	r3, [pc, #16]	; (401044 <vPortFree+0x24>)
	}
}
  401032:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		( void ) xTaskResumeAll();
  401036:	4718      	bx	r3
  401038:	4770      	bx	lr
  40103a:	bf00      	nop
  40103c:	00401ca5 	.word	0x00401ca5
  401040:	00403055 	.word	0x00403055
  401044:	00401e35 	.word	0x00401e35

00401048 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  401048:	b538      	push	{r3, r4, r5, lr}
  40104a:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  40104c:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
  40104e:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  401050:	b942      	cbnz	r2, 401064 <prvCopyDataToQueue+0x1c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401052:	6805      	ldr	r5, [r0, #0]
  401054:	b10d      	cbz	r5, 40105a <prvCopyDataToQueue+0x12>
BaseType_t xReturn = pdFALSE;
  401056:	2000      	movs	r0, #0
  401058:	e029      	b.n	4010ae <prvCopyDataToQueue+0x66>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  40105a:	6840      	ldr	r0, [r0, #4]
  40105c:	4b16      	ldr	r3, [pc, #88]	; (4010b8 <prvCopyDataToQueue+0x70>)
  40105e:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  401060:	6065      	str	r5, [r4, #4]
  401062:	e024      	b.n	4010ae <prvCopyDataToQueue+0x66>
  401064:	4b15      	ldr	r3, [pc, #84]	; (4010bc <prvCopyDataToQueue+0x74>)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
  401066:	b965      	cbnz	r5, 401082 <prvCopyDataToQueue+0x3a>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  401068:	6880      	ldr	r0, [r0, #8]
  40106a:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  40106c:	68a3      	ldr	r3, [r4, #8]
  40106e:	6c21      	ldr	r1, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  401070:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  401072:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  401074:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  401076:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  401078:	d3ed      	bcc.n	401056 <prvCopyDataToQueue+0xe>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
  40107a:	6823      	ldr	r3, [r4, #0]
BaseType_t xReturn = pdFALSE;
  40107c:	4628      	mov	r0, r5
			pxQueue->pcWriteTo = pxQueue->pcHead;
  40107e:	60a3      	str	r3, [r4, #8]
  401080:	e015      	b.n	4010ae <prvCopyDataToQueue+0x66>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401082:	68c0      	ldr	r0, [r0, #12]
  401084:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  401086:	6c23      	ldr	r3, [r4, #64]	; 0x40
  401088:	68e2      	ldr	r2, [r4, #12]
  40108a:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  40108c:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  40108e:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  401090:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  401092:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  401094:	d202      	bcs.n	40109c <prvCopyDataToQueue+0x54>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  401096:	6862      	ldr	r2, [r4, #4]
  401098:	4413      	add	r3, r2
  40109a:	60e3      	str	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
  40109c:	2d02      	cmp	r5, #2
  40109e:	d1da      	bne.n	401056 <prvCopyDataToQueue+0xe>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  4010a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4010a2:	2b00      	cmp	r3, #0
  4010a4:	d0d7      	beq.n	401056 <prvCopyDataToQueue+0xe>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
  4010a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
  4010a8:	2000      	movs	r0, #0
				--( pxQueue->uxMessagesWaiting );
  4010aa:	3b01      	subs	r3, #1
  4010ac:	63a3      	str	r3, [r4, #56]	; 0x38
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  4010ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4010b0:	3301      	adds	r3, #1
  4010b2:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  4010b4:	bd38      	pop	{r3, r4, r5, pc}
  4010b6:	bf00      	nop
  4010b8:	0040246d 	.word	0x0040246d
  4010bc:	004035c5 	.word	0x004035c5

004010c0 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  4010c0:	b530      	push	{r4, r5, lr}
  4010c2:	b083      	sub	sp, #12
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  4010c4:	6d44      	ldr	r4, [r0, #84]	; 0x54
	{
  4010c6:	9001      	str	r0, [sp, #4]
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  4010c8:	b1ac      	cbz	r4, 4010f6 <prvNotifyQueueSetContainer+0x36>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  4010ca:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4010cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4010ce:	429a      	cmp	r2, r3
  4010d0:	d30a      	bcc.n	4010e8 <prvNotifyQueueSetContainer+0x28>
  4010d2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4010d6:	b672      	cpsid	i
  4010d8:	f383 8811 	msr	BASEPRI, r3
  4010dc:	f3bf 8f6f 	isb	sy
  4010e0:	f3bf 8f4f 	dsb	sy
  4010e4:	b662      	cpsie	i
  4010e6:	e7fe      	b.n	4010e6 <prvNotifyQueueSetContainer+0x26>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  4010e8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4010ea:	4293      	cmp	r3, r2
  4010ec:	d80e      	bhi.n	40110c <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  4010ee:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  4010f0:	4628      	mov	r0, r5
  4010f2:	b003      	add	sp, #12
  4010f4:	bd30      	pop	{r4, r5, pc}
  4010f6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4010fa:	b672      	cpsid	i
  4010fc:	f383 8811 	msr	BASEPRI, r3
  401100:	f3bf 8f6f 	isb	sy
  401104:	f3bf 8f4f 	dsb	sy
  401108:	b662      	cpsie	i
  40110a:	e7fe      	b.n	40110a <prvNotifyQueueSetContainer+0x4a>
  40110c:	460a      	mov	r2, r1
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  40110e:	4b0d      	ldr	r3, [pc, #52]	; (401144 <prvNotifyQueueSetContainer+0x84>)
  401110:	a901      	add	r1, sp, #4
  401112:	4620      	mov	r0, r4
  401114:	4798      	blx	r3
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  401116:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  401118:	4605      	mov	r5, r0
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  40111a:	3301      	adds	r3, #1
  40111c:	d005      	beq.n	40112a <prvNotifyQueueSetContainer+0x6a>
				( pxQueueSetContainer->xTxLock )++;
  40111e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
	}
  401120:	4628      	mov	r0, r5
				( pxQueueSetContainer->xTxLock )++;
  401122:	3301      	adds	r3, #1
  401124:	64a3      	str	r3, [r4, #72]	; 0x48
	}
  401126:	b003      	add	sp, #12
  401128:	bd30      	pop	{r4, r5, pc}
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  40112a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40112c:	2b00      	cmp	r3, #0
  40112e:	d0df      	beq.n	4010f0 <prvNotifyQueueSetContainer+0x30>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  401130:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401134:	4b04      	ldr	r3, [pc, #16]	; (401148 <prvNotifyQueueSetContainer+0x88>)
  401136:	4798      	blx	r3
						xReturn = pdTRUE;
  401138:	2800      	cmp	r0, #0
  40113a:	bf18      	it	ne
  40113c:	2501      	movne	r5, #1
	}
  40113e:	4628      	mov	r0, r5
  401140:	b003      	add	sp, #12
  401142:	bd30      	pop	{r4, r5, pc}
  401144:	00401049 	.word	0x00401049
  401148:	00402249 	.word	0x00402249

0040114c <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  40114c:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
  40114e:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  401150:	b172      	cbz	r2, 401170 <prvCopyDataFromQueue+0x24>
  401152:	4608      	mov	r0, r1
{
  401154:	b410      	push	{r4}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  401156:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  401158:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  40115a:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  40115c:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  40115e:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  401160:	d301      	bcc.n	401166 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  401162:	6819      	ldr	r1, [r3, #0]
  401164:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  401166:	68d9      	ldr	r1, [r3, #12]
}
  401168:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  40116c:	4b01      	ldr	r3, [pc, #4]	; (401174 <prvCopyDataFromQueue+0x28>)
  40116e:	4718      	bx	r3
  401170:	4770      	bx	lr
  401172:	bf00      	nop
  401174:	004035c5 	.word	0x004035c5

00401178 <prvUnlockQueue>:
{
  401178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40117c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  40117e:	f8df 809c 	ldr.w	r8, [pc, #156]	; 40121c <prvUnlockQueue+0xa4>
  401182:	47c0      	blx	r8
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  401184:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401186:	2b00      	cmp	r3, #0
  401188:	dd1a      	ble.n	4011c0 <prvUnlockQueue+0x48>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  40118a:	4d20      	ldr	r5, [pc, #128]	; (40120c <prvUnlockQueue+0x94>)
						vTaskMissedYield();
  40118c:	4f20      	ldr	r7, [pc, #128]	; (401210 <prvUnlockQueue+0x98>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40118e:	4e21      	ldr	r6, [pc, #132]	; (401214 <prvUnlockQueue+0x9c>)
  401190:	e008      	b.n	4011a4 <prvUnlockQueue+0x2c>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  401192:	47a8      	blx	r5
  401194:	2801      	cmp	r0, #1
  401196:	d011      	beq.n	4011bc <prvUnlockQueue+0x44>
			--( pxQueue->xTxLock );
  401198:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40119a:	3b01      	subs	r3, #1
  40119c:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  40119e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4011a0:	2b00      	cmp	r3, #0
  4011a2:	dd0d      	ble.n	4011c0 <prvUnlockQueue+0x48>
				if( pxQueue->pxQueueSetContainer != NULL )
  4011a4:	6d63      	ldr	r3, [r4, #84]	; 0x54
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  4011a6:	2100      	movs	r1, #0
  4011a8:	4620      	mov	r0, r4
				if( pxQueue->pxQueueSetContainer != NULL )
  4011aa:	2b00      	cmp	r3, #0
  4011ac:	d1f1      	bne.n	401192 <prvUnlockQueue+0x1a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4011ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4011b0:	f104 0024 	add.w	r0, r4, #36	; 0x24
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4011b4:	b123      	cbz	r3, 4011c0 <prvUnlockQueue+0x48>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4011b6:	47b0      	blx	r6
  4011b8:	2800      	cmp	r0, #0
  4011ba:	d0ed      	beq.n	401198 <prvUnlockQueue+0x20>
						vTaskMissedYield();
  4011bc:	47b8      	blx	r7
  4011be:	e7eb      	b.n	401198 <prvUnlockQueue+0x20>
		pxQueue->xTxLock = queueUNLOCKED;
  4011c0:	f04f 33ff 	mov.w	r3, #4294967295
	taskEXIT_CRITICAL();
  4011c4:	4f14      	ldr	r7, [pc, #80]	; (401218 <prvUnlockQueue+0xa0>)
		pxQueue->xTxLock = queueUNLOCKED;
  4011c6:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
  4011c8:	47b8      	blx	r7
	taskENTER_CRITICAL();
  4011ca:	47c0      	blx	r8
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  4011cc:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4011ce:	2b00      	cmp	r3, #0
  4011d0:	dd15      	ble.n	4011fe <prvUnlockQueue+0x86>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4011d2:	6923      	ldr	r3, [r4, #16]
  4011d4:	b19b      	cbz	r3, 4011fe <prvUnlockQueue+0x86>
  4011d6:	f104 0610 	add.w	r6, r4, #16
  4011da:	4d0e      	ldr	r5, [pc, #56]	; (401214 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  4011dc:	f8df 8030 	ldr.w	r8, [pc, #48]	; 401210 <prvUnlockQueue+0x98>
  4011e0:	e007      	b.n	4011f2 <prvUnlockQueue+0x7a>
				--( pxQueue->xRxLock );
  4011e2:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4011e4:	3b01      	subs	r3, #1
  4011e6:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  4011e8:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4011ea:	2b00      	cmp	r3, #0
  4011ec:	dd07      	ble.n	4011fe <prvUnlockQueue+0x86>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4011ee:	6923      	ldr	r3, [r4, #16]
  4011f0:	b12b      	cbz	r3, 4011fe <prvUnlockQueue+0x86>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  4011f2:	4630      	mov	r0, r6
  4011f4:	47a8      	blx	r5
  4011f6:	2800      	cmp	r0, #0
  4011f8:	d0f3      	beq.n	4011e2 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
  4011fa:	47c0      	blx	r8
  4011fc:	e7f1      	b.n	4011e2 <prvUnlockQueue+0x6a>
		pxQueue->xRxLock = queueUNLOCKED;
  4011fe:	f04f 33ff 	mov.w	r3, #4294967295
  401202:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
  401204:	463b      	mov	r3, r7
}
  401206:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	taskEXIT_CRITICAL();
  40120a:	4718      	bx	r3
  40120c:	004010c1 	.word	0x004010c1
  401210:	00402399 	.word	0x00402399
  401214:	00402249 	.word	0x00402249
  401218:	00400de9 	.word	0x00400de9
  40121c:	00400d9d 	.word	0x00400d9d

00401220 <xQueueGenericCreate.part.1>:
  401220:	f04f 0380 	mov.w	r3, #128	; 0x80
  401224:	b672      	cpsid	i
  401226:	f383 8811 	msr	BASEPRI, r3
  40122a:	f3bf 8f6f 	isb	sy
  40122e:	f3bf 8f4f 	dsb	sy
  401232:	b662      	cpsie	i
  401234:	e7fe      	b.n	401234 <xQueueGenericCreate.part.1+0x14>
	...

00401238 <xQueueGenericReset>:
{
  401238:	b570      	push	{r4, r5, r6, lr}
	configASSERT( pxQueue );
  40123a:	b1d8      	cbz	r0, 401274 <xQueueGenericReset+0x3c>
  40123c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  40123e:	4b1d      	ldr	r3, [pc, #116]	; (4012b4 <xQueueGenericReset+0x7c>)
  401240:	460e      	mov	r6, r1
  401242:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  401244:	6c20      	ldr	r0, [r4, #64]	; 0x40
		pxQueue->xRxLock = queueUNLOCKED;
  401246:	f04f 35ff 	mov.w	r5, #4294967295
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  40124a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  40124c:	2100      	movs	r1, #0
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  40124e:	6822      	ldr	r2, [r4, #0]
  401250:	fb03 f300 	mul.w	r3, r3, r0
		pxQueue->pcWriteTo = pxQueue->pcHead;
  401254:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  401256:	1a18      	subs	r0, r3, r0
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  401258:	4413      	add	r3, r2
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  40125a:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  40125c:	4402      	add	r2, r0
		pxQueue->xRxLock = queueUNLOCKED;
  40125e:	6465      	str	r5, [r4, #68]	; 0x44
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  401260:	6063      	str	r3, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  401262:	60e2      	str	r2, [r4, #12]
		pxQueue->xTxLock = queueUNLOCKED;
  401264:	64a5      	str	r5, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
  401266:	b9ce      	cbnz	r6, 40129c <xQueueGenericReset+0x64>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401268:	6923      	ldr	r3, [r4, #16]
  40126a:	b92b      	cbnz	r3, 401278 <xQueueGenericReset+0x40>
	taskEXIT_CRITICAL();
  40126c:	4b12      	ldr	r3, [pc, #72]	; (4012b8 <xQueueGenericReset+0x80>)
  40126e:	4798      	blx	r3
}
  401270:	2001      	movs	r0, #1
  401272:	bd70      	pop	{r4, r5, r6, pc}
  401274:	4b11      	ldr	r3, [pc, #68]	; (4012bc <xQueueGenericReset+0x84>)
  401276:	4798      	blx	r3
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  401278:	f104 0010 	add.w	r0, r4, #16
  40127c:	4b10      	ldr	r3, [pc, #64]	; (4012c0 <xQueueGenericReset+0x88>)
  40127e:	4798      	blx	r3
  401280:	2801      	cmp	r0, #1
  401282:	d1f3      	bne.n	40126c <xQueueGenericReset+0x34>
					queueYIELD_IF_USING_PREEMPTION();
  401284:	4b0f      	ldr	r3, [pc, #60]	; (4012c4 <xQueueGenericReset+0x8c>)
  401286:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40128a:	601a      	str	r2, [r3, #0]
  40128c:	f3bf 8f4f 	dsb	sy
  401290:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
  401294:	4b08      	ldr	r3, [pc, #32]	; (4012b8 <xQueueGenericReset+0x80>)
  401296:	4798      	blx	r3
}
  401298:	2001      	movs	r0, #1
  40129a:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  40129c:	f104 0010 	add.w	r0, r4, #16
  4012a0:	4d09      	ldr	r5, [pc, #36]	; (4012c8 <xQueueGenericReset+0x90>)
  4012a2:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  4012a4:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4012a8:	47a8      	blx	r5
	taskEXIT_CRITICAL();
  4012aa:	4b03      	ldr	r3, [pc, #12]	; (4012b8 <xQueueGenericReset+0x80>)
  4012ac:	4798      	blx	r3
}
  4012ae:	2001      	movs	r0, #1
  4012b0:	bd70      	pop	{r4, r5, r6, pc}
  4012b2:	bf00      	nop
  4012b4:	00400d9d 	.word	0x00400d9d
  4012b8:	00400de9 	.word	0x00400de9
  4012bc:	00401221 	.word	0x00401221
  4012c0:	00402249 	.word	0x00402249
  4012c4:	e000ed04 	.word	0xe000ed04
  4012c8:	00400c4d 	.word	0x00400c4d

004012cc <xQueueGenericCreate>:
{
  4012cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  4012ce:	b950      	cbnz	r0, 4012e6 <xQueueGenericCreate+0x1a>
  4012d0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4012d4:	b672      	cpsid	i
  4012d6:	f383 8811 	msr	BASEPRI, r3
  4012da:	f3bf 8f6f 	isb	sy
  4012de:	f3bf 8f4f 	dsb	sy
  4012e2:	b662      	cpsie	i
  4012e4:	e7fe      	b.n	4012e4 <xQueueGenericCreate+0x18>
  4012e6:	4606      	mov	r6, r0
  4012e8:	4617      	mov	r7, r2
  4012ea:	460d      	mov	r5, r1
	if( uxItemSize == ( UBaseType_t ) 0 )
  4012ec:	b1a9      	cbz	r1, 40131a <xQueueGenericCreate+0x4e>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4012ee:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  4012f2:	4b0e      	ldr	r3, [pc, #56]	; (40132c <xQueueGenericCreate+0x60>)
  4012f4:	3059      	adds	r0, #89	; 0x59
  4012f6:	4798      	blx	r3
	if( pxNewQueue != NULL )
  4012f8:	4604      	mov	r4, r0
  4012fa:	b1a8      	cbz	r0, 401328 <xQueueGenericCreate+0x5c>
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  4012fc:	f100 0358 	add.w	r3, r0, #88	; 0x58
  401300:	6003      	str	r3, [r0, #0]
		pxNewQueue->uxLength = uxQueueLength;
  401302:	63e6      	str	r6, [r4, #60]	; 0x3c
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  401304:	2101      	movs	r1, #1
		pxNewQueue->uxItemSize = uxItemSize;
  401306:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  401308:	4620      	mov	r0, r4
  40130a:	4b09      	ldr	r3, [pc, #36]	; (401330 <xQueueGenericCreate+0x64>)
  40130c:	4798      	blx	r3
			pxNewQueue->pxQueueSetContainer = NULL;
  40130e:	2300      	movs	r3, #0
			pxNewQueue->ucQueueType = ucQueueType;
  401310:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
}
  401314:	4620      	mov	r0, r4
			pxNewQueue->pxQueueSetContainer = NULL;
  401316:	6563      	str	r3, [r4, #84]	; 0x54
}
  401318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  40131a:	2058      	movs	r0, #88	; 0x58
  40131c:	4b03      	ldr	r3, [pc, #12]	; (40132c <xQueueGenericCreate+0x60>)
  40131e:	4798      	blx	r3
	if( pxNewQueue != NULL )
  401320:	4604      	mov	r4, r0
  401322:	b108      	cbz	r0, 401328 <xQueueGenericCreate+0x5c>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  401324:	6024      	str	r4, [r4, #0]
  401326:	e7ec      	b.n	401302 <xQueueGenericCreate+0x36>
  401328:	4b02      	ldr	r3, [pc, #8]	; (401334 <xQueueGenericCreate+0x68>)
  40132a:	4798      	blx	r3
  40132c:	00400fed 	.word	0x00400fed
  401330:	00401239 	.word	0x00401239
  401334:	00401221 	.word	0x00401221

00401338 <xQueueGenericSend>:
{
  401338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40133c:	b085      	sub	sp, #20
  40133e:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  401340:	2800      	cmp	r0, #0
  401342:	f000 80b7 	beq.w	4014b4 <xQueueGenericSend+0x17c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401346:	2900      	cmp	r1, #0
  401348:	f000 809e 	beq.w	401488 <xQueueGenericSend+0x150>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  40134c:	2b02      	cmp	r3, #2
  40134e:	f000 808c 	beq.w	40146a <xQueueGenericSend+0x132>
  401352:	461e      	mov	r6, r3
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  401354:	4b63      	ldr	r3, [pc, #396]	; (4014e4 <xQueueGenericSend+0x1ac>)
  401356:	4604      	mov	r4, r0
  401358:	4688      	mov	r8, r1
  40135a:	4798      	blx	r3
  40135c:	b910      	cbnz	r0, 401364 <xQueueGenericSend+0x2c>
  40135e:	9b01      	ldr	r3, [sp, #4]
  401360:	2b00      	cmp	r3, #0
  401362:	d16a      	bne.n	40143a <xQueueGenericSend+0x102>
  401364:	f1a6 0502 	sub.w	r5, r6, #2
{
  401368:	f04f 0a00 	mov.w	sl, #0
  40136c:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 401510 <xQueueGenericSend+0x1d8>
  401370:	fab5 f585 	clz	r5, r5
  401374:	4f5c      	ldr	r7, [pc, #368]	; (4014e8 <xQueueGenericSend+0x1b0>)
					vTaskSetTimeOutState( &xTimeOut );
  401376:	f8df b19c 	ldr.w	fp, [pc, #412]	; 401514 <xQueueGenericSend+0x1dc>
  40137a:	096d      	lsrs	r5, r5, #5
  40137c:	e022      	b.n	4013c4 <xQueueGenericSend+0x8c>
  40137e:	f10d 0a08 	add.w	sl, sp, #8
		taskEXIT_CRITICAL();
  401382:	47b8      	blx	r7
		vTaskSuspendAll();
  401384:	4b59      	ldr	r3, [pc, #356]	; (4014ec <xQueueGenericSend+0x1b4>)
  401386:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401388:	47c8      	blx	r9
  40138a:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40138c:	3301      	adds	r3, #1
  40138e:	f000 80a6 	beq.w	4014de <xQueueGenericSend+0x1a6>
  401392:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401394:	3301      	adds	r3, #1
  401396:	f000 809f 	beq.w	4014d8 <xQueueGenericSend+0x1a0>
  40139a:	47b8      	blx	r7
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  40139c:	4650      	mov	r0, sl
  40139e:	a901      	add	r1, sp, #4
  4013a0:	4b53      	ldr	r3, [pc, #332]	; (4014f0 <xQueueGenericSend+0x1b8>)
  4013a2:	4798      	blx	r3
  4013a4:	2800      	cmp	r0, #0
  4013a6:	f040 8090 	bne.w	4014ca <xQueueGenericSend+0x192>
	taskENTER_CRITICAL();
  4013aa:	47c8      	blx	r9
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  4013ac:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4013ae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4013b0:	429a      	cmp	r2, r3
  4013b2:	d017      	beq.n	4013e4 <xQueueGenericSend+0xac>
	taskEXIT_CRITICAL();
  4013b4:	47b8      	blx	r7
				prvUnlockQueue( pxQueue );
  4013b6:	4b4f      	ldr	r3, [pc, #316]	; (4014f4 <xQueueGenericSend+0x1bc>)
  4013b8:	4620      	mov	r0, r4
  4013ba:	4798      	blx	r3
				( void ) xTaskResumeAll();
  4013bc:	4b4e      	ldr	r3, [pc, #312]	; (4014f8 <xQueueGenericSend+0x1c0>)
  4013be:	4798      	blx	r3
  4013c0:	f04f 0a01 	mov.w	sl, #1
		taskENTER_CRITICAL();
  4013c4:	47c8      	blx	r9
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  4013c6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4013c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4013ca:	429a      	cmp	r2, r3
  4013cc:	d325      	bcc.n	40141a <xQueueGenericSend+0xe2>
  4013ce:	bb25      	cbnz	r5, 40141a <xQueueGenericSend+0xe2>
				if( xTicksToWait == ( TickType_t ) 0 )
  4013d0:	9b01      	ldr	r3, [sp, #4]
  4013d2:	b1eb      	cbz	r3, 401410 <xQueueGenericSend+0xd8>
				else if( xEntryTimeSet == pdFALSE )
  4013d4:	f1ba 0f00 	cmp.w	sl, #0
  4013d8:	d1d1      	bne.n	40137e <xQueueGenericSend+0x46>
					vTaskSetTimeOutState( &xTimeOut );
  4013da:	f10d 0a08 	add.w	sl, sp, #8
  4013de:	4650      	mov	r0, sl
  4013e0:	47d8      	blx	fp
  4013e2:	e7ce      	b.n	401382 <xQueueGenericSend+0x4a>
	taskEXIT_CRITICAL();
  4013e4:	47b8      	blx	r7
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  4013e6:	9901      	ldr	r1, [sp, #4]
  4013e8:	f104 0010 	add.w	r0, r4, #16
  4013ec:	4b43      	ldr	r3, [pc, #268]	; (4014fc <xQueueGenericSend+0x1c4>)
  4013ee:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  4013f0:	4b40      	ldr	r3, [pc, #256]	; (4014f4 <xQueueGenericSend+0x1bc>)
  4013f2:	4620      	mov	r0, r4
  4013f4:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  4013f6:	4b40      	ldr	r3, [pc, #256]	; (4014f8 <xQueueGenericSend+0x1c0>)
  4013f8:	4798      	blx	r3
  4013fa:	2800      	cmp	r0, #0
  4013fc:	d1e0      	bne.n	4013c0 <xQueueGenericSend+0x88>
					portYIELD_WITHIN_API();
  4013fe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401402:	4a3f      	ldr	r2, [pc, #252]	; (401500 <xQueueGenericSend+0x1c8>)
  401404:	6013      	str	r3, [r2, #0]
  401406:	f3bf 8f4f 	dsb	sy
  40140a:	f3bf 8f6f 	isb	sy
  40140e:	e7d7      	b.n	4013c0 <xQueueGenericSend+0x88>
					taskEXIT_CRITICAL();
  401410:	47b8      	blx	r7
					return errQUEUE_FULL;
  401412:	4628      	mov	r0, r5
}
  401414:	b005      	add	sp, #20
  401416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  40141a:	4b3a      	ldr	r3, [pc, #232]	; (401504 <xQueueGenericSend+0x1cc>)
  40141c:	4641      	mov	r1, r8
  40141e:	4632      	mov	r2, r6
  401420:	4620      	mov	r0, r4
  401422:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  401424:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401426:	b19b      	cbz	r3, 401450 <xQueueGenericSend+0x118>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  401428:	4631      	mov	r1, r6
  40142a:	4620      	mov	r0, r4
  40142c:	4b36      	ldr	r3, [pc, #216]	; (401508 <xQueueGenericSend+0x1d0>)
  40142e:	4798      	blx	r3
  401430:	2801      	cmp	r0, #1
  401432:	d011      	beq.n	401458 <xQueueGenericSend+0x120>
				taskEXIT_CRITICAL();
  401434:	47b8      	blx	r7
				return pdPASS;
  401436:	2001      	movs	r0, #1
  401438:	e7ec      	b.n	401414 <xQueueGenericSend+0xdc>
  40143a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40143e:	b672      	cpsid	i
  401440:	f383 8811 	msr	BASEPRI, r3
  401444:	f3bf 8f6f 	isb	sy
  401448:	f3bf 8f4f 	dsb	sy
  40144c:	b662      	cpsie	i
  40144e:	e7fe      	b.n	40144e <xQueueGenericSend+0x116>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401450:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401452:	bb43      	cbnz	r3, 4014a6 <xQueueGenericSend+0x16e>
						else if( xYieldRequired != pdFALSE )
  401454:	2800      	cmp	r0, #0
  401456:	d0ed      	beq.n	401434 <xQueueGenericSend+0xfc>
							queueYIELD_IF_USING_PREEMPTION();
  401458:	4b29      	ldr	r3, [pc, #164]	; (401500 <xQueueGenericSend+0x1c8>)
  40145a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40145e:	601a      	str	r2, [r3, #0]
  401460:	f3bf 8f4f 	dsb	sy
  401464:	f3bf 8f6f 	isb	sy
  401468:	e7e4      	b.n	401434 <xQueueGenericSend+0xfc>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  40146a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  40146c:	2a01      	cmp	r2, #1
  40146e:	f43f af70 	beq.w	401352 <xQueueGenericSend+0x1a>
  401472:	f04f 0380 	mov.w	r3, #128	; 0x80
  401476:	b672      	cpsid	i
  401478:	f383 8811 	msr	BASEPRI, r3
  40147c:	f3bf 8f6f 	isb	sy
  401480:	f3bf 8f4f 	dsb	sy
  401484:	b662      	cpsie	i
  401486:	e7fe      	b.n	401486 <xQueueGenericSend+0x14e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401488:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40148a:	2a00      	cmp	r2, #0
  40148c:	f43f af5e 	beq.w	40134c <xQueueGenericSend+0x14>
  401490:	f04f 0380 	mov.w	r3, #128	; 0x80
  401494:	b672      	cpsid	i
  401496:	f383 8811 	msr	BASEPRI, r3
  40149a:	f3bf 8f6f 	isb	sy
  40149e:	f3bf 8f4f 	dsb	sy
  4014a2:	b662      	cpsie	i
  4014a4:	e7fe      	b.n	4014a4 <xQueueGenericSend+0x16c>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  4014a6:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4014aa:	4b18      	ldr	r3, [pc, #96]	; (40150c <xQueueGenericSend+0x1d4>)
  4014ac:	4798      	blx	r3
  4014ae:	2801      	cmp	r0, #1
  4014b0:	d1c0      	bne.n	401434 <xQueueGenericSend+0xfc>
  4014b2:	e7d1      	b.n	401458 <xQueueGenericSend+0x120>
  4014b4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4014b8:	b672      	cpsid	i
  4014ba:	f383 8811 	msr	BASEPRI, r3
  4014be:	f3bf 8f6f 	isb	sy
  4014c2:	f3bf 8f4f 	dsb	sy
  4014c6:	b662      	cpsie	i
  4014c8:	e7fe      	b.n	4014c8 <xQueueGenericSend+0x190>
			prvUnlockQueue( pxQueue );
  4014ca:	4620      	mov	r0, r4
  4014cc:	4b09      	ldr	r3, [pc, #36]	; (4014f4 <xQueueGenericSend+0x1bc>)
  4014ce:	4798      	blx	r3
			( void ) xTaskResumeAll();
  4014d0:	4b09      	ldr	r3, [pc, #36]	; (4014f8 <xQueueGenericSend+0x1c0>)
  4014d2:	4798      	blx	r3
			return errQUEUE_FULL;
  4014d4:	2000      	movs	r0, #0
  4014d6:	e79d      	b.n	401414 <xQueueGenericSend+0xdc>
		prvLockQueue( pxQueue );
  4014d8:	2300      	movs	r3, #0
  4014da:	64a3      	str	r3, [r4, #72]	; 0x48
  4014dc:	e75d      	b.n	40139a <xQueueGenericSend+0x62>
  4014de:	2300      	movs	r3, #0
  4014e0:	6463      	str	r3, [r4, #68]	; 0x44
  4014e2:	e756      	b.n	401392 <xQueueGenericSend+0x5a>
  4014e4:	004023a5 	.word	0x004023a5
  4014e8:	00400de9 	.word	0x00400de9
  4014ec:	00401ca5 	.word	0x00401ca5
  4014f0:	00402301 	.word	0x00402301
  4014f4:	00401179 	.word	0x00401179
  4014f8:	00401e35 	.word	0x00401e35
  4014fc:	00402141 	.word	0x00402141
  401500:	e000ed04 	.word	0xe000ed04
  401504:	00401049 	.word	0x00401049
  401508:	004010c1 	.word	0x004010c1
  40150c:	00402249 	.word	0x00402249
  401510:	00400d9d 	.word	0x00400d9d
  401514:	004022dd 	.word	0x004022dd

00401518 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
  401518:	b328      	cbz	r0, 401566 <xQueueGenericSendFromISR+0x4e>
{
  40151a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  40151e:	2900      	cmp	r1, #0
  401520:	d047      	beq.n	4015b2 <xQueueGenericSendFromISR+0x9a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401522:	2b02      	cmp	r3, #2
  401524:	d037      	beq.n	401596 <xQueueGenericSendFromISR+0x7e>
  401526:	461d      	mov	r5, r3
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  401528:	4b37      	ldr	r3, [pc, #220]	; (401608 <xQueueGenericSendFromISR+0xf0>)
  40152a:	4604      	mov	r4, r0
  40152c:	4690      	mov	r8, r2
  40152e:	460e      	mov	r6, r1
  401530:	4798      	blx	r3
	__asm volatile
  401532:	f3ef 8711 	mrs	r7, BASEPRI
  401536:	f04f 0380 	mov.w	r3, #128	; 0x80
  40153a:	b672      	cpsid	i
  40153c:	f383 8811 	msr	BASEPRI, r3
  401540:	f3bf 8f6f 	isb	sy
  401544:	f3bf 8f4f 	dsb	sy
  401548:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  40154a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40154c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40154e:	429a      	cmp	r2, r3
  401550:	d314      	bcc.n	40157c <xQueueGenericSendFromISR+0x64>
  401552:	f1a5 0002 	sub.w	r0, r5, #2
  401556:	fab0 f080 	clz	r0, r0
  40155a:	0940      	lsrs	r0, r0, #5
  40155c:	b970      	cbnz	r0, 40157c <xQueueGenericSendFromISR+0x64>
	__asm volatile
  40155e:	f387 8811 	msr	BASEPRI, r7
}
  401562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
  401566:	f04f 0380 	mov.w	r3, #128	; 0x80
  40156a:	b672      	cpsid	i
  40156c:	f383 8811 	msr	BASEPRI, r3
  401570:	f3bf 8f6f 	isb	sy
  401574:	f3bf 8f4f 	dsb	sy
  401578:	b662      	cpsie	i
  40157a:	e7fe      	b.n	40157a <xQueueGenericSendFromISR+0x62>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  40157c:	4b23      	ldr	r3, [pc, #140]	; (40160c <xQueueGenericSendFromISR+0xf4>)
  40157e:	4631      	mov	r1, r6
  401580:	462a      	mov	r2, r5
  401582:	4620      	mov	r0, r4
  401584:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
  401586:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401588:	3301      	adds	r3, #1
  40158a:	d020      	beq.n	4015ce <xQueueGenericSendFromISR+0xb6>
				++( pxQueue->xTxLock );
  40158c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  40158e:	2001      	movs	r0, #1
				++( pxQueue->xTxLock );
  401590:	4403      	add	r3, r0
  401592:	64a3      	str	r3, [r4, #72]	; 0x48
  401594:	e7e3      	b.n	40155e <xQueueGenericSendFromISR+0x46>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401596:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
  401598:	2c01      	cmp	r4, #1
  40159a:	d0c4      	beq.n	401526 <xQueueGenericSendFromISR+0xe>
  40159c:	f04f 0380 	mov.w	r3, #128	; 0x80
  4015a0:	b672      	cpsid	i
  4015a2:	f383 8811 	msr	BASEPRI, r3
  4015a6:	f3bf 8f6f 	isb	sy
  4015aa:	f3bf 8f4f 	dsb	sy
  4015ae:	b662      	cpsie	i
  4015b0:	e7fe      	b.n	4015b0 <xQueueGenericSendFromISR+0x98>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4015b2:	6c04      	ldr	r4, [r0, #64]	; 0x40
  4015b4:	2c00      	cmp	r4, #0
  4015b6:	d0b4      	beq.n	401522 <xQueueGenericSendFromISR+0xa>
  4015b8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4015bc:	b672      	cpsid	i
  4015be:	f383 8811 	msr	BASEPRI, r3
  4015c2:	f3bf 8f6f 	isb	sy
  4015c6:	f3bf 8f4f 	dsb	sy
  4015ca:	b662      	cpsie	i
  4015cc:	e7fe      	b.n	4015cc <xQueueGenericSendFromISR+0xb4>
					if( pxQueue->pxQueueSetContainer != NULL )
  4015ce:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4015d0:	b163      	cbz	r3, 4015ec <xQueueGenericSendFromISR+0xd4>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  4015d2:	4629      	mov	r1, r5
  4015d4:	4620      	mov	r0, r4
  4015d6:	4b0e      	ldr	r3, [pc, #56]	; (401610 <xQueueGenericSendFromISR+0xf8>)
  4015d8:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  4015da:	2801      	cmp	r0, #1
  4015dc:	d108      	bne.n	4015f0 <xQueueGenericSendFromISR+0xd8>
  4015de:	f1b8 0f00 	cmp.w	r8, #0
  4015e2:	d005      	beq.n	4015f0 <xQueueGenericSendFromISR+0xd8>
								*pxHigherPriorityTaskWoken = pdTRUE;
  4015e4:	2001      	movs	r0, #1
  4015e6:	f8c8 0000 	str.w	r0, [r8]
  4015ea:	e7b8      	b.n	40155e <xQueueGenericSendFromISR+0x46>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4015ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4015ee:	b90b      	cbnz	r3, 4015f4 <xQueueGenericSendFromISR+0xdc>
			xReturn = pdPASS;
  4015f0:	2001      	movs	r0, #1
  4015f2:	e7b4      	b.n	40155e <xQueueGenericSendFromISR+0x46>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4015f4:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4015f8:	4b06      	ldr	r3, [pc, #24]	; (401614 <xQueueGenericSendFromISR+0xfc>)
  4015fa:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  4015fc:	f1b8 0f00 	cmp.w	r8, #0
  401600:	d0f6      	beq.n	4015f0 <xQueueGenericSendFromISR+0xd8>
  401602:	2800      	cmp	r0, #0
  401604:	d1ee      	bne.n	4015e4 <xQueueGenericSendFromISR+0xcc>
  401606:	e7f3      	b.n	4015f0 <xQueueGenericSendFromISR+0xd8>
  401608:	00400f89 	.word	0x00400f89
  40160c:	00401049 	.word	0x00401049
  401610:	004010c1 	.word	0x004010c1
  401614:	00402249 	.word	0x00402249

00401618 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
  401618:	2800      	cmp	r0, #0
  40161a:	d031      	beq.n	401680 <xQueueGiveFromISR+0x68>
	configASSERT( pxQueue->uxItemSize == 0 );
  40161c:	6c03      	ldr	r3, [r0, #64]	; 0x40
  40161e:	b153      	cbz	r3, 401636 <xQueueGiveFromISR+0x1e>
  401620:	f04f 0380 	mov.w	r3, #128	; 0x80
  401624:	b672      	cpsid	i
  401626:	f383 8811 	msr	BASEPRI, r3
  40162a:	f3bf 8f6f 	isb	sy
  40162e:	f3bf 8f4f 	dsb	sy
  401632:	b662      	cpsie	i
  401634:	e7fe      	b.n	401634 <xQueueGiveFromISR+0x1c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  401636:	6803      	ldr	r3, [r0, #0]
  401638:	2b00      	cmp	r3, #0
  40163a:	d03a      	beq.n	4016b2 <xQueueGiveFromISR+0x9a>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  40163c:	4b29      	ldr	r3, [pc, #164]	; (4016e4 <xQueueGiveFromISR+0xcc>)
{
  40163e:	b570      	push	{r4, r5, r6, lr}
  401640:	4604      	mov	r4, r0
  401642:	460d      	mov	r5, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  401644:	4798      	blx	r3
	__asm volatile
  401646:	f3ef 8611 	mrs	r6, BASEPRI
  40164a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40164e:	b672      	cpsid	i
  401650:	f383 8811 	msr	BASEPRI, r3
  401654:	f3bf 8f6f 	isb	sy
  401658:	f3bf 8f4f 	dsb	sy
  40165c:	b662      	cpsie	i
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  40165e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401660:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401662:	429a      	cmp	r2, r3
  401664:	d223      	bcs.n	4016ae <xQueueGiveFromISR+0x96>
			++( pxQueue->uxMessagesWaiting );
  401666:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401668:	3301      	adds	r3, #1
  40166a:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
  40166c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40166e:	3301      	adds	r3, #1
  401670:	d011      	beq.n	401696 <xQueueGiveFromISR+0x7e>
				++( pxQueue->xTxLock );
  401672:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  401674:	2001      	movs	r0, #1
				++( pxQueue->xTxLock );
  401676:	4403      	add	r3, r0
  401678:	64a3      	str	r3, [r4, #72]	; 0x48
	__asm volatile
  40167a:	f386 8811 	msr	BASEPRI, r6
}
  40167e:	bd70      	pop	{r4, r5, r6, pc}
	__asm volatile
  401680:	f04f 0380 	mov.w	r3, #128	; 0x80
  401684:	b672      	cpsid	i
  401686:	f383 8811 	msr	BASEPRI, r3
  40168a:	f3bf 8f6f 	isb	sy
  40168e:	f3bf 8f4f 	dsb	sy
  401692:	b662      	cpsie	i
  401694:	e7fe      	b.n	401694 <xQueueGiveFromISR+0x7c>
					if( pxQueue->pxQueueSetContainer != NULL )
  401696:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401698:	b1cb      	cbz	r3, 4016ce <xQueueGiveFromISR+0xb6>
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  40169a:	4620      	mov	r0, r4
  40169c:	2100      	movs	r1, #0
  40169e:	4b12      	ldr	r3, [pc, #72]	; (4016e8 <xQueueGiveFromISR+0xd0>)
  4016a0:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  4016a2:	2801      	cmp	r0, #1
  4016a4:	d11c      	bne.n	4016e0 <xQueueGiveFromISR+0xc8>
  4016a6:	b1dd      	cbz	r5, 4016e0 <xQueueGiveFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
  4016a8:	2001      	movs	r0, #1
  4016aa:	6028      	str	r0, [r5, #0]
  4016ac:	e7e5      	b.n	40167a <xQueueGiveFromISR+0x62>
			xReturn = errQUEUE_FULL;
  4016ae:	2000      	movs	r0, #0
  4016b0:	e7e3      	b.n	40167a <xQueueGiveFromISR+0x62>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  4016b2:	6843      	ldr	r3, [r0, #4]
  4016b4:	2b00      	cmp	r3, #0
  4016b6:	d0c1      	beq.n	40163c <xQueueGiveFromISR+0x24>
  4016b8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4016bc:	b672      	cpsid	i
  4016be:	f383 8811 	msr	BASEPRI, r3
  4016c2:	f3bf 8f6f 	isb	sy
  4016c6:	f3bf 8f4f 	dsb	sy
  4016ca:	b662      	cpsie	i
  4016cc:	e7fe      	b.n	4016cc <xQueueGiveFromISR+0xb4>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4016ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4016d0:	b133      	cbz	r3, 4016e0 <xQueueGiveFromISR+0xc8>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4016d2:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4016d6:	4b05      	ldr	r3, [pc, #20]	; (4016ec <xQueueGiveFromISR+0xd4>)
  4016d8:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  4016da:	b10d      	cbz	r5, 4016e0 <xQueueGiveFromISR+0xc8>
  4016dc:	2800      	cmp	r0, #0
  4016de:	d1e3      	bne.n	4016a8 <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
  4016e0:	2001      	movs	r0, #1
  4016e2:	e7ca      	b.n	40167a <xQueueGiveFromISR+0x62>
  4016e4:	00400f89 	.word	0x00400f89
  4016e8:	004010c1 	.word	0x004010c1
  4016ec:	00402249 	.word	0x00402249

004016f0 <xQueueGenericReceive>:
{
  4016f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4016f4:	b087      	sub	sp, #28
  4016f6:	9203      	str	r2, [sp, #12]
	configASSERT( pxQueue );
  4016f8:	2800      	cmp	r0, #0
  4016fa:	d066      	beq.n	4017ca <xQueueGenericReceive+0xda>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4016fc:	2900      	cmp	r1, #0
  4016fe:	f000 80af 	beq.w	401860 <xQueueGenericReceive+0x170>
  401702:	9301      	str	r3, [sp, #4]
  401704:	4604      	mov	r4, r0
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  401706:	4b5e      	ldr	r3, [pc, #376]	; (401880 <xQueueGenericReceive+0x190>)
  401708:	460f      	mov	r7, r1
  40170a:	4798      	blx	r3
  40170c:	b960      	cbnz	r0, 401728 <xQueueGenericReceive+0x38>
  40170e:	9b03      	ldr	r3, [sp, #12]
  401710:	b15b      	cbz	r3, 40172a <xQueueGenericReceive+0x3a>
  401712:	f04f 0380 	mov.w	r3, #128	; 0x80
  401716:	b672      	cpsid	i
  401718:	f383 8811 	msr	BASEPRI, r3
  40171c:	f3bf 8f6f 	isb	sy
  401720:	f3bf 8f4f 	dsb	sy
  401724:	b662      	cpsie	i
  401726:	e7fe      	b.n	401726 <xQueueGenericReceive+0x36>
  401728:	2300      	movs	r3, #0
  40172a:	4e56      	ldr	r6, [pc, #344]	; (401884 <xQueueGenericReceive+0x194>)
  40172c:	4d56      	ldr	r5, [pc, #344]	; (401888 <xQueueGenericReceive+0x198>)
					vTaskSetTimeOutState( &xTimeOut );
  40172e:	f8df b180 	ldr.w	fp, [pc, #384]	; 4018b0 <xQueueGenericReceive+0x1c0>
		vTaskSuspendAll();
  401732:	f8df a180 	ldr.w	sl, [pc, #384]	; 4018b4 <xQueueGenericReceive+0x1c4>
					portYIELD_WITHIN_API();
  401736:	f8df 9174 	ldr.w	r9, [pc, #372]	; 4018ac <xQueueGenericReceive+0x1bc>
  40173a:	e006      	b.n	40174a <xQueueGenericReceive+0x5a>
	taskEXIT_CRITICAL();
  40173c:	47a8      	blx	r5
				prvUnlockQueue( pxQueue );
  40173e:	4b53      	ldr	r3, [pc, #332]	; (40188c <xQueueGenericReceive+0x19c>)
  401740:	4620      	mov	r0, r4
  401742:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401744:	4b52      	ldr	r3, [pc, #328]	; (401890 <xQueueGenericReceive+0x1a0>)
  401746:	4798      	blx	r3
  401748:	2301      	movs	r3, #1
  40174a:	9302      	str	r3, [sp, #8]
		taskENTER_CRITICAL();
  40174c:	47b0      	blx	r6
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  40174e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401750:	9b02      	ldr	r3, [sp, #8]
  401752:	2a00      	cmp	r2, #0
  401754:	d156      	bne.n	401804 <xQueueGenericReceive+0x114>
				if( xTicksToWait == ( TickType_t ) 0 )
  401756:	f8dd 800c 	ldr.w	r8, [sp, #12]
  40175a:	f1b8 0f00 	cmp.w	r8, #0
  40175e:	d04e      	beq.n	4017fe <xQueueGenericReceive+0x10e>
					vTaskSetTimeOutState( &xTimeOut );
  401760:	f10d 0810 	add.w	r8, sp, #16
				else if( xEntryTimeSet == pdFALSE )
  401764:	b90b      	cbnz	r3, 40176a <xQueueGenericReceive+0x7a>
					vTaskSetTimeOutState( &xTimeOut );
  401766:	4640      	mov	r0, r8
  401768:	47d8      	blx	fp
		taskEXIT_CRITICAL();
  40176a:	47a8      	blx	r5
		vTaskSuspendAll();
  40176c:	47d0      	blx	sl
		prvLockQueue( pxQueue );
  40176e:	47b0      	blx	r6
  401770:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401772:	3301      	adds	r3, #1
  401774:	d101      	bne.n	40177a <xQueueGenericReceive+0x8a>
  401776:	2300      	movs	r3, #0
  401778:	6463      	str	r3, [r4, #68]	; 0x44
  40177a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40177c:	3301      	adds	r3, #1
  40177e:	d101      	bne.n	401784 <xQueueGenericReceive+0x94>
  401780:	2300      	movs	r3, #0
  401782:	64a3      	str	r3, [r4, #72]	; 0x48
  401784:	47a8      	blx	r5
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401786:	4640      	mov	r0, r8
  401788:	a903      	add	r1, sp, #12
  40178a:	4b42      	ldr	r3, [pc, #264]	; (401894 <xQueueGenericReceive+0x1a4>)
  40178c:	4798      	blx	r3
  40178e:	2800      	cmp	r0, #0
  401790:	d12c      	bne.n	4017ec <xQueueGenericReceive+0xfc>
	taskENTER_CRITICAL();
  401792:	47b0      	blx	r6
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  401794:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401796:	2b00      	cmp	r3, #0
  401798:	d1d0      	bne.n	40173c <xQueueGenericReceive+0x4c>
	taskEXIT_CRITICAL();
  40179a:	47a8      	blx	r5
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40179c:	6823      	ldr	r3, [r4, #0]
  40179e:	b1fb      	cbz	r3, 4017e0 <xQueueGenericReceive+0xf0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  4017a0:	9903      	ldr	r1, [sp, #12]
  4017a2:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4017a6:	4b3c      	ldr	r3, [pc, #240]	; (401898 <xQueueGenericReceive+0x1a8>)
  4017a8:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  4017aa:	4b38      	ldr	r3, [pc, #224]	; (40188c <xQueueGenericReceive+0x19c>)
  4017ac:	4620      	mov	r0, r4
  4017ae:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  4017b0:	4b37      	ldr	r3, [pc, #220]	; (401890 <xQueueGenericReceive+0x1a0>)
  4017b2:	4798      	blx	r3
  4017b4:	2800      	cmp	r0, #0
  4017b6:	d1c7      	bne.n	401748 <xQueueGenericReceive+0x58>
					portYIELD_WITHIN_API();
  4017b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4017bc:	f8c9 3000 	str.w	r3, [r9]
  4017c0:	f3bf 8f4f 	dsb	sy
  4017c4:	f3bf 8f6f 	isb	sy
  4017c8:	e7be      	b.n	401748 <xQueueGenericReceive+0x58>
  4017ca:	f04f 0380 	mov.w	r3, #128	; 0x80
  4017ce:	b672      	cpsid	i
  4017d0:	f383 8811 	msr	BASEPRI, r3
  4017d4:	f3bf 8f6f 	isb	sy
  4017d8:	f3bf 8f4f 	dsb	sy
  4017dc:	b662      	cpsie	i
  4017de:	e7fe      	b.n	4017de <xQueueGenericReceive+0xee>
						taskENTER_CRITICAL();
  4017e0:	47b0      	blx	r6
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  4017e2:	6860      	ldr	r0, [r4, #4]
  4017e4:	4b2d      	ldr	r3, [pc, #180]	; (40189c <xQueueGenericReceive+0x1ac>)
  4017e6:	4798      	blx	r3
						taskEXIT_CRITICAL();
  4017e8:	47a8      	blx	r5
  4017ea:	e7d9      	b.n	4017a0 <xQueueGenericReceive+0xb0>
			prvUnlockQueue( pxQueue );
  4017ec:	4620      	mov	r0, r4
  4017ee:	4b27      	ldr	r3, [pc, #156]	; (40188c <xQueueGenericReceive+0x19c>)
  4017f0:	4798      	blx	r3
			( void ) xTaskResumeAll();
  4017f2:	4b27      	ldr	r3, [pc, #156]	; (401890 <xQueueGenericReceive+0x1a0>)
  4017f4:	4798      	blx	r3
			return errQUEUE_EMPTY;
  4017f6:	2000      	movs	r0, #0
}
  4017f8:	b007      	add	sp, #28
  4017fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					taskEXIT_CRITICAL();
  4017fe:	47a8      	blx	r5
					return errQUEUE_EMPTY;
  401800:	4640      	mov	r0, r8
  401802:	e7f9      	b.n	4017f8 <xQueueGenericReceive+0x108>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  401804:	4b26      	ldr	r3, [pc, #152]	; (4018a0 <xQueueGenericReceive+0x1b0>)
  401806:	4639      	mov	r1, r7
  401808:	4620      	mov	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  40180a:	68e6      	ldr	r6, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  40180c:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
  40180e:	9b01      	ldr	r3, [sp, #4]
  401810:	b963      	cbnz	r3, 40182c <xQueueGenericReceive+0x13c>
					--( pxQueue->uxMessagesWaiting );
  401812:	6ba3      	ldr	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401814:	6822      	ldr	r2, [r4, #0]
					--( pxQueue->uxMessagesWaiting );
  401816:	3b01      	subs	r3, #1
  401818:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40181a:	b912      	cbnz	r2, 401822 <xQueueGenericReceive+0x132>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  40181c:	4b21      	ldr	r3, [pc, #132]	; (4018a4 <xQueueGenericReceive+0x1b4>)
  40181e:	4798      	blx	r3
  401820:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401822:	6923      	ldr	r3, [r4, #16]
  401824:	b9ab      	cbnz	r3, 401852 <xQueueGenericReceive+0x162>
				taskEXIT_CRITICAL();
  401826:	47a8      	blx	r5
				return pdPASS;
  401828:	2001      	movs	r0, #1
  40182a:	e7e5      	b.n	4017f8 <xQueueGenericReceive+0x108>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40182c:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  40182e:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401830:	2b00      	cmp	r3, #0
  401832:	d0f8      	beq.n	401826 <xQueueGenericReceive+0x136>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401834:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401838:	4b1b      	ldr	r3, [pc, #108]	; (4018a8 <xQueueGenericReceive+0x1b8>)
  40183a:	4798      	blx	r3
  40183c:	2800      	cmp	r0, #0
  40183e:	d0f2      	beq.n	401826 <xQueueGenericReceive+0x136>
							queueYIELD_IF_USING_PREEMPTION();
  401840:	4b1a      	ldr	r3, [pc, #104]	; (4018ac <xQueueGenericReceive+0x1bc>)
  401842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401846:	601a      	str	r2, [r3, #0]
  401848:	f3bf 8f4f 	dsb	sy
  40184c:	f3bf 8f6f 	isb	sy
  401850:	e7e9      	b.n	401826 <xQueueGenericReceive+0x136>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  401852:	f104 0010 	add.w	r0, r4, #16
  401856:	4b14      	ldr	r3, [pc, #80]	; (4018a8 <xQueueGenericReceive+0x1b8>)
  401858:	4798      	blx	r3
  40185a:	2801      	cmp	r0, #1
  40185c:	d1e3      	bne.n	401826 <xQueueGenericReceive+0x136>
  40185e:	e7ef      	b.n	401840 <xQueueGenericReceive+0x150>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401860:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401862:	2a00      	cmp	r2, #0
  401864:	f43f af4d 	beq.w	401702 <xQueueGenericReceive+0x12>
  401868:	f04f 0380 	mov.w	r3, #128	; 0x80
  40186c:	b672      	cpsid	i
  40186e:	f383 8811 	msr	BASEPRI, r3
  401872:	f3bf 8f6f 	isb	sy
  401876:	f3bf 8f4f 	dsb	sy
  40187a:	b662      	cpsie	i
  40187c:	e7fe      	b.n	40187c <xQueueGenericReceive+0x18c>
  40187e:	bf00      	nop
  401880:	004023a5 	.word	0x004023a5
  401884:	00400d9d 	.word	0x00400d9d
  401888:	00400de9 	.word	0x00400de9
  40188c:	00401179 	.word	0x00401179
  401890:	00401e35 	.word	0x00401e35
  401894:	00402301 	.word	0x00402301
  401898:	00402141 	.word	0x00402141
  40189c:	004023c5 	.word	0x004023c5
  4018a0:	0040114d 	.word	0x0040114d
  4018a4:	00402535 	.word	0x00402535
  4018a8:	00402249 	.word	0x00402249
  4018ac:	e000ed04 	.word	0xe000ed04
  4018b0:	004022dd 	.word	0x004022dd
  4018b4:	00401ca5 	.word	0x00401ca5

004018b8 <vQueueAddToRegistry>:
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  4018b8:	2300      	movs	r3, #0
  4018ba:	4a08      	ldr	r2, [pc, #32]	; (4018dc <vQueueAddToRegistry+0x24>)
	{
  4018bc:	b430      	push	{r4, r5}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  4018be:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
  4018c2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
  4018c6:	b124      	cbz	r4, 4018d2 <vQueueAddToRegistry+0x1a>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  4018c8:	3301      	adds	r3, #1
  4018ca:	2b08      	cmp	r3, #8
  4018cc:	d1f7      	bne.n	4018be <vQueueAddToRegistry+0x6>
	}
  4018ce:	bc30      	pop	{r4, r5}
  4018d0:	4770      	bx	lr
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  4018d2:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  4018d6:	6068      	str	r0, [r5, #4]
	}
  4018d8:	bc30      	pop	{r4, r5}
  4018da:	4770      	bx	lr
  4018dc:	20400bd0 	.word	0x20400bd0

004018e0 <vQueueWaitForMessageRestricted>:
	{
  4018e0:	b570      	push	{r4, r5, r6, lr}
  4018e2:	4604      	mov	r4, r0
		prvLockQueue( pxQueue );
  4018e4:	4b0f      	ldr	r3, [pc, #60]	; (401924 <vQueueWaitForMessageRestricted+0x44>)
	{
  4018e6:	460d      	mov	r5, r1
  4018e8:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  4018ea:	4798      	blx	r3
  4018ec:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4018ee:	3301      	adds	r3, #1
  4018f0:	d014      	beq.n	40191c <vQueueWaitForMessageRestricted+0x3c>
  4018f2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4018f4:	3301      	adds	r3, #1
  4018f6:	d00e      	beq.n	401916 <vQueueWaitForMessageRestricted+0x36>
  4018f8:	4b0b      	ldr	r3, [pc, #44]	; (401928 <vQueueWaitForMessageRestricted+0x48>)
  4018fa:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  4018fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4018fe:	b92b      	cbnz	r3, 40190c <vQueueWaitForMessageRestricted+0x2c>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  401900:	4632      	mov	r2, r6
  401902:	4629      	mov	r1, r5
  401904:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401908:	4b08      	ldr	r3, [pc, #32]	; (40192c <vQueueWaitForMessageRestricted+0x4c>)
  40190a:	4798      	blx	r3
		prvUnlockQueue( pxQueue );
  40190c:	4620      	mov	r0, r4
  40190e:	4b08      	ldr	r3, [pc, #32]	; (401930 <vQueueWaitForMessageRestricted+0x50>)
	}
  401910:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
  401914:	4718      	bx	r3
		prvLockQueue( pxQueue );
  401916:	2300      	movs	r3, #0
  401918:	64a3      	str	r3, [r4, #72]	; 0x48
  40191a:	e7ed      	b.n	4018f8 <vQueueWaitForMessageRestricted+0x18>
  40191c:	2300      	movs	r3, #0
  40191e:	6463      	str	r3, [r4, #68]	; 0x44
  401920:	e7e7      	b.n	4018f2 <vQueueWaitForMessageRestricted+0x12>
  401922:	bf00      	nop
  401924:	00400d9d 	.word	0x00400d9d
  401928:	00400de9 	.word	0x00400de9
  40192c:	004021c5 	.word	0x004021c5
  401930:	00401179 	.word	0x00401179

00401934 <prvResetNextTaskUnblockTime.part.2>:
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401934:	4a03      	ldr	r2, [pc, #12]	; (401944 <prvResetNextTaskUnblockTime.part.2+0x10>)
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  401936:	4b04      	ldr	r3, [pc, #16]	; (401948 <prvResetNextTaskUnblockTime.part.2+0x14>)
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401938:	6812      	ldr	r2, [r2, #0]
  40193a:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  40193c:	68d2      	ldr	r2, [r2, #12]
  40193e:	6852      	ldr	r2, [r2, #4]
  401940:	601a      	str	r2, [r3, #0]
  401942:	4770      	bx	lr
  401944:	20400a5c 	.word	0x20400a5c
  401948:	20400b08 	.word	0x20400b08

0040194c <prvAddCurrentTaskToDelayedList>:
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  40194c:	4b0d      	ldr	r3, [pc, #52]	; (401984 <prvAddCurrentTaskToDelayedList+0x38>)
	if( xTimeToWake < xTickCount )
  40194e:	4a0e      	ldr	r2, [pc, #56]	; (401988 <prvAddCurrentTaskToDelayedList+0x3c>)
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  401950:	6819      	ldr	r1, [r3, #0]
	if( xTimeToWake < xTickCount )
  401952:	6812      	ldr	r2, [r2, #0]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  401954:	6048      	str	r0, [r1, #4]
	if( xTimeToWake < xTickCount )
  401956:	4290      	cmp	r0, r2
  401958:	d30d      	bcc.n	401976 <prvAddCurrentTaskToDelayedList+0x2a>
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  40195a:	490c      	ldr	r1, [pc, #48]	; (40198c <prvAddCurrentTaskToDelayedList+0x40>)
  40195c:	4a0c      	ldr	r2, [pc, #48]	; (401990 <prvAddCurrentTaskToDelayedList+0x44>)
{
  40195e:	b510      	push	{r4, lr}
  401960:	4604      	mov	r4, r0
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401962:	6808      	ldr	r0, [r1, #0]
  401964:	6819      	ldr	r1, [r3, #0]
  401966:	3104      	adds	r1, #4
  401968:	4790      	blx	r2
		if( xTimeToWake < xNextTaskUnblockTime )
  40196a:	4b0a      	ldr	r3, [pc, #40]	; (401994 <prvAddCurrentTaskToDelayedList+0x48>)
  40196c:	681a      	ldr	r2, [r3, #0]
  40196e:	4294      	cmp	r4, r2
  401970:	d200      	bcs.n	401974 <prvAddCurrentTaskToDelayedList+0x28>
			xNextTaskUnblockTime = xTimeToWake;
  401972:	601c      	str	r4, [r3, #0]
  401974:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401976:	4908      	ldr	r1, [pc, #32]	; (401998 <prvAddCurrentTaskToDelayedList+0x4c>)
  401978:	4a05      	ldr	r2, [pc, #20]	; (401990 <prvAddCurrentTaskToDelayedList+0x44>)
  40197a:	6808      	ldr	r0, [r1, #0]
  40197c:	6819      	ldr	r1, [r3, #0]
  40197e:	3104      	adds	r1, #4
  401980:	4710      	bx	r2
  401982:	bf00      	nop
  401984:	20400a58 	.word	0x20400a58
  401988:	20400b50 	.word	0x20400b50
  40198c:	20400a5c 	.word	0x20400a5c
  401990:	00400c85 	.word	0x00400c85
  401994:	20400b08 	.word	0x20400b08
  401998:	20400a60 	.word	0x20400a60

0040199c <xTaskGenericCreate.part.5>:
BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
  40199c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4019a0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  4019a2:	4680      	mov	r8, r0
  4019a4:	460d      	mov	r5, r1
  4019a6:	4692      	mov	sl, r2
  4019a8:	4699      	mov	r9, r3
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4019aa:	2e00      	cmp	r6, #0
  4019ac:	f000 8096 	beq.w	401adc <xTaskGenericCreate.part.5+0x140>
  4019b0:	4c64      	ldr	r4, [pc, #400]	; (401b44 <xTaskGenericCreate.part.5+0x1a8>)
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  4019b2:	2058      	movs	r0, #88	; 0x58
  4019b4:	47a0      	blx	r4
			if( pxNewTCB != NULL )
  4019b6:	4604      	mov	r4, r0
  4019b8:	2800      	cmp	r0, #0
  4019ba:	f000 809a 	beq.w	401af2 <xTaskGenericCreate.part.5+0x156>
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  4019be:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
				pxNewTCB->pxStack = pxStack;
  4019c2:	6306      	str	r6, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  4019c4:	21a5      	movs	r1, #165	; 0xa5
  4019c6:	4b60      	ldr	r3, [pc, #384]	; (401b48 <xTaskGenericCreate.part.5+0x1ac>)
  4019c8:	4652      	mov	r2, sl
  4019ca:	4630      	mov	r0, r6
  4019cc:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  4019ce:	f1aa 0a04 	sub.w	sl, sl, #4
  4019d2:	6b20      	ldr	r0, [r4, #48]	; 0x30
  4019d4:	1e6b      	subs	r3, r5, #1
  4019d6:	f105 0109 	add.w	r1, r5, #9
  4019da:	f104 0533 	add.w	r5, r4, #51	; 0x33
  4019de:	4482      	add	sl, r0
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  4019e0:	f02a 0a07 	bic.w	sl, sl, #7
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  4019e4:	785a      	ldrb	r2, [r3, #1]
  4019e6:	f805 2f01 	strb.w	r2, [r5, #1]!
		if( pcName[ x ] == 0x00 )
  4019ea:	f813 2f01 	ldrb.w	r2, [r3, #1]!
  4019ee:	b10a      	cbz	r2, 4019f4 <xTaskGenericCreate.part.5+0x58>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  4019f0:	4299      	cmp	r1, r3
  4019f2:	d1f7      	bne.n	4019e4 <xTaskGenericCreate.part.5+0x48>
  4019f4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  4019f6:	2700      	movs	r7, #0
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  4019f8:	f104 0b04 	add.w	fp, r4, #4
  4019fc:	4e53      	ldr	r6, [pc, #332]	; (401b4c <xTaskGenericCreate.part.5+0x1b0>)
  4019fe:	2d04      	cmp	r5, #4
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  401a00:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  401a04:	4658      	mov	r0, fp
		pxTCB->uxMutexesHeld = 0;
  401a06:	64e7      	str	r7, [r4, #76]	; 0x4c
  401a08:	bf28      	it	cs
  401a0a:	2504      	movcs	r5, #4
	pxTCB->uxPriority = uxPriority;
  401a0c:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
  401a0e:	64a5      	str	r5, [r4, #72]	; 0x48
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401a10:	f1c5 0505 	rsb	r5, r5, #5
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  401a14:	47b0      	blx	r6
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  401a16:	f104 0018 	add.w	r0, r4, #24
  401a1a:	47b0      	blx	r6
		pxTCB->ulNotifiedValue = 0;
  401a1c:	6527      	str	r7, [r4, #80]	; 0x50
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  401a1e:	4b4c      	ldr	r3, [pc, #304]	; (401b50 <xTaskGenericCreate.part.5+0x1b4>)
  401a20:	464a      	mov	r2, r9
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401a22:	61a5      	str	r5, [r4, #24]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  401a24:	4641      	mov	r1, r8
		pxTCB->eNotifyState = eNotWaitingNotification;
  401a26:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  401a2a:	4650      	mov	r0, sl
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  401a2c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  401a2e:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  401a30:	4798      	blx	r3
		if( ( void * ) pxCreatedTask != NULL )
  401a32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  401a34:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
  401a36:	b103      	cbz	r3, 401a3a <xTaskGenericCreate.part.5+0x9e>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  401a38:	601c      	str	r4, [r3, #0]
		taskENTER_CRITICAL();
  401a3a:	4b46      	ldr	r3, [pc, #280]	; (401b54 <xTaskGenericCreate.part.5+0x1b8>)
  401a3c:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
  401a3e:	4a46      	ldr	r2, [pc, #280]	; (401b58 <xTaskGenericCreate.part.5+0x1bc>)
			if( pxCurrentTCB == NULL )
  401a40:	4e46      	ldr	r6, [pc, #280]	; (401b5c <xTaskGenericCreate.part.5+0x1c0>)
			uxCurrentNumberOfTasks++;
  401a42:	6813      	ldr	r3, [r2, #0]
  401a44:	3301      	adds	r3, #1
  401a46:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  401a48:	6833      	ldr	r3, [r6, #0]
  401a4a:	2b00      	cmp	r3, #0
  401a4c:	d03f      	beq.n	401ace <xTaskGenericCreate.part.5+0x132>
				if( xSchedulerRunning == pdFALSE )
  401a4e:	f8df 814c 	ldr.w	r8, [pc, #332]	; 401b9c <xTaskGenericCreate.part.5+0x200>
  401a52:	f8d8 3000 	ldr.w	r3, [r8]
  401a56:	b92b      	cbnz	r3, 401a64 <xTaskGenericCreate.part.5+0xc8>
					if( pxCurrentTCB->uxPriority <= uxPriority )
  401a58:	6833      	ldr	r3, [r6, #0]
  401a5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  401a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401a5e:	429a      	cmp	r2, r3
  401a60:	d300      	bcc.n	401a64 <xTaskGenericCreate.part.5+0xc8>
						pxCurrentTCB = pxNewTCB;
  401a62:	6034      	str	r4, [r6, #0]
			uxTaskNumber++;
  401a64:	f8df e138 	ldr.w	lr, [pc, #312]	; 401ba0 <xTaskGenericCreate.part.5+0x204>
			prvAddTaskToReadyList( pxNewTCB );
  401a68:	2501      	movs	r5, #1
  401a6a:	f8df c138 	ldr.w	ip, [pc, #312]	; 401ba4 <xTaskGenericCreate.part.5+0x208>
  401a6e:	4659      	mov	r1, fp
  401a70:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401a72:	f8dc 9000 	ldr.w	r9, [ip]
			uxTaskNumber++;
  401a76:	f8de 2000 	ldr.w	r2, [lr]
			prvAddTaskToReadyList( pxNewTCB );
  401a7a:	fa05 f300 	lsl.w	r3, r5, r0
  401a7e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401a82:	ea43 0309 	orr.w	r3, r3, r9
			uxTaskNumber++;
  401a86:	442a      	add	r2, r5
			prvAddTaskToReadyList( pxNewTCB );
  401a88:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 401b74 <xTaskGenericCreate.part.5+0x1d8>
			uxTaskNumber++;
  401a8c:	f8ce 2000 	str.w	r2, [lr]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  401a90:	6422      	str	r2, [r4, #64]	; 0x40
			prvAddTaskToReadyList( pxNewTCB );
  401a92:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  401a96:	4a32      	ldr	r2, [pc, #200]	; (401b60 <xTaskGenericCreate.part.5+0x1c4>)
  401a98:	f8cc 3000 	str.w	r3, [ip]
  401a9c:	4790      	blx	r2
		taskEXIT_CRITICAL();
  401a9e:	4b31      	ldr	r3, [pc, #196]	; (401b64 <xTaskGenericCreate.part.5+0x1c8>)
  401aa0:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
  401aa2:	f8d8 3000 	ldr.w	r3, [r8]
  401aa6:	b17b      	cbz	r3, 401ac8 <xTaskGenericCreate.part.5+0x12c>
			if( pxCurrentTCB->uxPriority < uxPriority )
  401aa8:	6833      	ldr	r3, [r6, #0]
  401aaa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  401aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401aae:	429a      	cmp	r2, r3
  401ab0:	d90a      	bls.n	401ac8 <xTaskGenericCreate.part.5+0x12c>
				taskYIELD_IF_USING_PREEMPTION();
  401ab2:	4b2d      	ldr	r3, [pc, #180]	; (401b68 <xTaskGenericCreate.part.5+0x1cc>)
  401ab4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401ab8:	601a      	str	r2, [r3, #0]
  401aba:	f3bf 8f4f 	dsb	sy
  401abe:	f3bf 8f6f 	isb	sy
  401ac2:	4628      	mov	r0, r5
  401ac4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if( pxCurrentTCB->uxPriority < uxPriority )
  401ac8:	4628      	mov	r0, r5
}
  401aca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				pxCurrentTCB =  pxNewTCB;
  401ace:	6034      	str	r4, [r6, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  401ad0:	6813      	ldr	r3, [r2, #0]
  401ad2:	2b01      	cmp	r3, #1
  401ad4:	d014      	beq.n	401b00 <xTaskGenericCreate.part.5+0x164>
  401ad6:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 401b9c <xTaskGenericCreate.part.5+0x200>
  401ada:	e7c3      	b.n	401a64 <xTaskGenericCreate.part.5+0xc8>
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401adc:	0090      	lsls	r0, r2, #2
  401ade:	4c19      	ldr	r4, [pc, #100]	; (401b44 <xTaskGenericCreate.part.5+0x1a8>)
  401ae0:	47a0      	blx	r4
		if( pxStack != NULL )
  401ae2:	4606      	mov	r6, r0
  401ae4:	2800      	cmp	r0, #0
  401ae6:	f47f af64 	bne.w	4019b2 <xTaskGenericCreate.part.5+0x16>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  401aea:	f04f 30ff 	mov.w	r0, #4294967295
  401aee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				vPortFree( pxStack );
  401af2:	4630      	mov	r0, r6
  401af4:	4b1d      	ldr	r3, [pc, #116]	; (401b6c <xTaskGenericCreate.part.5+0x1d0>)
  401af6:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  401af8:	f04f 30ff 	mov.w	r0, #4294967295
  401afc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  401b00:	4d1b      	ldr	r5, [pc, #108]	; (401b70 <xTaskGenericCreate.part.5+0x1d4>)
  401b02:	481c      	ldr	r0, [pc, #112]	; (401b74 <xTaskGenericCreate.part.5+0x1d8>)
  401b04:	47a8      	blx	r5
  401b06:	481c      	ldr	r0, [pc, #112]	; (401b78 <xTaskGenericCreate.part.5+0x1dc>)
  401b08:	47a8      	blx	r5
  401b0a:	481c      	ldr	r0, [pc, #112]	; (401b7c <xTaskGenericCreate.part.5+0x1e0>)
  401b0c:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList1 );
  401b0e:	f8df 8098 	ldr.w	r8, [pc, #152]	; 401ba8 <xTaskGenericCreate.part.5+0x20c>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  401b12:	481b      	ldr	r0, [pc, #108]	; (401b80 <xTaskGenericCreate.part.5+0x1e4>)
  401b14:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList2 );
  401b16:	f8df 9094 	ldr.w	r9, [pc, #148]	; 401bac <xTaskGenericCreate.part.5+0x210>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  401b1a:	481a      	ldr	r0, [pc, #104]	; (401b84 <xTaskGenericCreate.part.5+0x1e8>)
  401b1c:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList1 );
  401b1e:	4640      	mov	r0, r8
  401b20:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList2 );
  401b22:	4648      	mov	r0, r9
  401b24:	47a8      	blx	r5
	vListInitialise( &xPendingReadyList );
  401b26:	4818      	ldr	r0, [pc, #96]	; (401b88 <xTaskGenericCreate.part.5+0x1ec>)
  401b28:	47a8      	blx	r5
		vListInitialise( &xTasksWaitingTermination );
  401b2a:	4818      	ldr	r0, [pc, #96]	; (401b8c <xTaskGenericCreate.part.5+0x1f0>)
  401b2c:	47a8      	blx	r5
		vListInitialise( &xSuspendedTaskList );
  401b2e:	4818      	ldr	r0, [pc, #96]	; (401b90 <xTaskGenericCreate.part.5+0x1f4>)
  401b30:	47a8      	blx	r5
	pxDelayedTaskList = &xDelayedTaskList1;
  401b32:	4a18      	ldr	r2, [pc, #96]	; (401b94 <xTaskGenericCreate.part.5+0x1f8>)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  401b34:	4b18      	ldr	r3, [pc, #96]	; (401b98 <xTaskGenericCreate.part.5+0x1fc>)
	pxDelayedTaskList = &xDelayedTaskList1;
  401b36:	f8c2 8000 	str.w	r8, [r2]
  401b3a:	f8df 8060 	ldr.w	r8, [pc, #96]	; 401b9c <xTaskGenericCreate.part.5+0x200>
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  401b3e:	f8c3 9000 	str.w	r9, [r3]
  401b42:	e78f      	b.n	401a64 <xTaskGenericCreate.part.5+0xc8>
  401b44:	00400fed 	.word	0x00400fed
  401b48:	004036f9 	.word	0x004036f9
  401b4c:	00400c65 	.word	0x00400c65
  401b50:	00400d4d 	.word	0x00400d4d
  401b54:	00400d9d 	.word	0x00400d9d
  401b58:	20400ac8 	.word	0x20400ac8
  401b5c:	20400a58 	.word	0x20400a58
  401b60:	00400c6d 	.word	0x00400c6d
  401b64:	00400de9 	.word	0x00400de9
  401b68:	e000ed04 	.word	0xe000ed04
  401b6c:	00401021 	.word	0x00401021
  401b70:	00400c4d 	.word	0x00400c4d
  401b74:	20400a64 	.word	0x20400a64
  401b78:	20400a78 	.word	0x20400a78
  401b7c:	20400a8c 	.word	0x20400a8c
  401b80:	20400aa0 	.word	0x20400aa0
  401b84:	20400ab4 	.word	0x20400ab4
  401b88:	20400b10 	.word	0x20400b10
  401b8c:	20400b3c 	.word	0x20400b3c
  401b90:	20400b28 	.word	0x20400b28
  401b94:	20400a5c 	.word	0x20400a5c
  401b98:	20400a60 	.word	0x20400a60
  401b9c:	20400b24 	.word	0x20400b24
  401ba0:	20400ad4 	.word	0x20400ad4
  401ba4:	20400adc 	.word	0x20400adc
  401ba8:	20400ae0 	.word	0x20400ae0
  401bac:	20400af4 	.word	0x20400af4

00401bb0 <prvTaskIsTaskSuspended.part.0>:
  401bb0:	f04f 0380 	mov.w	r3, #128	; 0x80
  401bb4:	b672      	cpsid	i
  401bb6:	f383 8811 	msr	BASEPRI, r3
  401bba:	f3bf 8f6f 	isb	sy
  401bbe:	f3bf 8f4f 	dsb	sy
  401bc2:	b662      	cpsie	i
  401bc4:	e7fe      	b.n	401bc4 <prvTaskIsTaskSuspended.part.0+0x14>
  401bc6:	bf00      	nop

00401bc8 <xTaskGenericCreate>:
{
  401bc8:	b470      	push	{r4, r5, r6}
  401bca:	ac03      	add	r4, sp, #12
  401bcc:	cc70      	ldmia	r4, {r4, r5, r6}
	configASSERT( pxTaskCode );
  401bce:	b160      	cbz	r0, 401bea <xTaskGenericCreate+0x22>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  401bd0:	2c04      	cmp	r4, #4
  401bd2:	d915      	bls.n	401c00 <xTaskGenericCreate+0x38>
  401bd4:	f04f 0380 	mov.w	r3, #128	; 0x80
  401bd8:	b672      	cpsid	i
  401bda:	f383 8811 	msr	BASEPRI, r3
  401bde:	f3bf 8f6f 	isb	sy
  401be2:	f3bf 8f4f 	dsb	sy
  401be6:	b662      	cpsie	i
  401be8:	e7fe      	b.n	401be8 <xTaskGenericCreate+0x20>
  401bea:	f04f 0380 	mov.w	r3, #128	; 0x80
  401bee:	b672      	cpsid	i
  401bf0:	f383 8811 	msr	BASEPRI, r3
  401bf4:	f3bf 8f6f 	isb	sy
  401bf8:	f3bf 8f4f 	dsb	sy
  401bfc:	b662      	cpsie	i
  401bfe:	e7fe      	b.n	401bfe <xTaskGenericCreate+0x36>
  401c00:	9403      	str	r4, [sp, #12]
  401c02:	4c03      	ldr	r4, [pc, #12]	; (401c10 <xTaskGenericCreate+0x48>)
  401c04:	9605      	str	r6, [sp, #20]
  401c06:	9504      	str	r5, [sp, #16]
  401c08:	46a4      	mov	ip, r4
}
  401c0a:	bc70      	pop	{r4, r5, r6}
  401c0c:	4760      	bx	ip
  401c0e:	bf00      	nop
  401c10:	0040199d 	.word	0x0040199d

00401c14 <vTaskStartScheduler>:
{
  401c14:	b570      	push	{r4, r5, r6, lr}
  401c16:	2400      	movs	r4, #0
  401c18:	b084      	sub	sp, #16
  401c1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401c1e:	4919      	ldr	r1, [pc, #100]	; (401c84 <vTaskStartScheduler+0x70>)
  401c20:	9402      	str	r4, [sp, #8]
  401c22:	4623      	mov	r3, r4
  401c24:	9401      	str	r4, [sp, #4]
  401c26:	9400      	str	r4, [sp, #0]
  401c28:	4817      	ldr	r0, [pc, #92]	; (401c88 <vTaskStartScheduler+0x74>)
  401c2a:	4d18      	ldr	r5, [pc, #96]	; (401c8c <vTaskStartScheduler+0x78>)
  401c2c:	47a8      	blx	r5
		if( xReturn == pdPASS )
  401c2e:	2801      	cmp	r0, #1
  401c30:	d00d      	beq.n	401c4e <vTaskStartScheduler+0x3a>
		configASSERT( xReturn );
  401c32:	b950      	cbnz	r0, 401c4a <vTaskStartScheduler+0x36>
  401c34:	f04f 0380 	mov.w	r3, #128	; 0x80
  401c38:	b672      	cpsid	i
  401c3a:	f383 8811 	msr	BASEPRI, r3
  401c3e:	f3bf 8f6f 	isb	sy
  401c42:	f3bf 8f4f 	dsb	sy
  401c46:	b662      	cpsie	i
  401c48:	e7fe      	b.n	401c48 <vTaskStartScheduler+0x34>
}
  401c4a:	b004      	add	sp, #16
  401c4c:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xTimerCreateTimerTask();
  401c4e:	4b10      	ldr	r3, [pc, #64]	; (401c90 <vTaskStartScheduler+0x7c>)
  401c50:	4798      	blx	r3
	if( xReturn == pdPASS )
  401c52:	2801      	cmp	r0, #1
  401c54:	d1ed      	bne.n	401c32 <vTaskStartScheduler+0x1e>
  401c56:	f04f 0380 	mov.w	r3, #128	; 0x80
  401c5a:	b672      	cpsid	i
  401c5c:	f383 8811 	msr	BASEPRI, r3
  401c60:	f3bf 8f6f 	isb	sy
  401c64:	f3bf 8f4f 	dsb	sy
  401c68:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  401c6a:	4d0a      	ldr	r5, [pc, #40]	; (401c94 <vTaskStartScheduler+0x80>)
  401c6c:	f04f 36ff 	mov.w	r6, #4294967295
		xSchedulerRunning = pdTRUE;
  401c70:	4909      	ldr	r1, [pc, #36]	; (401c98 <vTaskStartScheduler+0x84>)
		xTickCount = ( TickType_t ) 0U;
  401c72:	4a0a      	ldr	r2, [pc, #40]	; (401c9c <vTaskStartScheduler+0x88>)
		if( xPortStartScheduler() != pdFALSE )
  401c74:	4b0a      	ldr	r3, [pc, #40]	; (401ca0 <vTaskStartScheduler+0x8c>)
		xNextTaskUnblockTime = portMAX_DELAY;
  401c76:	602e      	str	r6, [r5, #0]
		xSchedulerRunning = pdTRUE;
  401c78:	6008      	str	r0, [r1, #0]
		xTickCount = ( TickType_t ) 0U;
  401c7a:	6014      	str	r4, [r2, #0]
}
  401c7c:	b004      	add	sp, #16
  401c7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		if( xPortStartScheduler() != pdFALSE )
  401c82:	4718      	bx	r3
  401c84:	00405f64 	.word	0x00405f64
  401c88:	00401fe5 	.word	0x00401fe5
  401c8c:	0040199d 	.word	0x0040199d
  401c90:	00402625 	.word	0x00402625
  401c94:	20400b08 	.word	0x20400b08
  401c98:	20400b24 	.word	0x20400b24
  401c9c:	20400b50 	.word	0x20400b50
  401ca0:	00400ed1 	.word	0x00400ed1

00401ca4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  401ca4:	4a02      	ldr	r2, [pc, #8]	; (401cb0 <vTaskSuspendAll+0xc>)
  401ca6:	6813      	ldr	r3, [r2, #0]
  401ca8:	3301      	adds	r3, #1
  401caa:	6013      	str	r3, [r2, #0]
  401cac:	4770      	bx	lr
  401cae:	bf00      	nop
  401cb0:	20400ad0 	.word	0x20400ad0

00401cb4 <xTaskGetTickCount>:
		xTicks = xTickCount;
  401cb4:	4b01      	ldr	r3, [pc, #4]	; (401cbc <xTaskGetTickCount+0x8>)
  401cb6:	6818      	ldr	r0, [r3, #0]
}
  401cb8:	4770      	bx	lr
  401cba:	bf00      	nop
  401cbc:	20400b50 	.word	0x20400b50

00401cc0 <xTaskIncrementTick>:
{
  401cc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401cc4:	4b4c      	ldr	r3, [pc, #304]	; (401df8 <xTaskIncrementTick+0x138>)
  401cc6:	681b      	ldr	r3, [r3, #0]
  401cc8:	2b00      	cmp	r3, #0
  401cca:	d170      	bne.n	401dae <xTaskIncrementTick+0xee>
		++xTickCount;
  401ccc:	4b4b      	ldr	r3, [pc, #300]	; (401dfc <xTaskIncrementTick+0x13c>)
  401cce:	681a      	ldr	r2, [r3, #0]
  401cd0:	3201      	adds	r2, #1
  401cd2:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
  401cd4:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
  401cd6:	2e00      	cmp	r6, #0
  401cd8:	d05a      	beq.n	401d90 <xTaskIncrementTick+0xd0>
  401cda:	f8df a150 	ldr.w	sl, [pc, #336]	; 401e2c <xTaskIncrementTick+0x16c>
			if( xConstTickCount >= xNextTaskUnblockTime )
  401cde:	f8da 2000 	ldr.w	r2, [sl]
  401ce2:	2400      	movs	r4, #0
  401ce4:	4296      	cmp	r6, r2
  401ce6:	d36a      	bcc.n	401dbe <xTaskIncrementTick+0xfe>
  401ce8:	4d45      	ldr	r5, [pc, #276]	; (401e00 <xTaskIncrementTick+0x140>)
  401cea:	4f46      	ldr	r7, [pc, #280]	; (401e04 <xTaskIncrementTick+0x144>)
  401cec:	f8df 8140 	ldr.w	r8, [pc, #320]	; 401e30 <xTaskIncrementTick+0x170>
  401cf0:	e02f      	b.n	401d52 <xTaskIncrementTick+0x92>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401cf2:	682a      	ldr	r2, [r5, #0]
  401cf4:	68d2      	ldr	r2, [r2, #12]
  401cf6:	f8d2 900c 	ldr.w	r9, [r2, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  401cfa:	f8d9 1004 	ldr.w	r1, [r9, #4]
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401cfe:	f109 0b04 	add.w	fp, r9, #4
						if( xConstTickCount < xItemValue )
  401d02:	428e      	cmp	r6, r1
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401d04:	4658      	mov	r0, fp
						if( xConstTickCount < xItemValue )
  401d06:	d36d      	bcc.n	401de4 <xTaskIncrementTick+0x124>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401d08:	4b3f      	ldr	r3, [pc, #252]	; (401e08 <xTaskIncrementTick+0x148>)
  401d0a:	4798      	blx	r3
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  401d0c:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401d10:	f109 0018 	add.w	r0, r9, #24
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  401d14:	b109      	cbz	r1, 401d1a <xTaskIncrementTick+0x5a>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401d16:	4b3c      	ldr	r3, [pc, #240]	; (401e08 <xTaskIncrementTick+0x148>)
  401d18:	4798      	blx	r3
						prvAddTaskToReadyList( pxTCB );
  401d1a:	f8d9 002c 	ldr.w	r0, [r9, #44]	; 0x2c
  401d1e:	f04f 0e01 	mov.w	lr, #1
  401d22:	4b3a      	ldr	r3, [pc, #232]	; (401e0c <xTaskIncrementTick+0x14c>)
  401d24:	4659      	mov	r1, fp
  401d26:	fa0e fe00 	lsl.w	lr, lr, r0
  401d2a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401d2e:	681b      	ldr	r3, [r3, #0]
  401d30:	eb07 0080 	add.w	r0, r7, r0, lsl #2
  401d34:	ea4e 0e03 	orr.w	lr, lr, r3
  401d38:	4b34      	ldr	r3, [pc, #208]	; (401e0c <xTaskIncrementTick+0x14c>)
  401d3a:	f8c3 e000 	str.w	lr, [r3]
  401d3e:	4b34      	ldr	r3, [pc, #208]	; (401e10 <xTaskIncrementTick+0x150>)
  401d40:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401d42:	f8d8 0000 	ldr.w	r0, [r8]
  401d46:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
  401d4a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
								xSwitchRequired = pdTRUE;
  401d4c:	4291      	cmp	r1, r2
  401d4e:	bf28      	it	cs
  401d50:	2401      	movcs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401d52:	682a      	ldr	r2, [r5, #0]
  401d54:	6812      	ldr	r2, [r2, #0]
  401d56:	2a00      	cmp	r2, #0
  401d58:	d1cb      	bne.n	401cf2 <xTaskIncrementTick+0x32>
						xNextTaskUnblockTime = portMAX_DELAY;
  401d5a:	f04f 32ff 	mov.w	r2, #4294967295
  401d5e:	f8ca 2000 	str.w	r2, [sl]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  401d62:	f8d8 3000 	ldr.w	r3, [r8]
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  401d66:	4a2b      	ldr	r2, [pc, #172]	; (401e14 <xTaskIncrementTick+0x154>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  401d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  401d6a:	6812      	ldr	r2, [r2, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  401d6c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401d70:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
				xSwitchRequired = pdTRUE;
  401d74:	2b02      	cmp	r3, #2
  401d76:	bf28      	it	cs
  401d78:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  401d7a:	b90a      	cbnz	r2, 401d80 <xTaskIncrementTick+0xc0>
				vApplicationTickHook();
  401d7c:	4b26      	ldr	r3, [pc, #152]	; (401e18 <xTaskIncrementTick+0x158>)
  401d7e:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  401d80:	4b26      	ldr	r3, [pc, #152]	; (401e1c <xTaskIncrementTick+0x15c>)
  401d82:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  401d84:	2b00      	cmp	r3, #0
  401d86:	bf18      	it	ne
  401d88:	2401      	movne	r4, #1
}
  401d8a:	4620      	mov	r0, r4
  401d8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				taskSWITCH_DELAYED_LISTS();
  401d90:	4d1b      	ldr	r5, [pc, #108]	; (401e00 <xTaskIncrementTick+0x140>)
  401d92:	682b      	ldr	r3, [r5, #0]
  401d94:	681b      	ldr	r3, [r3, #0]
  401d96:	b1b3      	cbz	r3, 401dc6 <xTaskIncrementTick+0x106>
  401d98:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d9c:	b672      	cpsid	i
  401d9e:	f383 8811 	msr	BASEPRI, r3
  401da2:	f3bf 8f6f 	isb	sy
  401da6:	f3bf 8f4f 	dsb	sy
  401daa:	b662      	cpsie	i
  401dac:	e7fe      	b.n	401dac <xTaskIncrementTick+0xec>
		++uxPendedTicks;
  401dae:	4a19      	ldr	r2, [pc, #100]	; (401e14 <xTaskIncrementTick+0x154>)
BaseType_t xSwitchRequired = pdFALSE;
  401db0:	2400      	movs	r4, #0
			vApplicationTickHook();
  401db2:	4919      	ldr	r1, [pc, #100]	; (401e18 <xTaskIncrementTick+0x158>)
		++uxPendedTicks;
  401db4:	6813      	ldr	r3, [r2, #0]
  401db6:	3301      	adds	r3, #1
  401db8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  401dba:	4788      	blx	r1
  401dbc:	e7e0      	b.n	401d80 <xTaskIncrementTick+0xc0>
  401dbe:	4f11      	ldr	r7, [pc, #68]	; (401e04 <xTaskIncrementTick+0x144>)
  401dc0:	f8df 806c 	ldr.w	r8, [pc, #108]	; 401e30 <xTaskIncrementTick+0x170>
  401dc4:	e7cd      	b.n	401d62 <xTaskIncrementTick+0xa2>
				taskSWITCH_DELAYED_LISTS();
  401dc6:	4b16      	ldr	r3, [pc, #88]	; (401e20 <xTaskIncrementTick+0x160>)
  401dc8:	6829      	ldr	r1, [r5, #0]
  401dca:	4a16      	ldr	r2, [pc, #88]	; (401e24 <xTaskIncrementTick+0x164>)
  401dcc:	6818      	ldr	r0, [r3, #0]
  401dce:	6028      	str	r0, [r5, #0]
  401dd0:	6019      	str	r1, [r3, #0]
  401dd2:	6813      	ldr	r3, [r2, #0]
  401dd4:	3301      	adds	r3, #1
  401dd6:	6013      	str	r3, [r2, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401dd8:	682b      	ldr	r3, [r5, #0]
  401dda:	681b      	ldr	r3, [r3, #0]
  401ddc:	b12b      	cbz	r3, 401dea <xTaskIncrementTick+0x12a>
  401dde:	4b12      	ldr	r3, [pc, #72]	; (401e28 <xTaskIncrementTick+0x168>)
  401de0:	4798      	blx	r3
  401de2:	e77a      	b.n	401cda <xTaskIncrementTick+0x1a>
							xNextTaskUnblockTime = xItemValue;
  401de4:	f8ca 1000 	str.w	r1, [sl]
							break;
  401de8:	e7bb      	b.n	401d62 <xTaskIncrementTick+0xa2>
		xNextTaskUnblockTime = portMAX_DELAY;
  401dea:	f8df a040 	ldr.w	sl, [pc, #64]	; 401e2c <xTaskIncrementTick+0x16c>
  401dee:	f04f 32ff 	mov.w	r2, #4294967295
  401df2:	f8ca 2000 	str.w	r2, [sl]
  401df6:	e772      	b.n	401cde <xTaskIncrementTick+0x1e>
  401df8:	20400ad0 	.word	0x20400ad0
  401dfc:	20400b50 	.word	0x20400b50
  401e00:	20400a5c 	.word	0x20400a5c
  401e04:	20400a64 	.word	0x20400a64
  401e08:	00400cb9 	.word	0x00400cb9
  401e0c:	20400adc 	.word	0x20400adc
  401e10:	00400c6d 	.word	0x00400c6d
  401e14:	20400acc 	.word	0x20400acc
  401e18:	00402d35 	.word	0x00402d35
  401e1c:	20400b54 	.word	0x20400b54
  401e20:	20400a60 	.word	0x20400a60
  401e24:	20400b0c 	.word	0x20400b0c
  401e28:	00401935 	.word	0x00401935
  401e2c:	20400b08 	.word	0x20400b08
  401e30:	20400a58 	.word	0x20400a58

00401e34 <xTaskResumeAll>:
{
  401e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	configASSERT( uxSchedulerSuspended );
  401e38:	4c38      	ldr	r4, [pc, #224]	; (401f1c <xTaskResumeAll+0xe8>)
{
  401e3a:	b083      	sub	sp, #12
	configASSERT( uxSchedulerSuspended );
  401e3c:	6823      	ldr	r3, [r4, #0]
  401e3e:	b953      	cbnz	r3, 401e56 <xTaskResumeAll+0x22>
  401e40:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e44:	b672      	cpsid	i
  401e46:	f383 8811 	msr	BASEPRI, r3
  401e4a:	f3bf 8f6f 	isb	sy
  401e4e:	f3bf 8f4f 	dsb	sy
  401e52:	b662      	cpsie	i
  401e54:	e7fe      	b.n	401e54 <xTaskResumeAll+0x20>
	taskENTER_CRITICAL();
  401e56:	4b32      	ldr	r3, [pc, #200]	; (401f20 <xTaskResumeAll+0xec>)
  401e58:	4798      	blx	r3
		--uxSchedulerSuspended;
  401e5a:	6823      	ldr	r3, [r4, #0]
  401e5c:	3b01      	subs	r3, #1
  401e5e:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401e60:	6823      	ldr	r3, [r4, #0]
  401e62:	2b00      	cmp	r3, #0
  401e64:	d137      	bne.n	401ed6 <xTaskResumeAll+0xa2>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  401e66:	4b2f      	ldr	r3, [pc, #188]	; (401f24 <xTaskResumeAll+0xf0>)
  401e68:	681b      	ldr	r3, [r3, #0]
  401e6a:	2b00      	cmp	r3, #0
  401e6c:	d033      	beq.n	401ed6 <xTaskResumeAll+0xa2>
  401e6e:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 401f48 <xTaskResumeAll+0x114>
  401e72:	4b2d      	ldr	r3, [pc, #180]	; (401f28 <xTaskResumeAll+0xf4>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401e74:	4e2d      	ldr	r6, [pc, #180]	; (401f2c <xTaskResumeAll+0xf8>)
					prvAddTaskToReadyList( pxTCB );
  401e76:	4d2e      	ldr	r5, [pc, #184]	; (401f30 <xTaskResumeAll+0xfc>)
  401e78:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 401f4c <xTaskResumeAll+0x118>
  401e7c:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 401f50 <xTaskResumeAll+0x11c>
  401e80:	e01e      	b.n	401ec0 <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  401e82:	68da      	ldr	r2, [r3, #12]
  401e84:	9301      	str	r3, [sp, #4]
  401e86:	68d4      	ldr	r4, [r2, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401e88:	f104 0804 	add.w	r8, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401e8c:	f104 0018 	add.w	r0, r4, #24
  401e90:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401e92:	4640      	mov	r0, r8
  401e94:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  401e96:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401e98:	f8d5 e000 	ldr.w	lr, [r5]
  401e9c:	4641      	mov	r1, r8
  401e9e:	fa07 f200 	lsl.w	r2, r7, r0
  401ea2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401ea6:	ea42 020e 	orr.w	r2, r2, lr
  401eaa:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
  401eae:	602a      	str	r2, [r5, #0]
  401eb0:	47c8      	blx	r9
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401eb2:	4a20      	ldr	r2, [pc, #128]	; (401f34 <xTaskResumeAll+0x100>)
  401eb4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  401eb6:	6812      	ldr	r2, [r2, #0]
  401eb8:	9b01      	ldr	r3, [sp, #4]
  401eba:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  401ebc:	4291      	cmp	r1, r2
  401ebe:	d211      	bcs.n	401ee4 <xTaskResumeAll+0xb0>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401ec0:	681a      	ldr	r2, [r3, #0]
					prvAddTaskToReadyList( pxTCB );
  401ec2:	2701      	movs	r7, #1
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401ec4:	2a00      	cmp	r2, #0
  401ec6:	d1dc      	bne.n	401e82 <xTaskResumeAll+0x4e>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  401ec8:	4c1b      	ldr	r4, [pc, #108]	; (401f38 <xTaskResumeAll+0x104>)
  401eca:	6823      	ldr	r3, [r4, #0]
  401ecc:	b96b      	cbnz	r3, 401eea <xTaskResumeAll+0xb6>
				if( xYieldPending == pdTRUE )
  401ece:	f8db 4000 	ldr.w	r4, [fp]
  401ed2:	2c01      	cmp	r4, #1
  401ed4:	d019      	beq.n	401f0a <xTaskResumeAll+0xd6>
BaseType_t xAlreadyYielded = pdFALSE;
  401ed6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  401ed8:	4b18      	ldr	r3, [pc, #96]	; (401f3c <xTaskResumeAll+0x108>)
  401eda:	4798      	blx	r3
}
  401edc:	4620      	mov	r0, r4
  401ede:	b003      	add	sp, #12
  401ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						xYieldPending = pdTRUE;
  401ee4:	f8cb 7000 	str.w	r7, [fp]
  401ee8:	e7ea      	b.n	401ec0 <xTaskResumeAll+0x8c>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  401eea:	6823      	ldr	r3, [r4, #0]
  401eec:	2b00      	cmp	r3, #0
  401eee:	d0ee      	beq.n	401ece <xTaskResumeAll+0x9a>
  401ef0:	4e13      	ldr	r6, [pc, #76]	; (401f40 <xTaskResumeAll+0x10c>)
							xYieldPending = pdTRUE;
  401ef2:	2501      	movs	r5, #1
						if( xTaskIncrementTick() != pdFALSE )
  401ef4:	47b0      	blx	r6
  401ef6:	b108      	cbz	r0, 401efc <xTaskResumeAll+0xc8>
							xYieldPending = pdTRUE;
  401ef8:	f8cb 5000 	str.w	r5, [fp]
						--uxPendedTicks;
  401efc:	6823      	ldr	r3, [r4, #0]
  401efe:	3b01      	subs	r3, #1
  401f00:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  401f02:	6823      	ldr	r3, [r4, #0]
  401f04:	2b00      	cmp	r3, #0
  401f06:	d1f5      	bne.n	401ef4 <xTaskResumeAll+0xc0>
  401f08:	e7e1      	b.n	401ece <xTaskResumeAll+0x9a>
					taskYIELD_IF_USING_PREEMPTION();
  401f0a:	4b0e      	ldr	r3, [pc, #56]	; (401f44 <xTaskResumeAll+0x110>)
  401f0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401f10:	601a      	str	r2, [r3, #0]
  401f12:	f3bf 8f4f 	dsb	sy
  401f16:	f3bf 8f6f 	isb	sy
  401f1a:	e7dd      	b.n	401ed8 <xTaskResumeAll+0xa4>
  401f1c:	20400ad0 	.word	0x20400ad0
  401f20:	00400d9d 	.word	0x00400d9d
  401f24:	20400ac8 	.word	0x20400ac8
  401f28:	20400b10 	.word	0x20400b10
  401f2c:	00400cb9 	.word	0x00400cb9
  401f30:	20400adc 	.word	0x20400adc
  401f34:	20400a58 	.word	0x20400a58
  401f38:	20400acc 	.word	0x20400acc
  401f3c:	00400de9 	.word	0x00400de9
  401f40:	00401cc1 	.word	0x00401cc1
  401f44:	e000ed04 	.word	0xe000ed04
  401f48:	20400b54 	.word	0x20400b54
  401f4c:	20400a64 	.word	0x20400a64
  401f50:	00400c6d 	.word	0x00400c6d

00401f54 <vTaskDelay>:
	{
  401f54:	b538      	push	{r3, r4, r5, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  401f56:	b168      	cbz	r0, 401f74 <vTaskDelay+0x20>
			configASSERT( uxSchedulerSuspended == 0 );
  401f58:	4b1a      	ldr	r3, [pc, #104]	; (401fc4 <vTaskDelay+0x70>)
  401f5a:	681a      	ldr	r2, [r3, #0]
  401f5c:	b19a      	cbz	r2, 401f86 <vTaskDelay+0x32>
  401f5e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401f62:	b672      	cpsid	i
  401f64:	f383 8811 	msr	BASEPRI, r3
  401f68:	f3bf 8f6f 	isb	sy
  401f6c:	f3bf 8f4f 	dsb	sy
  401f70:	b662      	cpsie	i
  401f72:	e7fe      	b.n	401f72 <vTaskDelay+0x1e>
			portYIELD_WITHIN_API();
  401f74:	4b14      	ldr	r3, [pc, #80]	; (401fc8 <vTaskDelay+0x74>)
  401f76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401f7a:	601a      	str	r2, [r3, #0]
  401f7c:	f3bf 8f4f 	dsb	sy
  401f80:	f3bf 8f6f 	isb	sy
  401f84:	bd38      	pop	{r3, r4, r5, pc}
	++uxSchedulerSuspended;
  401f86:	681a      	ldr	r2, [r3, #0]
  401f88:	4604      	mov	r4, r0
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401f8a:	4d10      	ldr	r5, [pc, #64]	; (401fcc <vTaskDelay+0x78>)
				xTimeToWake = xTickCount + xTicksToDelay;
  401f8c:	4810      	ldr	r0, [pc, #64]	; (401fd0 <vTaskDelay+0x7c>)
	++uxSchedulerSuspended;
  401f8e:	3201      	adds	r2, #1
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401f90:	4910      	ldr	r1, [pc, #64]	; (401fd4 <vTaskDelay+0x80>)
	++uxSchedulerSuspended;
  401f92:	601a      	str	r2, [r3, #0]
				xTimeToWake = xTickCount + xTicksToDelay;
  401f94:	6803      	ldr	r3, [r0, #0]
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401f96:	6828      	ldr	r0, [r5, #0]
				xTimeToWake = xTickCount + xTicksToDelay;
  401f98:	441c      	add	r4, r3
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401f9a:	3004      	adds	r0, #4
  401f9c:	4788      	blx	r1
  401f9e:	b940      	cbnz	r0, 401fb2 <vTaskDelay+0x5e>
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  401fa0:	682b      	ldr	r3, [r5, #0]
  401fa2:	2201      	movs	r2, #1
  401fa4:	490c      	ldr	r1, [pc, #48]	; (401fd8 <vTaskDelay+0x84>)
  401fa6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  401fa8:	680b      	ldr	r3, [r1, #0]
  401faa:	4082      	lsls	r2, r0
  401fac:	ea23 0302 	bic.w	r3, r3, r2
  401fb0:	600b      	str	r3, [r1, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  401fb2:	4b0a      	ldr	r3, [pc, #40]	; (401fdc <vTaskDelay+0x88>)
  401fb4:	4620      	mov	r0, r4
  401fb6:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  401fb8:	4b09      	ldr	r3, [pc, #36]	; (401fe0 <vTaskDelay+0x8c>)
  401fba:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  401fbc:	2800      	cmp	r0, #0
  401fbe:	d0d9      	beq.n	401f74 <vTaskDelay+0x20>
  401fc0:	bd38      	pop	{r3, r4, r5, pc}
  401fc2:	bf00      	nop
  401fc4:	20400ad0 	.word	0x20400ad0
  401fc8:	e000ed04 	.word	0xe000ed04
  401fcc:	20400a58 	.word	0x20400a58
  401fd0:	20400b50 	.word	0x20400b50
  401fd4:	00400cb9 	.word	0x00400cb9
  401fd8:	20400adc 	.word	0x20400adc
  401fdc:	0040194d 	.word	0x0040194d
  401fe0:	00401e35 	.word	0x00401e35

00401fe4 <prvIdleTask>:
{
  401fe4:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
  401fe8:	4c1e      	ldr	r4, [pc, #120]	; (402064 <prvIdleTask+0x80>)
  401fea:	4e1f      	ldr	r6, [pc, #124]	; (402068 <prvIdleTask+0x84>)
  401fec:	4f1f      	ldr	r7, [pc, #124]	; (40206c <prvIdleTask+0x88>)
  401fee:	f8df 9094 	ldr.w	r9, [pc, #148]	; 402084 <prvIdleTask+0xa0>
  401ff2:	f8df 8094 	ldr.w	r8, [pc, #148]	; 402088 <prvIdleTask+0xa4>
  401ff6:	4d1e      	ldr	r5, [pc, #120]	; (402070 <prvIdleTask+0x8c>)
  401ff8:	f8df a090 	ldr.w	sl, [pc, #144]	; 40208c <prvIdleTask+0xa8>
  401ffc:	e008      	b.n	402010 <prvIdleTask+0x2c>
	++uxSchedulerSuspended;
  401ffe:	6823      	ldr	r3, [r4, #0]
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  402000:	f8d6 b000 	ldr.w	fp, [r6]
	++uxSchedulerSuspended;
  402004:	3301      	adds	r3, #1
  402006:	6023      	str	r3, [r4, #0]
			( void ) xTaskResumeAll();
  402008:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
  40200a:	f1bb 0f00 	cmp.w	fp, #0
  40200e:	d10f      	bne.n	402030 <prvIdleTask+0x4c>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  402010:	682b      	ldr	r3, [r5, #0]
  402012:	2b00      	cmp	r3, #0
  402014:	d1f3      	bne.n	401ffe <prvIdleTask+0x1a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  402016:	f8da 3000 	ldr.w	r3, [sl]
  40201a:	2b01      	cmp	r3, #1
  40201c:	d9f8      	bls.n	402010 <prvIdleTask+0x2c>
				taskYIELD();
  40201e:	4b15      	ldr	r3, [pc, #84]	; (402074 <prvIdleTask+0x90>)
  402020:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402024:	601a      	str	r2, [r3, #0]
  402026:	f3bf 8f4f 	dsb	sy
  40202a:	f3bf 8f6f 	isb	sy
  40202e:	e7ef      	b.n	402010 <prvIdleTask+0x2c>
				taskENTER_CRITICAL();
  402030:	4b11      	ldr	r3, [pc, #68]	; (402078 <prvIdleTask+0x94>)
  402032:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  402034:	68f3      	ldr	r3, [r6, #12]
  402036:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  40203a:	4b10      	ldr	r3, [pc, #64]	; (40207c <prvIdleTask+0x98>)
  40203c:	f10b 0004 	add.w	r0, fp, #4
  402040:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  402042:	f8d9 3000 	ldr.w	r3, [r9]
  402046:	3b01      	subs	r3, #1
  402048:	f8c9 3000 	str.w	r3, [r9]
					--uxTasksDeleted;
  40204c:	682b      	ldr	r3, [r5, #0]
  40204e:	3b01      	subs	r3, #1
  402050:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
  402052:	4b0b      	ldr	r3, [pc, #44]	; (402080 <prvIdleTask+0x9c>)
  402054:	4798      	blx	r3
			vPortFreeAligned( pxTCB->pxStack );
  402056:	f8db 0030 	ldr.w	r0, [fp, #48]	; 0x30
  40205a:	47c0      	blx	r8
		vPortFree( pxTCB );
  40205c:	4658      	mov	r0, fp
  40205e:	47c0      	blx	r8
  402060:	e7d6      	b.n	402010 <prvIdleTask+0x2c>
  402062:	bf00      	nop
  402064:	20400ad0 	.word	0x20400ad0
  402068:	20400b3c 	.word	0x20400b3c
  40206c:	00401e35 	.word	0x00401e35
  402070:	20400ad8 	.word	0x20400ad8
  402074:	e000ed04 	.word	0xe000ed04
  402078:	00400d9d 	.word	0x00400d9d
  40207c:	00400cb9 	.word	0x00400cb9
  402080:	00400de9 	.word	0x00400de9
  402084:	20400ac8 	.word	0x20400ac8
  402088:	00401021 	.word	0x00401021
  40208c:	20400a64 	.word	0x20400a64

00402090 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  402090:	4b25      	ldr	r3, [pc, #148]	; (402128 <vTaskSwitchContext+0x98>)
  402092:	681b      	ldr	r3, [r3, #0]
  402094:	2b00      	cmp	r3, #0
  402096:	d135      	bne.n	402104 <vTaskSwitchContext+0x74>
		xYieldPending = pdFALSE;
  402098:	4a24      	ldr	r2, [pc, #144]	; (40212c <vTaskSwitchContext+0x9c>)
{
  40209a:	b510      	push	{r4, lr}
		taskCHECK_FOR_STACK_OVERFLOW();
  40209c:	4c24      	ldr	r4, [pc, #144]	; (402130 <vTaskSwitchContext+0xa0>)
		xYieldPending = pdFALSE;
  40209e:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  4020a0:	6823      	ldr	r3, [r4, #0]
  4020a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4020a4:	681a      	ldr	r2, [r3, #0]
  4020a6:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4020aa:	d103      	bne.n	4020b4 <vTaskSwitchContext+0x24>
  4020ac:	685a      	ldr	r2, [r3, #4]
  4020ae:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4020b2:	d02b      	beq.n	40210c <vTaskSwitchContext+0x7c>
  4020b4:	6820      	ldr	r0, [r4, #0]
  4020b6:	6821      	ldr	r1, [r4, #0]
  4020b8:	4b1e      	ldr	r3, [pc, #120]	; (402134 <vTaskSwitchContext+0xa4>)
  4020ba:	3134      	adds	r1, #52	; 0x34
  4020bc:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  4020be:	4b1e      	ldr	r3, [pc, #120]	; (402138 <vTaskSwitchContext+0xa8>)
  4020c0:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  4020c2:	fab3 f383 	clz	r3, r3
  4020c6:	b2db      	uxtb	r3, r3
  4020c8:	4a1c      	ldr	r2, [pc, #112]	; (40213c <vTaskSwitchContext+0xac>)
  4020ca:	f1c3 031f 	rsb	r3, r3, #31
  4020ce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4020d2:	009b      	lsls	r3, r3, #2
  4020d4:	58d0      	ldr	r0, [r2, r3]
  4020d6:	18d1      	adds	r1, r2, r3
  4020d8:	b950      	cbnz	r0, 4020f0 <vTaskSwitchContext+0x60>
	__asm volatile
  4020da:	f04f 0380 	mov.w	r3, #128	; 0x80
  4020de:	b672      	cpsid	i
  4020e0:	f383 8811 	msr	BASEPRI, r3
  4020e4:	f3bf 8f6f 	isb	sy
  4020e8:	f3bf 8f4f 	dsb	sy
  4020ec:	b662      	cpsie	i
  4020ee:	e7fe      	b.n	4020ee <vTaskSwitchContext+0x5e>
  4020f0:	3308      	adds	r3, #8
  4020f2:	6848      	ldr	r0, [r1, #4]
  4020f4:	441a      	add	r2, r3
  4020f6:	6843      	ldr	r3, [r0, #4]
  4020f8:	4293      	cmp	r3, r2
  4020fa:	604b      	str	r3, [r1, #4]
  4020fc:	d00f      	beq.n	40211e <vTaskSwitchContext+0x8e>
  4020fe:	68db      	ldr	r3, [r3, #12]
  402100:	6023      	str	r3, [r4, #0]
  402102:	bd10      	pop	{r4, pc}
		xYieldPending = pdTRUE;
  402104:	4b09      	ldr	r3, [pc, #36]	; (40212c <vTaskSwitchContext+0x9c>)
  402106:	2201      	movs	r2, #1
  402108:	601a      	str	r2, [r3, #0]
  40210a:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  40210c:	689a      	ldr	r2, [r3, #8]
  40210e:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402112:	d1cf      	bne.n	4020b4 <vTaskSwitchContext+0x24>
  402114:	68db      	ldr	r3, [r3, #12]
  402116:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  40211a:	d1cb      	bne.n	4020b4 <vTaskSwitchContext+0x24>
  40211c:	e7cf      	b.n	4020be <vTaskSwitchContext+0x2e>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  40211e:	685b      	ldr	r3, [r3, #4]
  402120:	604b      	str	r3, [r1, #4]
  402122:	68db      	ldr	r3, [r3, #12]
  402124:	6023      	str	r3, [r4, #0]
  402126:	bd10      	pop	{r4, pc}
  402128:	20400ad0 	.word	0x20400ad0
  40212c:	20400b54 	.word	0x20400b54
  402130:	20400a58 	.word	0x20400a58
  402134:	00402d1d 	.word	0x00402d1d
  402138:	20400adc 	.word	0x20400adc
  40213c:	20400a64 	.word	0x20400a64

00402140 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
  402140:	b1e8      	cbz	r0, 40217e <vTaskPlaceOnEventList+0x3e>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  402142:	4b18      	ldr	r3, [pc, #96]	; (4021a4 <vTaskPlaceOnEventList+0x64>)
{
  402144:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  402146:	4d18      	ldr	r5, [pc, #96]	; (4021a8 <vTaskPlaceOnEventList+0x68>)
  402148:	460c      	mov	r4, r1
  40214a:	6829      	ldr	r1, [r5, #0]
  40214c:	3118      	adds	r1, #24
  40214e:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402150:	6828      	ldr	r0, [r5, #0]
  402152:	4b16      	ldr	r3, [pc, #88]	; (4021ac <vTaskPlaceOnEventList+0x6c>)
  402154:	3004      	adds	r0, #4
  402156:	4798      	blx	r3
  402158:	b940      	cbnz	r0, 40216c <vTaskPlaceOnEventList+0x2c>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  40215a:	682b      	ldr	r3, [r5, #0]
  40215c:	2201      	movs	r2, #1
  40215e:	4914      	ldr	r1, [pc, #80]	; (4021b0 <vTaskPlaceOnEventList+0x70>)
  402160:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  402162:	680b      	ldr	r3, [r1, #0]
  402164:	4082      	lsls	r2, r0
  402166:	ea23 0302 	bic.w	r3, r3, r2
  40216a:	600b      	str	r3, [r1, #0]
		if( xTicksToWait == portMAX_DELAY )
  40216c:	1c63      	adds	r3, r4, #1
  40216e:	d011      	beq.n	402194 <vTaskPlaceOnEventList+0x54>
			xTimeToWake = xTickCount + xTicksToWait;
  402170:	4a10      	ldr	r2, [pc, #64]	; (4021b4 <vTaskPlaceOnEventList+0x74>)
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  402172:	4b11      	ldr	r3, [pc, #68]	; (4021b8 <vTaskPlaceOnEventList+0x78>)
			xTimeToWake = xTickCount + xTicksToWait;
  402174:	6810      	ldr	r0, [r2, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  402176:	4420      	add	r0, r4
}
  402178:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  40217c:	4718      	bx	r3
  40217e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402182:	b672      	cpsid	i
  402184:	f383 8811 	msr	BASEPRI, r3
  402188:	f3bf 8f6f 	isb	sy
  40218c:	f3bf 8f4f 	dsb	sy
  402190:	b662      	cpsie	i
  402192:	e7fe      	b.n	402192 <vTaskPlaceOnEventList+0x52>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402194:	6829      	ldr	r1, [r5, #0]
  402196:	4809      	ldr	r0, [pc, #36]	; (4021bc <vTaskPlaceOnEventList+0x7c>)
  402198:	3104      	adds	r1, #4
  40219a:	4b09      	ldr	r3, [pc, #36]	; (4021c0 <vTaskPlaceOnEventList+0x80>)
}
  40219c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4021a0:	4718      	bx	r3
  4021a2:	bf00      	nop
  4021a4:	00400c85 	.word	0x00400c85
  4021a8:	20400a58 	.word	0x20400a58
  4021ac:	00400cb9 	.word	0x00400cb9
  4021b0:	20400adc 	.word	0x20400adc
  4021b4:	20400b50 	.word	0x20400b50
  4021b8:	0040194d 	.word	0x0040194d
  4021bc:	20400b28 	.word	0x20400b28
  4021c0:	00400c6d 	.word	0x00400c6d

004021c4 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
  4021c4:	b1f8      	cbz	r0, 402206 <vTaskPlaceOnEventListRestricted+0x42>
	{
  4021c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  4021ca:	4c18      	ldr	r4, [pc, #96]	; (40222c <vTaskPlaceOnEventListRestricted+0x68>)
  4021cc:	460d      	mov	r5, r1
  4021ce:	4f18      	ldr	r7, [pc, #96]	; (402230 <vTaskPlaceOnEventListRestricted+0x6c>)
  4021d0:	4616      	mov	r6, r2
  4021d2:	6821      	ldr	r1, [r4, #0]
  4021d4:	3118      	adds	r1, #24
  4021d6:	47b8      	blx	r7
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4021d8:	6820      	ldr	r0, [r4, #0]
  4021da:	4b16      	ldr	r3, [pc, #88]	; (402234 <vTaskPlaceOnEventListRestricted+0x70>)
  4021dc:	3004      	adds	r0, #4
  4021de:	4798      	blx	r3
  4021e0:	b940      	cbnz	r0, 4021f4 <vTaskPlaceOnEventListRestricted+0x30>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  4021e2:	6823      	ldr	r3, [r4, #0]
  4021e4:	2201      	movs	r2, #1
  4021e6:	4914      	ldr	r1, [pc, #80]	; (402238 <vTaskPlaceOnEventListRestricted+0x74>)
  4021e8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  4021ea:	680b      	ldr	r3, [r1, #0]
  4021ec:	4082      	lsls	r2, r0
  4021ee:	ea23 0302 	bic.w	r3, r3, r2
  4021f2:	600b      	str	r3, [r1, #0]
			if( xWaitIndefinitely == pdTRUE )
  4021f4:	2e01      	cmp	r6, #1
  4021f6:	d011      	beq.n	40221c <vTaskPlaceOnEventListRestricted+0x58>
				xTimeToWake = xTickCount + xTicksToWait;
  4021f8:	4a10      	ldr	r2, [pc, #64]	; (40223c <vTaskPlaceOnEventListRestricted+0x78>)
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  4021fa:	4b11      	ldr	r3, [pc, #68]	; (402240 <vTaskPlaceOnEventListRestricted+0x7c>)
				xTimeToWake = xTickCount + xTicksToWait;
  4021fc:	6810      	ldr	r0, [r2, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  4021fe:	4428      	add	r0, r5
	}
  402200:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  402204:	4718      	bx	r3
  402206:	f04f 0380 	mov.w	r3, #128	; 0x80
  40220a:	b672      	cpsid	i
  40220c:	f383 8811 	msr	BASEPRI, r3
  402210:	f3bf 8f6f 	isb	sy
  402214:	f3bf 8f4f 	dsb	sy
  402218:	b662      	cpsie	i
  40221a:	e7fe      	b.n	40221a <vTaskPlaceOnEventListRestricted+0x56>
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  40221c:	6821      	ldr	r1, [r4, #0]
  40221e:	463b      	mov	r3, r7
  402220:	4808      	ldr	r0, [pc, #32]	; (402244 <vTaskPlaceOnEventListRestricted+0x80>)
  402222:	3104      	adds	r1, #4
	}
  402224:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402228:	4718      	bx	r3
  40222a:	bf00      	nop
  40222c:	20400a58 	.word	0x20400a58
  402230:	00400c6d 	.word	0x00400c6d
  402234:	00400cb9 	.word	0x00400cb9
  402238:	20400adc 	.word	0x20400adc
  40223c:	20400b50 	.word	0x20400b50
  402240:	0040194d 	.word	0x0040194d
  402244:	20400b28 	.word	0x20400b28

00402248 <xTaskRemoveFromEventList>:
{
  402248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  40224a:	68c3      	ldr	r3, [r0, #12]
  40224c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  40224e:	b31c      	cbz	r4, 402298 <xTaskRemoveFromEventList+0x50>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  402250:	f104 0518 	add.w	r5, r4, #24
  402254:	4f19      	ldr	r7, [pc, #100]	; (4022bc <xTaskRemoveFromEventList+0x74>)
  402256:	4628      	mov	r0, r5
  402258:	47b8      	blx	r7
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40225a:	4b19      	ldr	r3, [pc, #100]	; (4022c0 <xTaskRemoveFromEventList+0x78>)
  40225c:	681b      	ldr	r3, [r3, #0]
  40225e:	bb43      	cbnz	r3, 4022b2 <xTaskRemoveFromEventList+0x6a>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  402260:	1d26      	adds	r6, r4, #4
		prvAddTaskToReadyList( pxUnblockedTCB );
  402262:	4d18      	ldr	r5, [pc, #96]	; (4022c4 <xTaskRemoveFromEventList+0x7c>)
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  402264:	4630      	mov	r0, r6
  402266:	47b8      	blx	r7
		prvAddTaskToReadyList( pxUnblockedTCB );
  402268:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40226a:	2301      	movs	r3, #1
  40226c:	4816      	ldr	r0, [pc, #88]	; (4022c8 <xTaskRemoveFromEventList+0x80>)
  40226e:	eb02 0782 	add.w	r7, r2, r2, lsl #2
  402272:	4631      	mov	r1, r6
  402274:	4093      	lsls	r3, r2
  402276:	682a      	ldr	r2, [r5, #0]
  402278:	eb00 0087 	add.w	r0, r0, r7, lsl #2
  40227c:	4313      	orrs	r3, r2
  40227e:	4a13      	ldr	r2, [pc, #76]	; (4022cc <xTaskRemoveFromEventList+0x84>)
  402280:	602b      	str	r3, [r5, #0]
  402282:	4790      	blx	r2
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  402284:	4b12      	ldr	r3, [pc, #72]	; (4022d0 <xTaskRemoveFromEventList+0x88>)
  402286:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402288:	681b      	ldr	r3, [r3, #0]
  40228a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40228c:	429a      	cmp	r2, r3
  40228e:	d90e      	bls.n	4022ae <xTaskRemoveFromEventList+0x66>
		xYieldPending = pdTRUE;
  402290:	4b10      	ldr	r3, [pc, #64]	; (4022d4 <xTaskRemoveFromEventList+0x8c>)
  402292:	2001      	movs	r0, #1
  402294:	6018      	str	r0, [r3, #0]
  402296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402298:	f04f 0380 	mov.w	r3, #128	; 0x80
  40229c:	b672      	cpsid	i
  40229e:	f383 8811 	msr	BASEPRI, r3
  4022a2:	f3bf 8f6f 	isb	sy
  4022a6:	f3bf 8f4f 	dsb	sy
  4022aa:	b662      	cpsie	i
  4022ac:	e7fe      	b.n	4022ac <xTaskRemoveFromEventList+0x64>
		xReturn = pdFALSE;
  4022ae:	2000      	movs	r0, #0
}
  4022b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  4022b2:	4629      	mov	r1, r5
  4022b4:	4808      	ldr	r0, [pc, #32]	; (4022d8 <xTaskRemoveFromEventList+0x90>)
  4022b6:	4b05      	ldr	r3, [pc, #20]	; (4022cc <xTaskRemoveFromEventList+0x84>)
  4022b8:	4798      	blx	r3
  4022ba:	e7e3      	b.n	402284 <xTaskRemoveFromEventList+0x3c>
  4022bc:	00400cb9 	.word	0x00400cb9
  4022c0:	20400ad0 	.word	0x20400ad0
  4022c4:	20400adc 	.word	0x20400adc
  4022c8:	20400a64 	.word	0x20400a64
  4022cc:	00400c6d 	.word	0x00400c6d
  4022d0:	20400a58 	.word	0x20400a58
  4022d4:	20400b54 	.word	0x20400b54
  4022d8:	20400b10 	.word	0x20400b10

004022dc <vTaskSetTimeOutState>:
{
  4022dc:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
  4022de:	b130      	cbz	r0, 4022ee <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  4022e0:	4a04      	ldr	r2, [pc, #16]	; (4022f4 <vTaskSetTimeOutState+0x18>)
	pxTimeOut->xTimeOnEntering = xTickCount;
  4022e2:	4b05      	ldr	r3, [pc, #20]	; (4022f8 <vTaskSetTimeOutState+0x1c>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  4022e4:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  4022e6:	681b      	ldr	r3, [r3, #0]
  4022e8:	e880 000c 	stmia.w	r0, {r2, r3}
  4022ec:	bd08      	pop	{r3, pc}
  4022ee:	4b03      	ldr	r3, [pc, #12]	; (4022fc <vTaskSetTimeOutState+0x20>)
  4022f0:	4798      	blx	r3
  4022f2:	bf00      	nop
  4022f4:	20400b0c 	.word	0x20400b0c
  4022f8:	20400b50 	.word	0x20400b50
  4022fc:	00401bb1 	.word	0x00401bb1

00402300 <xTaskCheckForTimeOut>:
{
  402300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
  402302:	2800      	cmp	r0, #0
  402304:	d030      	beq.n	402368 <xTaskCheckForTimeOut+0x68>
	configASSERT( pxTicksToWait );
  402306:	b321      	cbz	r1, 402352 <xTaskCheckForTimeOut+0x52>
  402308:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  40230a:	4b1f      	ldr	r3, [pc, #124]	; (402388 <xTaskCheckForTimeOut+0x88>)
  40230c:	4604      	mov	r4, r0
  40230e:	4798      	blx	r3
			if( *pxTicksToWait == portMAX_DELAY )
  402310:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
  402312:	481e      	ldr	r0, [pc, #120]	; (40238c <xTaskCheckForTimeOut+0x8c>)
			if( *pxTicksToWait == portMAX_DELAY )
  402314:	1c5a      	adds	r2, r3, #1
		const TickType_t xConstTickCount = xTickCount;
  402316:	6801      	ldr	r1, [r0, #0]
			if( *pxTicksToWait == portMAX_DELAY )
  402318:	d031      	beq.n	40237e <xTaskCheckForTimeOut+0x7e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  40231a:	4e1d      	ldr	r6, [pc, #116]	; (402390 <xTaskCheckForTimeOut+0x90>)
  40231c:	6827      	ldr	r7, [r4, #0]
  40231e:	6832      	ldr	r2, [r6, #0]
  402320:	4297      	cmp	r7, r2
  402322:	6862      	ldr	r2, [r4, #4]
  402324:	d006      	beq.n	402334 <xTaskCheckForTimeOut+0x34>
  402326:	4291      	cmp	r1, r2
  402328:	d304      	bcc.n	402334 <xTaskCheckForTimeOut+0x34>
			xReturn = pdTRUE;
  40232a:	2601      	movs	r6, #1
	taskEXIT_CRITICAL();
  40232c:	4b19      	ldr	r3, [pc, #100]	; (402394 <xTaskCheckForTimeOut+0x94>)
  40232e:	4798      	blx	r3
}
  402330:	4630      	mov	r0, r6
  402332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  402334:	1a8f      	subs	r7, r1, r2
  402336:	42bb      	cmp	r3, r7
  402338:	d9f7      	bls.n	40232a <xTaskCheckForTimeOut+0x2a>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  40233a:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  40233c:	6837      	ldr	r7, [r6, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  40233e:	6801      	ldr	r1, [r0, #0]
			xReturn = pdFALSE;
  402340:	2600      	movs	r6, #0
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  402342:	4413      	add	r3, r2
  402344:	602b      	str	r3, [r5, #0]
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  402346:	6027      	str	r7, [r4, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  402348:	6061      	str	r1, [r4, #4]
	taskEXIT_CRITICAL();
  40234a:	4b12      	ldr	r3, [pc, #72]	; (402394 <xTaskCheckForTimeOut+0x94>)
  40234c:	4798      	blx	r3
}
  40234e:	4630      	mov	r0, r6
  402350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402352:	f04f 0380 	mov.w	r3, #128	; 0x80
  402356:	b672      	cpsid	i
  402358:	f383 8811 	msr	BASEPRI, r3
  40235c:	f3bf 8f6f 	isb	sy
  402360:	f3bf 8f4f 	dsb	sy
  402364:	b662      	cpsie	i
  402366:	e7fe      	b.n	402366 <xTaskCheckForTimeOut+0x66>
  402368:	f04f 0380 	mov.w	r3, #128	; 0x80
  40236c:	b672      	cpsid	i
  40236e:	f383 8811 	msr	BASEPRI, r3
  402372:	f3bf 8f6f 	isb	sy
  402376:	f3bf 8f4f 	dsb	sy
  40237a:	b662      	cpsie	i
  40237c:	e7fe      	b.n	40237c <xTaskCheckForTimeOut+0x7c>
				xReturn = pdFALSE;
  40237e:	2600      	movs	r6, #0
	taskEXIT_CRITICAL();
  402380:	4b04      	ldr	r3, [pc, #16]	; (402394 <xTaskCheckForTimeOut+0x94>)
  402382:	4798      	blx	r3
}
  402384:	4630      	mov	r0, r6
  402386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402388:	00400d9d 	.word	0x00400d9d
  40238c:	20400b50 	.word	0x20400b50
  402390:	20400b0c 	.word	0x20400b0c
  402394:	00400de9 	.word	0x00400de9

00402398 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  402398:	4b01      	ldr	r3, [pc, #4]	; (4023a0 <vTaskMissedYield+0x8>)
  40239a:	2201      	movs	r2, #1
  40239c:	601a      	str	r2, [r3, #0]
  40239e:	4770      	bx	lr
  4023a0:	20400b54 	.word	0x20400b54

004023a4 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  4023a4:	4b05      	ldr	r3, [pc, #20]	; (4023bc <xTaskGetSchedulerState+0x18>)
  4023a6:	681b      	ldr	r3, [r3, #0]
  4023a8:	b133      	cbz	r3, 4023b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4023aa:	4b05      	ldr	r3, [pc, #20]	; (4023c0 <xTaskGetSchedulerState+0x1c>)
  4023ac:	681b      	ldr	r3, [r3, #0]
  4023ae:	2b00      	cmp	r3, #0
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  4023b0:	bf0c      	ite	eq
  4023b2:	2002      	moveq	r0, #2
  4023b4:	2000      	movne	r0, #0
  4023b6:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  4023b8:	2001      	movs	r0, #1
			}
		}

		return xReturn;
	}
  4023ba:	4770      	bx	lr
  4023bc:	20400b24 	.word	0x20400b24
  4023c0:	20400ad0 	.word	0x20400ad0

004023c4 <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  4023c4:	2800      	cmp	r0, #0
  4023c6:	d046      	beq.n	402456 <vTaskPriorityInherit+0x92>
	{
  4023c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  4023cc:	4c22      	ldr	r4, [pc, #136]	; (402458 <vTaskPriorityInherit+0x94>)
  4023ce:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  4023d0:	6822      	ldr	r2, [r4, #0]
  4023d2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  4023d4:	4293      	cmp	r3, r2
  4023d6:	d212      	bcs.n	4023fe <vTaskPriorityInherit+0x3a>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  4023d8:	6982      	ldr	r2, [r0, #24]
  4023da:	2a00      	cmp	r2, #0
  4023dc:	db04      	blt.n	4023e8 <vTaskPriorityInherit+0x24>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4023de:	6822      	ldr	r2, [r4, #0]
  4023e0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  4023e2:	f1c2 0205 	rsb	r2, r2, #5
  4023e6:	6182      	str	r2, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  4023e8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4023ec:	4d1b      	ldr	r5, [pc, #108]	; (40245c <vTaskPriorityInherit+0x98>)
  4023ee:	6942      	ldr	r2, [r0, #20]
  4023f0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  4023f4:	429a      	cmp	r2, r3
  4023f6:	d004      	beq.n	402402 <vTaskPriorityInherit+0x3e>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  4023f8:	6823      	ldr	r3, [r4, #0]
  4023fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4023fc:	62c3      	str	r3, [r0, #44]	; 0x2c
  4023fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402402:	1d07      	adds	r7, r0, #4
  402404:	4606      	mov	r6, r0
  402406:	4b16      	ldr	r3, [pc, #88]	; (402460 <vTaskPriorityInherit+0x9c>)
  402408:	4638      	mov	r0, r7
  40240a:	4798      	blx	r3
  40240c:	bb08      	cbnz	r0, 402452 <vTaskPriorityInherit+0x8e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  40240e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
  402410:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  402414:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  402418:	b9da      	cbnz	r2, 402452 <vTaskPriorityInherit+0x8e>
  40241a:	4a12      	ldr	r2, [pc, #72]	; (402464 <vTaskPriorityInherit+0xa0>)
  40241c:	2001      	movs	r0, #1
  40241e:	6811      	ldr	r1, [r2, #0]
  402420:	fa00 f303 	lsl.w	r3, r0, r3
  402424:	ea21 0303 	bic.w	r3, r1, r3
  402428:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  40242a:	6820      	ldr	r0, [r4, #0]
					prvAddTaskToReadyList( pxTCB );
  40242c:	2301      	movs	r3, #1
  40242e:	f8d2 e000 	ldr.w	lr, [r2]
  402432:	4639      	mov	r1, r7
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  402434:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  402436:	4c0c      	ldr	r4, [pc, #48]	; (402468 <vTaskPriorityInherit+0xa4>)
  402438:	4083      	lsls	r3, r0
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  40243a:	62f0      	str	r0, [r6, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  40243c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402440:	ea43 030e 	orr.w	r3, r3, lr
  402444:	eb05 0080 	add.w	r0, r5, r0, lsl #2
  402448:	6013      	str	r3, [r2, #0]
  40244a:	4623      	mov	r3, r4
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
  40244c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					prvAddTaskToReadyList( pxTCB );
  402450:	4718      	bx	r3
  402452:	4a04      	ldr	r2, [pc, #16]	; (402464 <vTaskPriorityInherit+0xa0>)
  402454:	e7e9      	b.n	40242a <vTaskPriorityInherit+0x66>
  402456:	4770      	bx	lr
  402458:	20400a58 	.word	0x20400a58
  40245c:	20400a64 	.word	0x20400a64
  402460:	00400cb9 	.word	0x00400cb9
  402464:	20400adc 	.word	0x20400adc
  402468:	00400c6d 	.word	0x00400c6d

0040246c <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  40246c:	2800      	cmp	r0, #0
  40246e:	d042      	beq.n	4024f6 <xTaskPriorityDisinherit+0x8a>
	{
  402470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  402472:	4b2b      	ldr	r3, [pc, #172]	; (402520 <xTaskPriorityDisinherit+0xb4>)
  402474:	681b      	ldr	r3, [r3, #0]
  402476:	4298      	cmp	r0, r3
  402478:	d00a      	beq.n	402490 <xTaskPriorityDisinherit+0x24>
  40247a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40247e:	b672      	cpsid	i
  402480:	f383 8811 	msr	BASEPRI, r3
  402484:	f3bf 8f6f 	isb	sy
  402488:	f3bf 8f4f 	dsb	sy
  40248c:	b662      	cpsie	i
  40248e:	e7fe      	b.n	40248e <xTaskPriorityDisinherit+0x22>

			configASSERT( pxTCB->uxMutexesHeld );
  402490:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  402492:	b953      	cbnz	r3, 4024aa <xTaskPriorityDisinherit+0x3e>
  402494:	f04f 0380 	mov.w	r3, #128	; 0x80
  402498:	b672      	cpsid	i
  40249a:	f383 8811 	msr	BASEPRI, r3
  40249e:	f3bf 8f6f 	isb	sy
  4024a2:	f3bf 8f4f 	dsb	sy
  4024a6:	b662      	cpsie	i
  4024a8:	e7fe      	b.n	4024a8 <xTaskPriorityDisinherit+0x3c>
			( pxTCB->uxMutexesHeld )--;

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  4024aa:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
  4024ac:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  4024ae:	6c82      	ldr	r2, [r0, #72]	; 0x48
			( pxTCB->uxMutexesHeld )--;
  4024b0:	64c3      	str	r3, [r0, #76]	; 0x4c
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  4024b2:	4291      	cmp	r1, r2
  4024b4:	d031      	beq.n	40251a <xTaskPriorityDisinherit+0xae>
  4024b6:	2b00      	cmp	r3, #0
  4024b8:	d12f      	bne.n	40251a <xTaskPriorityDisinherit+0xae>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4024ba:	1d07      	adds	r7, r0, #4
  4024bc:	4604      	mov	r4, r0
  4024be:	4b19      	ldr	r3, [pc, #100]	; (402524 <xTaskPriorityDisinherit+0xb8>)
  4024c0:	4638      	mov	r0, r7
  4024c2:	4798      	blx	r3
  4024c4:	b1c8      	cbz	r0, 4024fa <xTaskPriorityDisinherit+0x8e>
  4024c6:	4818      	ldr	r0, [pc, #96]	; (402528 <xTaskPriorityDisinherit+0xbc>)
  4024c8:	4a18      	ldr	r2, [pc, #96]	; (40252c <xTaskPriorityDisinherit+0xc0>)
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  4024ca:	6ca3      	ldr	r3, [r4, #72]	; 0x48

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
					prvAddTaskToReadyList( pxTCB );
  4024cc:	2501      	movs	r5, #1
  4024ce:	f8d2 e000 	ldr.w	lr, [r2]
  4024d2:	4639      	mov	r1, r7
  4024d4:	fa05 f603 	lsl.w	r6, r5, r3
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4024d8:	f1c3 0705 	rsb	r7, r3, #5
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  4024dc:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  4024de:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4024e2:	ea46 060e 	orr.w	r6, r6, lr
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4024e6:	61a7      	str	r7, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  4024e8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  4024ec:	4b10      	ldr	r3, [pc, #64]	; (402530 <xTaskPriorityDisinherit+0xc4>)
  4024ee:	6016      	str	r6, [r2, #0]
  4024f0:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  4024f2:	4628      	mov	r0, r5
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  4024f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	BaseType_t xReturn = pdFALSE;
  4024f6:	2000      	movs	r0, #0
	}
  4024f8:	4770      	bx	lr
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  4024fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  4024fc:	480a      	ldr	r0, [pc, #40]	; (402528 <xTaskPriorityDisinherit+0xbc>)
  4024fe:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  402502:	4a0a      	ldr	r2, [pc, #40]	; (40252c <xTaskPriorityDisinherit+0xc0>)
  402504:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
  402508:	2b00      	cmp	r3, #0
  40250a:	d1de      	bne.n	4024ca <xTaskPriorityDisinherit+0x5e>
  40250c:	2501      	movs	r5, #1
  40250e:	6813      	ldr	r3, [r2, #0]
  402510:	40b5      	lsls	r5, r6
  402512:	ea23 0305 	bic.w	r3, r3, r5
  402516:	6013      	str	r3, [r2, #0]
  402518:	e7d7      	b.n	4024ca <xTaskPriorityDisinherit+0x5e>
	BaseType_t xReturn = pdFALSE;
  40251a:	2000      	movs	r0, #0
  40251c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40251e:	bf00      	nop
  402520:	20400a58 	.word	0x20400a58
  402524:	00400cb9 	.word	0x00400cb9
  402528:	20400a64 	.word	0x20400a64
  40252c:	20400adc 	.word	0x20400adc
  402530:	00400c6d 	.word	0x00400c6d

00402534 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  402534:	4b04      	ldr	r3, [pc, #16]	; (402548 <pvTaskIncrementMutexHeldCount+0x14>)
  402536:	681a      	ldr	r2, [r3, #0]
  402538:	b11a      	cbz	r2, 402542 <pvTaskIncrementMutexHeldCount+0xe>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  40253a:	6819      	ldr	r1, [r3, #0]
  40253c:	6cca      	ldr	r2, [r1, #76]	; 0x4c
  40253e:	3201      	adds	r2, #1
  402540:	64ca      	str	r2, [r1, #76]	; 0x4c
		}

		return pxCurrentTCB;
  402542:	6818      	ldr	r0, [r3, #0]
	}
  402544:	4770      	bx	lr
  402546:	bf00      	nop
  402548:	20400a58 	.word	0x20400a58

0040254c <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
  40254c:	4291      	cmp	r1, r2
{
  40254e:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402550:	6100      	str	r0, [r0, #16]
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  402552:	6041      	str	r1, [r0, #4]
	if( xNextExpiryTime <= xTimeNow )
  402554:	d805      	bhi.n	402562 <prvInsertTimerInActiveList+0x16>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  402556:	1ad2      	subs	r2, r2, r3
  402558:	6983      	ldr	r3, [r0, #24]
  40255a:	429a      	cmp	r2, r3
  40255c:	d307      	bcc.n	40256e <prvInsertTimerInActiveList+0x22>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  40255e:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  402560:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  402562:	429a      	cmp	r2, r3
  402564:	d201      	bcs.n	40256a <prvInsertTimerInActiveList+0x1e>
  402566:	4299      	cmp	r1, r3
  402568:	d2f9      	bcs.n	40255e <prvInsertTimerInActiveList+0x12>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  40256a:	4a04      	ldr	r2, [pc, #16]	; (40257c <prvInsertTimerInActiveList+0x30>)
  40256c:	e000      	b.n	402570 <prvInsertTimerInActiveList+0x24>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  40256e:	4a04      	ldr	r2, [pc, #16]	; (402580 <prvInsertTimerInActiveList+0x34>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402570:	1d01      	adds	r1, r0, #4
  402572:	4b04      	ldr	r3, [pc, #16]	; (402584 <prvInsertTimerInActiveList+0x38>)
  402574:	6810      	ldr	r0, [r2, #0]
  402576:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  402578:	2000      	movs	r0, #0
  40257a:	bd08      	pop	{r3, pc}
  40257c:	20400b58 	.word	0x20400b58
  402580:	20400b5c 	.word	0x20400b5c
  402584:	00400c85 	.word	0x00400c85

00402588 <prvCheckForValidListAndQueue.part.1>:
  402588:	f04f 0380 	mov.w	r3, #128	; 0x80
  40258c:	b672      	cpsid	i
  40258e:	f383 8811 	msr	BASEPRI, r3
  402592:	f3bf 8f6f 	isb	sy
  402596:	f3bf 8f4f 	dsb	sy
  40259a:	b662      	cpsie	i
  40259c:	e7fe      	b.n	40259c <prvCheckForValidListAndQueue.part.1+0x14>
  40259e:	bf00      	nop

004025a0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  4025a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
  4025a4:	4c13      	ldr	r4, [pc, #76]	; (4025f4 <prvCheckForValidListAndQueue+0x54>)
	taskENTER_CRITICAL();
  4025a6:	4b14      	ldr	r3, [pc, #80]	; (4025f8 <prvCheckForValidListAndQueue+0x58>)
  4025a8:	4798      	blx	r3
		if( xTimerQueue == NULL )
  4025aa:	6827      	ldr	r7, [r4, #0]
  4025ac:	b11f      	cbz	r7, 4025b6 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  4025ae:	4b13      	ldr	r3, [pc, #76]	; (4025fc <prvCheckForValidListAndQueue+0x5c>)
}
  4025b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	taskEXIT_CRITICAL();
  4025b4:	4718      	bx	r3
			vListInitialise( &xActiveTimerList1 );
  4025b6:	4e12      	ldr	r6, [pc, #72]	; (402600 <prvCheckForValidListAndQueue+0x60>)
			vListInitialise( &xActiveTimerList2 );
  4025b8:	4d12      	ldr	r5, [pc, #72]	; (402604 <prvCheckForValidListAndQueue+0x64>)
			vListInitialise( &xActiveTimerList1 );
  4025ba:	4630      	mov	r0, r6
  4025bc:	f8df 805c 	ldr.w	r8, [pc, #92]	; 40261c <prvCheckForValidListAndQueue+0x7c>
  4025c0:	47c0      	blx	r8
			vListInitialise( &xActiveTimerList2 );
  4025c2:	4628      	mov	r0, r5
  4025c4:	47c0      	blx	r8
			pxCurrentTimerList = &xActiveTimerList1;
  4025c6:	4b10      	ldr	r3, [pc, #64]	; (402608 <prvCheckForValidListAndQueue+0x68>)
			pxOverflowTimerList = &xActiveTimerList2;
  4025c8:	f8df e054 	ldr.w	lr, [pc, #84]	; 402620 <prvCheckForValidListAndQueue+0x80>
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  4025cc:	463a      	mov	r2, r7
			pxCurrentTimerList = &xActiveTimerList1;
  4025ce:	601e      	str	r6, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  4025d0:	2110      	movs	r1, #16
  4025d2:	2005      	movs	r0, #5
  4025d4:	4b0d      	ldr	r3, [pc, #52]	; (40260c <prvCheckForValidListAndQueue+0x6c>)
			pxOverflowTimerList = &xActiveTimerList2;
  4025d6:	f8ce 5000 	str.w	r5, [lr]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  4025da:	4798      	blx	r3
  4025dc:	6020      	str	r0, [r4, #0]
			configASSERT( xTimerQueue );
  4025de:	b130      	cbz	r0, 4025ee <prvCheckForValidListAndQueue+0x4e>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  4025e0:	4b0b      	ldr	r3, [pc, #44]	; (402610 <prvCheckForValidListAndQueue+0x70>)
  4025e2:	490c      	ldr	r1, [pc, #48]	; (402614 <prvCheckForValidListAndQueue+0x74>)
  4025e4:	4798      	blx	r3
	taskEXIT_CRITICAL();
  4025e6:	4b05      	ldr	r3, [pc, #20]	; (4025fc <prvCheckForValidListAndQueue+0x5c>)
}
  4025e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	taskEXIT_CRITICAL();
  4025ec:	4718      	bx	r3
  4025ee:	4b0a      	ldr	r3, [pc, #40]	; (402618 <prvCheckForValidListAndQueue+0x78>)
  4025f0:	4798      	blx	r3
  4025f2:	bf00      	nop
  4025f4:	20400b8c 	.word	0x20400b8c
  4025f8:	00400d9d 	.word	0x00400d9d
  4025fc:	00400de9 	.word	0x00400de9
  402600:	20400b60 	.word	0x20400b60
  402604:	20400b74 	.word	0x20400b74
  402608:	20400b58 	.word	0x20400b58
  40260c:	004012cd 	.word	0x004012cd
  402610:	004018b9 	.word	0x004018b9
  402614:	00405f6c 	.word	0x00405f6c
  402618:	00402589 	.word	0x00402589
  40261c:	00400c4d 	.word	0x00400c4d
  402620:	20400b5c 	.word	0x20400b5c

00402624 <xTimerCreateTimerTask>:
{
  402624:	b510      	push	{r4, lr}
	prvCheckForValidListAndQueue();
  402626:	4b10      	ldr	r3, [pc, #64]	; (402668 <xTimerCreateTimerTask+0x44>)
{
  402628:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
  40262a:	4798      	blx	r3
	if( xTimerQueue != NULL )
  40262c:	4b0f      	ldr	r3, [pc, #60]	; (40266c <xTimerCreateTimerTask+0x48>)
  40262e:	681b      	ldr	r3, [r3, #0]
  402630:	b17b      	cbz	r3, 402652 <xTimerCreateTimerTask+0x2e>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  402632:	2000      	movs	r0, #0
  402634:	2404      	movs	r4, #4
  402636:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40263a:	490d      	ldr	r1, [pc, #52]	; (402670 <xTimerCreateTimerTask+0x4c>)
  40263c:	9003      	str	r0, [sp, #12]
  40263e:	4603      	mov	r3, r0
  402640:	9002      	str	r0, [sp, #8]
  402642:	9001      	str	r0, [sp, #4]
  402644:	9400      	str	r4, [sp, #0]
  402646:	480b      	ldr	r0, [pc, #44]	; (402674 <xTimerCreateTimerTask+0x50>)
  402648:	4c0b      	ldr	r4, [pc, #44]	; (402678 <xTimerCreateTimerTask+0x54>)
  40264a:	47a0      	blx	r4
	configASSERT( xReturn );
  40264c:	b108      	cbz	r0, 402652 <xTimerCreateTimerTask+0x2e>
}
  40264e:	b004      	add	sp, #16
  402650:	bd10      	pop	{r4, pc}
  402652:	f04f 0380 	mov.w	r3, #128	; 0x80
  402656:	b672      	cpsid	i
  402658:	f383 8811 	msr	BASEPRI, r3
  40265c:	f3bf 8f6f 	isb	sy
  402660:	f3bf 8f4f 	dsb	sy
  402664:	b662      	cpsie	i
  402666:	e7fe      	b.n	402666 <xTimerCreateTimerTask+0x42>
  402668:	004025a1 	.word	0x004025a1
  40266c:	20400b8c 	.word	0x20400b8c
  402670:	00405f74 	.word	0x00405f74
  402674:	0040277d 	.word	0x0040277d
  402678:	00401bc9 	.word	0x00401bc9

0040267c <xTimerGenericCommand>:
{
  40267c:	b530      	push	{r4, r5, lr}
  40267e:	b085      	sub	sp, #20
	configASSERT( xTimer );
  402680:	b310      	cbz	r0, 4026c8 <xTimerGenericCommand+0x4c>
	if( xTimerQueue != NULL )
  402682:	4c12      	ldr	r4, [pc, #72]	; (4026cc <xTimerGenericCommand+0x50>)
  402684:	4605      	mov	r5, r0
  402686:	6820      	ldr	r0, [r4, #0]
  402688:	b168      	cbz	r0, 4026a6 <xTimerGenericCommand+0x2a>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  40268a:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  40268c:	e88d 0026 	stmia.w	sp, {r1, r2, r5}
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  402690:	dc0b      	bgt.n	4026aa <xTimerGenericCommand+0x2e>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  402692:	4b0f      	ldr	r3, [pc, #60]	; (4026d0 <xTimerGenericCommand+0x54>)
  402694:	4798      	blx	r3
  402696:	2802      	cmp	r0, #2
  402698:	d00e      	beq.n	4026b8 <xTimerGenericCommand+0x3c>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  40269a:	2300      	movs	r3, #0
  40269c:	6820      	ldr	r0, [r4, #0]
  40269e:	4669      	mov	r1, sp
  4026a0:	4c0c      	ldr	r4, [pc, #48]	; (4026d4 <xTimerGenericCommand+0x58>)
  4026a2:	461a      	mov	r2, r3
  4026a4:	47a0      	blx	r4
}
  4026a6:	b005      	add	sp, #20
  4026a8:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  4026aa:	461a      	mov	r2, r3
  4026ac:	4669      	mov	r1, sp
  4026ae:	2300      	movs	r3, #0
  4026b0:	4c09      	ldr	r4, [pc, #36]	; (4026d8 <xTimerGenericCommand+0x5c>)
  4026b2:	47a0      	blx	r4
}
  4026b4:	b005      	add	sp, #20
  4026b6:	bd30      	pop	{r4, r5, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  4026b8:	6820      	ldr	r0, [r4, #0]
  4026ba:	2300      	movs	r3, #0
  4026bc:	9a08      	ldr	r2, [sp, #32]
  4026be:	4669      	mov	r1, sp
  4026c0:	4c04      	ldr	r4, [pc, #16]	; (4026d4 <xTimerGenericCommand+0x58>)
  4026c2:	47a0      	blx	r4
}
  4026c4:	b005      	add	sp, #20
  4026c6:	bd30      	pop	{r4, r5, pc}
  4026c8:	4b04      	ldr	r3, [pc, #16]	; (4026dc <xTimerGenericCommand+0x60>)
  4026ca:	4798      	blx	r3
  4026cc:	20400b8c 	.word	0x20400b8c
  4026d0:	004023a5 	.word	0x004023a5
  4026d4:	00401339 	.word	0x00401339
  4026d8:	00401519 	.word	0x00401519
  4026dc:	00402589 	.word	0x00402589

004026e0 <prvSwitchTimerLists>:
{
  4026e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4026e4:	4e20      	ldr	r6, [pc, #128]	; (402768 <prvSwitchTimerLists+0x88>)
  4026e6:	b082      	sub	sp, #8
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4026e8:	4f20      	ldr	r7, [pc, #128]	; (40276c <prvSwitchTimerLists+0x8c>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  4026ea:	f8df 8088 	ldr.w	r8, [pc, #136]	; 402774 <prvSwitchTimerLists+0x94>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  4026ee:	e00c      	b.n	40270a <prvSwitchTimerLists+0x2a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  4026f0:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  4026f2:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  4026f4:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4026f8:	1d25      	adds	r5, r4, #4
  4026fa:	4628      	mov	r0, r5
  4026fc:	47b8      	blx	r7
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  4026fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402700:	4620      	mov	r0, r4
  402702:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402704:	69e3      	ldr	r3, [r4, #28]
  402706:	2b01      	cmp	r3, #1
  402708:	d00a      	beq.n	402720 <prvSwitchTimerLists+0x40>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  40270a:	6833      	ldr	r3, [r6, #0]
  40270c:	681a      	ldr	r2, [r3, #0]
  40270e:	2a00      	cmp	r2, #0
  402710:	d1ee      	bne.n	4026f0 <prvSwitchTimerLists+0x10>
	pxCurrentTimerList = pxOverflowTimerList;
  402712:	4a17      	ldr	r2, [pc, #92]	; (402770 <prvSwitchTimerLists+0x90>)
  402714:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
  402716:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
  402718:	6031      	str	r1, [r6, #0]
}
  40271a:	b002      	add	sp, #8
  40271c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  402720:	69a3      	ldr	r3, [r4, #24]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402722:	4629      	mov	r1, r5
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402724:	f04f 0e00 	mov.w	lr, #0
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402728:	f8df a04c 	ldr.w	sl, [pc, #76]	; 402778 <prvSwitchTimerLists+0x98>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  40272c:	eb09 0503 	add.w	r5, r9, r3
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402730:	464a      	mov	r2, r9
  402732:	4673      	mov	r3, lr
  402734:	4620      	mov	r0, r4
			if( xReloadTime > xNextExpireTime )
  402736:	45a9      	cmp	r9, r5
  402738:	d204      	bcs.n	402744 <prvSwitchTimerLists+0x64>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  40273a:	6065      	str	r5, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  40273c:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  40273e:	6830      	ldr	r0, [r6, #0]
  402740:	47d0      	blx	sl
  402742:	e7e2      	b.n	40270a <prvSwitchTimerLists+0x2a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402744:	f8cd e000 	str.w	lr, [sp]
  402748:	4671      	mov	r1, lr
  40274a:	47c0      	blx	r8
				configASSERT( xResult );
  40274c:	2800      	cmp	r0, #0
  40274e:	d1dc      	bne.n	40270a <prvSwitchTimerLists+0x2a>
  402750:	f04f 0380 	mov.w	r3, #128	; 0x80
  402754:	b672      	cpsid	i
  402756:	f383 8811 	msr	BASEPRI, r3
  40275a:	f3bf 8f6f 	isb	sy
  40275e:	f3bf 8f4f 	dsb	sy
  402762:	b662      	cpsie	i
  402764:	e7fe      	b.n	402764 <prvSwitchTimerLists+0x84>
  402766:	bf00      	nop
  402768:	20400b58 	.word	0x20400b58
  40276c:	00400cb9 	.word	0x00400cb9
  402770:	20400b5c 	.word	0x20400b5c
  402774:	0040267d 	.word	0x0040267d
  402778:	00400c85 	.word	0x00400c85

0040277c <prvTimerTask>:
{
  40277c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402780:	f8df 9204 	ldr.w	r9, [pc, #516]	; 402988 <prvTimerTask+0x20c>
  402784:	b089      	sub	sp, #36	; 0x24
  402786:	f8df a204 	ldr.w	sl, [pc, #516]	; 40298c <prvTimerTask+0x210>
  40278a:	f8df 8204 	ldr.w	r8, [pc, #516]	; 402990 <prvTimerTask+0x214>
  40278e:	4d72      	ldr	r5, [pc, #456]	; (402958 <prvTimerTask+0x1dc>)
  402790:	4e72      	ldr	r6, [pc, #456]	; (40295c <prvTimerTask+0x1e0>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  402792:	f8d9 3000 	ldr.w	r3, [r9]
	if( *pxListWasEmpty == pdFALSE )
  402796:	681c      	ldr	r4, [r3, #0]
  402798:	2c00      	cmp	r4, #0
  40279a:	d04e      	beq.n	40283a <prvTimerTask+0xbe>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  40279c:	68db      	ldr	r3, [r3, #12]
  40279e:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
  4027a0:	47d0      	blx	sl
	xTimeNow = xTaskGetTickCount();
  4027a2:	47c0      	blx	r8
	if( xTimeNow < xLastTime )
  4027a4:	4a6e      	ldr	r2, [pc, #440]	; (402960 <prvTimerTask+0x1e4>)
	xTimeNow = xTaskGetTickCount();
  4027a6:	4603      	mov	r3, r0
	if( xTimeNow < xLastTime )
  4027a8:	6812      	ldr	r2, [r2, #0]
  4027aa:	4290      	cmp	r0, r2
  4027ac:	d356      	bcc.n	40285c <prvTimerTask+0xe0>
	xLastTime = xTimeNow;
  4027ae:	4a6c      	ldr	r2, [pc, #432]	; (402960 <prvTimerTask+0x1e4>)
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  4027b0:	4287      	cmp	r7, r0
	xLastTime = xTimeNow;
  4027b2:	6010      	str	r0, [r2, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  4027b4:	d960      	bls.n	402878 <prvTimerTask+0xfc>
  4027b6:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  4027b8:	1af9      	subs	r1, r7, r3
  4027ba:	6828      	ldr	r0, [r5, #0]
  4027bc:	4b69      	ldr	r3, [pc, #420]	; (402964 <prvTimerTask+0x1e8>)
  4027be:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  4027c0:	4b69      	ldr	r3, [pc, #420]	; (402968 <prvTimerTask+0x1ec>)
  4027c2:	4798      	blx	r3
  4027c4:	b938      	cbnz	r0, 4027d6 <prvTimerTask+0x5a>
					portYIELD_WITHIN_API();
  4027c6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4027ca:	4a68      	ldr	r2, [pc, #416]	; (40296c <prvTimerTask+0x1f0>)
  4027cc:	6013      	str	r3, [r2, #0]
  4027ce:	f3bf 8f4f 	dsb	sy
  4027d2:	f3bf 8f6f 	isb	sy
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  4027d6:	2300      	movs	r3, #0
  4027d8:	a904      	add	r1, sp, #16
  4027da:	6828      	ldr	r0, [r5, #0]
  4027dc:	461a      	mov	r2, r3
  4027de:	47b0      	blx	r6
  4027e0:	2800      	cmp	r0, #0
  4027e2:	d0d6      	beq.n	402792 <prvTimerTask+0x16>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  4027e4:	9b04      	ldr	r3, [sp, #16]
  4027e6:	2b00      	cmp	r3, #0
  4027e8:	db1f      	blt.n	40282a <prvTimerTask+0xae>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  4027ea:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  4027ec:	6963      	ldr	r3, [r4, #20]
  4027ee:	b113      	cbz	r3, 4027f6 <prvTimerTask+0x7a>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4027f0:	1d20      	adds	r0, r4, #4
  4027f2:	4b5f      	ldr	r3, [pc, #380]	; (402970 <prvTimerTask+0x1f4>)
  4027f4:	4798      	blx	r3
	xTimeNow = xTaskGetTickCount();
  4027f6:	47c0      	blx	r8
	if( xTimeNow < xLastTime )
  4027f8:	4b59      	ldr	r3, [pc, #356]	; (402960 <prvTimerTask+0x1e4>)
	xTimeNow = xTaskGetTickCount();
  4027fa:	4602      	mov	r2, r0
	if( xTimeNow < xLastTime )
  4027fc:	681b      	ldr	r3, [r3, #0]
  4027fe:	4298      	cmp	r0, r3
  402800:	d335      	bcc.n	40286e <prvTimerTask+0xf2>
  402802:	9b04      	ldr	r3, [sp, #16]
	xLastTime = xTimeNow;
  402804:	4956      	ldr	r1, [pc, #344]	; (402960 <prvTimerTask+0x1e4>)
  402806:	2b09      	cmp	r3, #9
  402808:	600a      	str	r2, [r1, #0]
  40280a:	d8e4      	bhi.n	4027d6 <prvTimerTask+0x5a>
  40280c:	2101      	movs	r1, #1
  40280e:	fa01 f303 	lsl.w	r3, r1, r3
  402812:	f413 7b04 	ands.w	fp, r3, #528	; 0x210
  402816:	d163      	bne.n	4028e0 <prvTimerTask+0x164>
  402818:	f013 0fc7 	tst.w	r3, #199	; 0xc7
  40281c:	d169      	bne.n	4028f2 <prvTimerTask+0x176>
  40281e:	069b      	lsls	r3, r3, #26
  402820:	d5d9      	bpl.n	4027d6 <prvTimerTask+0x5a>
					vPortFree( pxTimer );
  402822:	4620      	mov	r0, r4
  402824:	4b53      	ldr	r3, [pc, #332]	; (402974 <prvTimerTask+0x1f8>)
  402826:	4798      	blx	r3
  402828:	e7d5      	b.n	4027d6 <prvTimerTask+0x5a>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  40282a:	9b05      	ldr	r3, [sp, #20]
  40282c:	9907      	ldr	r1, [sp, #28]
  40282e:	9806      	ldr	r0, [sp, #24]
  402830:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  402832:	9b04      	ldr	r3, [sp, #16]
  402834:	2b00      	cmp	r3, #0
  402836:	dbce      	blt.n	4027d6 <prvTimerTask+0x5a>
  402838:	e7d7      	b.n	4027ea <prvTimerTask+0x6e>
	vTaskSuspendAll();
  40283a:	47d0      	blx	sl
	xTimeNow = xTaskGetTickCount();
  40283c:	47c0      	blx	r8
	if( xTimeNow < xLastTime )
  40283e:	4a48      	ldr	r2, [pc, #288]	; (402960 <prvTimerTask+0x1e4>)
	xTimeNow = xTaskGetTickCount();
  402840:	4603      	mov	r3, r0
	if( xTimeNow < xLastTime )
  402842:	6812      	ldr	r2, [r2, #0]
  402844:	4282      	cmp	r2, r0
  402846:	d809      	bhi.n	40285c <prvTimerTask+0xe0>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  402848:	4a4b      	ldr	r2, [pc, #300]	; (402978 <prvTimerTask+0x1fc>)
  40284a:	4627      	mov	r7, r4
	xLastTime = xTimeNow;
  40284c:	4944      	ldr	r1, [pc, #272]	; (402960 <prvTimerTask+0x1e4>)
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  40284e:	6812      	ldr	r2, [r2, #0]
	xLastTime = xTimeNow;
  402850:	600b      	str	r3, [r1, #0]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  402852:	6812      	ldr	r2, [r2, #0]
  402854:	fab2 f282 	clz	r2, r2
  402858:	0952      	lsrs	r2, r2, #5
  40285a:	e7ad      	b.n	4027b8 <prvTimerTask+0x3c>
  40285c:	9303      	str	r3, [sp, #12]
		prvSwitchTimerLists();
  40285e:	4b47      	ldr	r3, [pc, #284]	; (40297c <prvTimerTask+0x200>)
  402860:	4798      	blx	r3
	xLastTime = xTimeNow;
  402862:	9b03      	ldr	r3, [sp, #12]
  402864:	4a3e      	ldr	r2, [pc, #248]	; (402960 <prvTimerTask+0x1e4>)
  402866:	6013      	str	r3, [r2, #0]
			( void ) xTaskResumeAll();
  402868:	4b3f      	ldr	r3, [pc, #252]	; (402968 <prvTimerTask+0x1ec>)
  40286a:	4798      	blx	r3
  40286c:	e7b3      	b.n	4027d6 <prvTimerTask+0x5a>
		prvSwitchTimerLists();
  40286e:	4b43      	ldr	r3, [pc, #268]	; (40297c <prvTimerTask+0x200>)
  402870:	9003      	str	r0, [sp, #12]
  402872:	4798      	blx	r3
  402874:	9a03      	ldr	r2, [sp, #12]
  402876:	e7c4      	b.n	402802 <prvTimerTask+0x86>
  402878:	9303      	str	r3, [sp, #12]
				( void ) xTaskResumeAll();
  40287a:	4b3b      	ldr	r3, [pc, #236]	; (402968 <prvTimerTask+0x1ec>)
  40287c:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  40287e:	f8d9 2000 	ldr.w	r2, [r9]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402882:	4b3b      	ldr	r3, [pc, #236]	; (402970 <prvTimerTask+0x1f4>)
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402884:	68d2      	ldr	r2, [r2, #12]
  402886:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  40288a:	f10b 0004 	add.w	r0, fp, #4
  40288e:	4798      	blx	r3
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402890:	f8db 201c 	ldr.w	r2, [fp, #28]
  402894:	9b03      	ldr	r3, [sp, #12]
  402896:	2a01      	cmp	r2, #1
  402898:	d004      	beq.n	4028a4 <prvTimerTask+0x128>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  40289a:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
  40289e:	4658      	mov	r0, fp
  4028a0:	4798      	blx	r3
  4028a2:	e798      	b.n	4027d6 <prvTimerTask+0x5a>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  4028a4:	f8db 1018 	ldr.w	r1, [fp, #24]
  4028a8:	461a      	mov	r2, r3
  4028aa:	4658      	mov	r0, fp
  4028ac:	463b      	mov	r3, r7
  4028ae:	4439      	add	r1, r7
  4028b0:	4c33      	ldr	r4, [pc, #204]	; (402980 <prvTimerTask+0x204>)
  4028b2:	47a0      	blx	r4
  4028b4:	2801      	cmp	r0, #1
  4028b6:	d1f0      	bne.n	40289a <prvTimerTask+0x11e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  4028b8:	2300      	movs	r3, #0
  4028ba:	463a      	mov	r2, r7
  4028bc:	4658      	mov	r0, fp
  4028be:	4c31      	ldr	r4, [pc, #196]	; (402984 <prvTimerTask+0x208>)
  4028c0:	9300      	str	r3, [sp, #0]
  4028c2:	4619      	mov	r1, r3
  4028c4:	47a0      	blx	r4
			configASSERT( xResult );
  4028c6:	2800      	cmp	r0, #0
  4028c8:	d1e7      	bne.n	40289a <prvTimerTask+0x11e>
  4028ca:	f04f 0380 	mov.w	r3, #128	; 0x80
  4028ce:	b672      	cpsid	i
  4028d0:	f383 8811 	msr	BASEPRI, r3
  4028d4:	f3bf 8f6f 	isb	sy
  4028d8:	f3bf 8f4f 	dsb	sy
  4028dc:	b662      	cpsie	i
  4028de:	e7fe      	b.n	4028de <prvTimerTask+0x162>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  4028e0:	9905      	ldr	r1, [sp, #20]
  4028e2:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  4028e4:	b369      	cbz	r1, 402942 <prvTimerTask+0x1c6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  4028e6:	4411      	add	r1, r2
  4028e8:	4620      	mov	r0, r4
  4028ea:	4613      	mov	r3, r2
  4028ec:	4c24      	ldr	r4, [pc, #144]	; (402980 <prvTimerTask+0x204>)
  4028ee:	47a0      	blx	r4
  4028f0:	e771      	b.n	4027d6 <prvTimerTask+0x5a>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  4028f2:	9b05      	ldr	r3, [sp, #20]
  4028f4:	4620      	mov	r0, r4
  4028f6:	69a1      	ldr	r1, [r4, #24]
  4028f8:	4f21      	ldr	r7, [pc, #132]	; (402980 <prvTimerTask+0x204>)
  4028fa:	4419      	add	r1, r3
  4028fc:	47b8      	blx	r7
  4028fe:	2801      	cmp	r0, #1
  402900:	f47f af69 	bne.w	4027d6 <prvTimerTask+0x5a>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402904:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402906:	4620      	mov	r0, r4
  402908:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  40290a:	69e3      	ldr	r3, [r4, #28]
  40290c:	2b01      	cmp	r3, #1
  40290e:	f47f af62 	bne.w	4027d6 <prvTimerTask+0x5a>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  402912:	9a05      	ldr	r2, [sp, #20]
  402914:	4620      	mov	r0, r4
  402916:	69a4      	ldr	r4, [r4, #24]
  402918:	465b      	mov	r3, fp
  40291a:	f8cd b000 	str.w	fp, [sp]
  40291e:	4659      	mov	r1, fp
  402920:	4422      	add	r2, r4
  402922:	4c18      	ldr	r4, [pc, #96]	; (402984 <prvTimerTask+0x208>)
  402924:	47a0      	blx	r4
							configASSERT( xResult );
  402926:	2800      	cmp	r0, #0
  402928:	f47f af55 	bne.w	4027d6 <prvTimerTask+0x5a>
  40292c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402930:	b672      	cpsid	i
  402932:	f383 8811 	msr	BASEPRI, r3
  402936:	f3bf 8f6f 	isb	sy
  40293a:	f3bf 8f4f 	dsb	sy
  40293e:	b662      	cpsie	i
  402940:	e7fe      	b.n	402940 <prvTimerTask+0x1c4>
  402942:	f04f 0380 	mov.w	r3, #128	; 0x80
  402946:	b672      	cpsid	i
  402948:	f383 8811 	msr	BASEPRI, r3
  40294c:	f3bf 8f6f 	isb	sy
  402950:	f3bf 8f4f 	dsb	sy
  402954:	b662      	cpsie	i
  402956:	e7fe      	b.n	402956 <prvTimerTask+0x1da>
  402958:	20400b8c 	.word	0x20400b8c
  40295c:	004016f1 	.word	0x004016f1
  402960:	20400b88 	.word	0x20400b88
  402964:	004018e1 	.word	0x004018e1
  402968:	00401e35 	.word	0x00401e35
  40296c:	e000ed04 	.word	0xe000ed04
  402970:	00400cb9 	.word	0x00400cb9
  402974:	00401021 	.word	0x00401021
  402978:	20400b5c 	.word	0x20400b5c
  40297c:	004026e1 	.word	0x004026e1
  402980:	0040254d 	.word	0x0040254d
  402984:	0040267d 	.word	0x0040267d
  402988:	20400b58 	.word	0x20400b58
  40298c:	00401ca5 	.word	0x00401ca5
  402990:	00401cb5 	.word	0x00401cb5

00402994 <but_callback>:

/************************************************************************/
/* handlers / callbacks                                                 */
/************************************************************************/

void but_callback(void) {
  402994:	b510      	push	{r4, lr}
  402996:	b082      	sub	sp, #8
	printf("IRQ but ok\n");
  402998:	4b0b      	ldr	r3, [pc, #44]	; (4029c8 <but_callback+0x34>)
  40299a:	480c      	ldr	r0, [pc, #48]	; (4029cc <but_callback+0x38>)
	uint32_t change = 100;
  40299c:	2464      	movs	r4, #100	; 0x64
	printf("IRQ but ok\n");
  40299e:	4798      	blx	r3
	uint32_t change = 100;
  4029a0:	a902      	add	r1, sp, #8
	xQueueSendFromISR(xQueueLedFreq2, (void *)&change, (TickType_t) 10);
  4029a2:	480b      	ldr	r0, [pc, #44]	; (4029d0 <but_callback+0x3c>)
  4029a4:	2300      	movs	r3, #0
	uint32_t change = 100;
  4029a6:	f841 4d08 	str.w	r4, [r1, #-8]!
	xQueueSendFromISR(xQueueLedFreq2, (void *)&change, (TickType_t) 10);
  4029aa:	220a      	movs	r2, #10
  4029ac:	4c09      	ldr	r4, [pc, #36]	; (4029d4 <but_callback+0x40>)
  4029ae:	6800      	ldr	r0, [r0, #0]
  4029b0:	47a0      	blx	r4
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  4029b2:	a902      	add	r1, sp, #8
	xSemaphoreGiveFromISR(xSemaphoreBut, &xHigherPriorityTaskWoken);
  4029b4:	4a08      	ldr	r2, [pc, #32]	; (4029d8 <but_callback+0x44>)
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  4029b6:	2000      	movs	r0, #0
	xSemaphoreGiveFromISR(xSemaphoreBut, &xHigherPriorityTaskWoken);
  4029b8:	4b08      	ldr	r3, [pc, #32]	; (4029dc <but_callback+0x48>)
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  4029ba:	f841 0d04 	str.w	r0, [r1, #-4]!
	xSemaphoreGiveFromISR(xSemaphoreBut, &xHigherPriorityTaskWoken);
  4029be:	6810      	ldr	r0, [r2, #0]
  4029c0:	4798      	blx	r3
}
  4029c2:	b002      	add	sp, #8
  4029c4:	bd10      	pop	{r4, pc}
  4029c6:	bf00      	nop
  4029c8:	0040301d 	.word	0x0040301d
  4029cc:	00405f7c 	.word	0x00405f7c
  4029d0:	20400c10 	.word	0x20400c10
  4029d4:	00401519 	.word	0x00401519
  4029d8:	20400c14 	.word	0x20400c14
  4029dc:	00401619 	.word	0x00401619

004029e0 <dw_but_callback>:

void dw_but_callback(void) {
  4029e0:	b510      	push	{r4, lr}
  4029e2:	b082      	sub	sp, #8
	printf("IRQ dw but ok\n");
  4029e4:	4b0b      	ldr	r3, [pc, #44]	; (402a14 <dw_but_callback+0x34>)
  4029e6:	480c      	ldr	r0, [pc, #48]	; (402a18 <dw_but_callback+0x38>)
	uint32_t change = -100;
  4029e8:	f06f 0463 	mvn.w	r4, #99	; 0x63
	printf("IRQ dw but ok\n");
  4029ec:	4798      	blx	r3
	uint32_t change = -100;
  4029ee:	a902      	add	r1, sp, #8
	xQueueSendFromISR(xQueueLedFreq2, (void *)&change, (TickType_t) 10);
  4029f0:	480a      	ldr	r0, [pc, #40]	; (402a1c <dw_but_callback+0x3c>)
  4029f2:	2300      	movs	r3, #0
	uint32_t change = -100;
  4029f4:	f841 4d08 	str.w	r4, [r1, #-8]!
	xQueueSendFromISR(xQueueLedFreq2, (void *)&change, (TickType_t) 10);
  4029f8:	220a      	movs	r2, #10
  4029fa:	4c09      	ldr	r4, [pc, #36]	; (402a20 <dw_but_callback+0x40>)
  4029fc:	6800      	ldr	r0, [r0, #0]
  4029fe:	47a0      	blx	r4
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  402a00:	a902      	add	r1, sp, #8
	xSemaphoreGiveFromISR(xSemaphoreBut, &xHigherPriorityTaskWoken);
  402a02:	4a08      	ldr	r2, [pc, #32]	; (402a24 <dw_but_callback+0x44>)
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  402a04:	2000      	movs	r0, #0
	xSemaphoreGiveFromISR(xSemaphoreBut, &xHigherPriorityTaskWoken);
  402a06:	4b08      	ldr	r3, [pc, #32]	; (402a28 <dw_but_callback+0x48>)
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  402a08:	f841 0d04 	str.w	r0, [r1, #-4]!
	xSemaphoreGiveFromISR(xSemaphoreBut, &xHigherPriorityTaskWoken);
  402a0c:	6810      	ldr	r0, [r2, #0]
  402a0e:	4798      	blx	r3
}
  402a10:	b002      	add	sp, #8
  402a12:	bd10      	pop	{r4, pc}
  402a14:	0040301d 	.word	0x0040301d
  402a18:	00405f88 	.word	0x00405f88
  402a1c:	20400c10 	.word	0x20400c10
  402a20:	00401519 	.word	0x00401519
  402a24:	20400c14 	.word	0x20400c14
  402a28:	00401619 	.word	0x00401619

00402a2c <task_but>:
    /* suspende por delayMs */
    vTaskDelay(delayMs);
  }
}

static void task_but(void *pvParameters) {
  402a2c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
};


static void BUT_init(void) {
  
  pmc_enable_periph_clk(DW_BUT_PIO_ID);
  402a30:	4c3b      	ldr	r4, [pc, #236]	; (402b20 <task_but+0xf4>)
static void task_but(void *pvParameters) {
  402a32:	b085      	sub	sp, #20
  pmc_enable_periph_clk(DW_BUT_PIO_ID);
  402a34:	2010      	movs	r0, #16
                  but_callback);
				  
  pio_handler_set(DW_BUT_PIO, DW_BUT_PIO_ID, DW_BUT_IDX_MASK, PIO_IT_FALL_EDGE, dw_but_callback);

  // Ativa interrupção e limpa primeira IRQ gerada na ativacao
  pio_enable_interrupt(BUT_PIO, BUT_PIO_PIN_MASK);
  402a36:	4d3b      	ldr	r5, [pc, #236]	; (402b24 <task_but+0xf8>)
  pmc_enable_periph_clk(DW_BUT_PIO_ID);
  402a38:	47a0      	blx	r4
  pmc_enable_periph_clk(BUT_PIO_ID);
  402a3a:	200a      	movs	r0, #10
  402a3c:	47a0      	blx	r4
  pio_configure(BUT_PIO, PIO_INPUT, BUT_PIO_PIN_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  402a3e:	4c3a      	ldr	r4, [pc, #232]	; (402b28 <task_but+0xfc>)
  402a40:	2309      	movs	r3, #9
  402a42:	f44f 6200 	mov.w	r2, #2048	; 0x800
  402a46:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  402a4a:	4838      	ldr	r0, [pc, #224]	; (402b2c <task_but+0x100>)
  402a4c:	47a0      	blx	r4
  pio_configure(DW_BUT_PIO, PIO_INPUT, DW_BUT_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  402a4e:	2309      	movs	r3, #9
  402a50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402a54:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  402a58:	4835      	ldr	r0, [pc, #212]	; (402b30 <task_but+0x104>)
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402a5a:	f44f 3680 	mov.w	r6, #65536	; 0x10000
  402a5e:	47a0      	blx	r4
  pio_handler_set(BUT_PIO,
  402a60:	4934      	ldr	r1, [pc, #208]	; (402b34 <task_but+0x108>)
  402a62:	4c35      	ldr	r4, [pc, #212]	; (402b38 <task_but+0x10c>)
  402a64:	2350      	movs	r3, #80	; 0x50
  402a66:	f44f 6200 	mov.w	r2, #2048	; 0x800
  402a6a:	9100      	str	r1, [sp, #0]
  402a6c:	482f      	ldr	r0, [pc, #188]	; (402b2c <task_but+0x100>)
  402a6e:	210a      	movs	r1, #10
  402a70:	47a0      	blx	r4
  pio_handler_set(DW_BUT_PIO, DW_BUT_PIO_ID, DW_BUT_IDX_MASK, PIO_IT_FALL_EDGE, dw_but_callback);
  402a72:	4932      	ldr	r1, [pc, #200]	; (402b3c <task_but+0x110>)
  402a74:	2350      	movs	r3, #80	; 0x50
  402a76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402a7a:	9100      	str	r1, [sp, #0]
  402a7c:	2110      	movs	r1, #16
  402a7e:	482c      	ldr	r0, [pc, #176]	; (402b30 <task_but+0x104>)
  402a80:	47a0      	blx	r4
  pio_enable_interrupt(BUT_PIO, BUT_PIO_PIN_MASK);
  402a82:	f44f 6100 	mov.w	r1, #2048	; 0x800
  402a86:	4829      	ldr	r0, [pc, #164]	; (402b2c <task_but+0x100>)
  402a88:	47a8      	blx	r5
  pio_get_interrupt_status(BUT_PIO);
  402a8a:	4c2d      	ldr	r4, [pc, #180]	; (402b40 <task_but+0x114>)
  402a8c:	4827      	ldr	r0, [pc, #156]	; (402b2c <task_but+0x100>)
  402a8e:	47a0      	blx	r4
  pio_enable_interrupt(DW_BUT_PIO, DW_BUT_IDX_MASK);
  402a90:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402a94:	4826      	ldr	r0, [pc, #152]	; (402b30 <task_but+0x104>)
  402a96:	47a8      	blx	r5
  pio_get_interrupt_status(DW_BUT_PIO);
  402a98:	4825      	ldr	r0, [pc, #148]	; (402b30 <task_but+0x104>)
  402a9a:	47a0      	blx	r4
  402a9c:	4f29      	ldr	r7, [pc, #164]	; (402b44 <task_but+0x118>)
  402a9e:	4b2a      	ldr	r3, [pc, #168]	; (402b48 <task_but+0x11c>)
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  402aa0:	2280      	movs	r2, #128	; 0x80
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402aa2:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	uint32_t msg = 0;
  402aa6:	2000      	movs	r0, #0
	uint32_t delayTicks = 2000;
  402aa8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
  402aac:	4c27      	ldr	r4, [pc, #156]	; (402b4c <task_but+0x120>)
  402aae:	4d28      	ldr	r5, [pc, #160]	; (402b50 <task_but+0x124>)
  402ab0:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 402b60 <task_but+0x134>
  402ab4:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 402b64 <task_but+0x138>
			printf("But passou o semaforo\n");
  402ab8:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 402b68 <task_but+0x13c>
				printf("But recebeu %d\n", msg);
  402abc:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 402b6c <task_but+0x140>
  402ac0:	f8c3 e000 	str.w	lr, [r3]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  402ac4:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402ac8:	601e      	str	r6, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  402aca:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
	uint32_t msg = 0;
  402ace:	9002      	str	r0, [sp, #8]
	uint32_t delayTicks = 2000;
  402ad0:	9103      	str	r1, [sp, #12]
		printf("BUT BUT BUT BUT\n");
  402ad2:	4820      	ldr	r0, [pc, #128]	; (402b54 <task_but+0x128>)
  402ad4:	47a0      	blx	r4
		if (xSemaphoreTake(xSemaphoreBut, 1000)) {
  402ad6:	2300      	movs	r3, #0
  402ad8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  402adc:	6838      	ldr	r0, [r7, #0]
  402ade:	4619      	mov	r1, r3
  402ae0:	47a8      	blx	r5
  402ae2:	2800      	cmp	r0, #0
  402ae4:	d0f5      	beq.n	402ad2 <task_but+0xa6>
			printf("But passou o semaforo\n");
  402ae6:	4640      	mov	r0, r8
  402ae8:	47a0      	blx	r4
			if (xQueueReceive(xQueueLedFreq2, &msg, (TickType_t) 0)) {
  402aea:	2300      	movs	r3, #0
  402aec:	a902      	add	r1, sp, #8
  402aee:	f8d9 0000 	ldr.w	r0, [r9]
  402af2:	461a      	mov	r2, r3
  402af4:	47a8      	blx	r5
  402af6:	2800      	cmp	r0, #0
  402af8:	d0eb      	beq.n	402ad2 <task_but+0xa6>
				printf("But recebeu %d\n", msg);
  402afa:	9902      	ldr	r1, [sp, #8]
  402afc:	4650      	mov	r0, sl
  402afe:	47a0      	blx	r4
				delayTicks += msg;
  402b00:	9b03      	ldr	r3, [sp, #12]
  402b02:	9a02      	ldr	r2, [sp, #8]
				printf("task_but: delay = %d\n", delayTicks);
  402b04:	4814      	ldr	r0, [pc, #80]	; (402b58 <task_but+0x12c>)
				delayTicks += msg;
  402b06:	4413      	add	r3, r2
				xQueueSend(xQueueLedFreq, (void *)&delayTicks, 10);
  402b08:	4e14      	ldr	r6, [pc, #80]	; (402b5c <task_but+0x130>)
				printf("task_but: delay = %d\n", delayTicks);
  402b0a:	4619      	mov	r1, r3
				delayTicks += msg;
  402b0c:	9303      	str	r3, [sp, #12]
				printf("task_but: delay = %d\n", delayTicks);
  402b0e:	47a0      	blx	r4
				xQueueSend(xQueueLedFreq, (void *)&delayTicks, 10);
  402b10:	2300      	movs	r3, #0
  402b12:	220a      	movs	r2, #10
  402b14:	a903      	add	r1, sp, #12
  402b16:	f8db 0000 	ldr.w	r0, [fp]
  402b1a:	47b0      	blx	r6
  402b1c:	e7d9      	b.n	402ad2 <task_but+0xa6>
  402b1e:	bf00      	nop
  402b20:	00400849 	.word	0x00400849
  402b24:	004005e1 	.word	0x004005e1
  402b28:	00400515 	.word	0x00400515
  402b2c:	400e0e00 	.word	0x400e0e00
  402b30:	400e1400 	.word	0x400e1400
  402b34:	00402995 	.word	0x00402995
  402b38:	00400675 	.word	0x00400675
  402b3c:	004029e1 	.word	0x004029e1
  402b40:	004005e5 	.word	0x004005e5
  402b44:	20400c14 	.word	0x20400c14
  402b48:	e000e100 	.word	0xe000e100
  402b4c:	0040301d 	.word	0x0040301d
  402b50:	004016f1 	.word	0x004016f1
  402b54:	00406090 	.word	0x00406090
  402b58:	004060cc 	.word	0x004060cc
  402b5c:	00401339 	.word	0x00401339
  402b60:	20400c10 	.word	0x20400c10
  402b64:	20400c18 	.word	0x20400c18
  402b68:	004060a4 	.word	0x004060a4
  402b6c:	004060bc 	.word	0x004060bc

00402b70 <usart_serial_getchar>:
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  402b70:	4b2d      	ldr	r3, [pc, #180]	; (402c28 <usart_serial_getchar+0xb8>)
	uint32_t val = 0;
  402b72:	2200      	movs	r2, #0
{
  402b74:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (UART0 == (Uart*)p_usart) {
  402b76:	4298      	cmp	r0, r3
{
  402b78:	b083      	sub	sp, #12
  402b7a:	4604      	mov	r4, r0
  402b7c:	460d      	mov	r5, r1
	uint32_t val = 0;
  402b7e:	9201      	str	r2, [sp, #4]
	if (UART0 == (Uart*)p_usart) {
  402b80:	d03a      	beq.n	402bf8 <usart_serial_getchar+0x88>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  402b82:	4b2a      	ldr	r3, [pc, #168]	; (402c2c <usart_serial_getchar+0xbc>)
  402b84:	4298      	cmp	r0, r3
  402b86:	d03f      	beq.n	402c08 <usart_serial_getchar+0x98>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  402b88:	4b29      	ldr	r3, [pc, #164]	; (402c30 <usart_serial_getchar+0xc0>)
  402b8a:	4298      	cmp	r0, r3
  402b8c:	d044      	beq.n	402c18 <usart_serial_getchar+0xa8>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  402b8e:	4b29      	ldr	r3, [pc, #164]	; (402c34 <usart_serial_getchar+0xc4>)
  402b90:	4298      	cmp	r0, r3
  402b92:	d015      	beq.n	402bc0 <usart_serial_getchar+0x50>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  402b94:	4b28      	ldr	r3, [pc, #160]	; (402c38 <usart_serial_getchar+0xc8>)
  402b96:	4298      	cmp	r0, r3
  402b98:	d024      	beq.n	402be4 <usart_serial_getchar+0x74>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  402b9a:	4b28      	ldr	r3, [pc, #160]	; (402c3c <usart_serial_getchar+0xcc>)
  402b9c:	429c      	cmp	r4, r3
  402b9e:	d017      	beq.n	402bd0 <usart_serial_getchar+0x60>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  402ba0:	4b27      	ldr	r3, [pc, #156]	; (402c40 <usart_serial_getchar+0xd0>)
  402ba2:	429c      	cmp	r4, r3
  402ba4:	d001      	beq.n	402baa <usart_serial_getchar+0x3a>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  402ba6:	b003      	add	sp, #12
  402ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402baa:	af01      	add	r7, sp, #4
  402bac:	4e25      	ldr	r6, [pc, #148]	; (402c44 <usart_serial_getchar+0xd4>)
		while (usart_read(p_usart, &val));
  402bae:	4639      	mov	r1, r7
  402bb0:	4620      	mov	r0, r4
  402bb2:	47b0      	blx	r6
  402bb4:	2800      	cmp	r0, #0
  402bb6:	d1fa      	bne.n	402bae <usart_serial_getchar+0x3e>
		*data = (uint8_t)(val & 0xFF);
  402bb8:	9b01      	ldr	r3, [sp, #4]
  402bba:	702b      	strb	r3, [r5, #0]
}
  402bbc:	b003      	add	sp, #12
  402bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402bc0:	4e21      	ldr	r6, [pc, #132]	; (402c48 <usart_serial_getchar+0xd8>)
		while (uart_read((Uart*)p_usart, data));
  402bc2:	4629      	mov	r1, r5
  402bc4:	4620      	mov	r0, r4
  402bc6:	47b0      	blx	r6
  402bc8:	2800      	cmp	r0, #0
  402bca:	d1fa      	bne.n	402bc2 <usart_serial_getchar+0x52>
}
  402bcc:	b003      	add	sp, #12
  402bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402bd0:	af01      	add	r7, sp, #4
  402bd2:	4e1c      	ldr	r6, [pc, #112]	; (402c44 <usart_serial_getchar+0xd4>)
		while (usart_read(p_usart, &val));
  402bd4:	4639      	mov	r1, r7
  402bd6:	4620      	mov	r0, r4
  402bd8:	47b0      	blx	r6
  402bda:	2800      	cmp	r0, #0
  402bdc:	d1fa      	bne.n	402bd4 <usart_serial_getchar+0x64>
		*data = (uint8_t)(val & 0xFF);
  402bde:	9b01      	ldr	r3, [sp, #4]
  402be0:	702b      	strb	r3, [r5, #0]
  402be2:	e7eb      	b.n	402bbc <usart_serial_getchar+0x4c>
  402be4:	af01      	add	r7, sp, #4
  402be6:	4e17      	ldr	r6, [pc, #92]	; (402c44 <usart_serial_getchar+0xd4>)
		while (usart_read(p_usart, &val));
  402be8:	4639      	mov	r1, r7
  402bea:	4620      	mov	r0, r4
  402bec:	47b0      	blx	r6
  402bee:	2800      	cmp	r0, #0
  402bf0:	d1fa      	bne.n	402be8 <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
  402bf2:	9b01      	ldr	r3, [sp, #4]
  402bf4:	702b      	strb	r3, [r5, #0]
  402bf6:	e7e1      	b.n	402bbc <usart_serial_getchar+0x4c>
  402bf8:	4e13      	ldr	r6, [pc, #76]	; (402c48 <usart_serial_getchar+0xd8>)
		while (uart_read((Uart*)p_usart, data));
  402bfa:	4607      	mov	r7, r0
  402bfc:	4629      	mov	r1, r5
  402bfe:	4638      	mov	r0, r7
  402c00:	47b0      	blx	r6
  402c02:	2800      	cmp	r0, #0
  402c04:	d1fa      	bne.n	402bfc <usart_serial_getchar+0x8c>
  402c06:	e7c8      	b.n	402b9a <usart_serial_getchar+0x2a>
  402c08:	4e0f      	ldr	r6, [pc, #60]	; (402c48 <usart_serial_getchar+0xd8>)
		while (uart_read((Uart*)p_usart, data));
  402c0a:	4607      	mov	r7, r0
  402c0c:	4629      	mov	r1, r5
  402c0e:	4638      	mov	r0, r7
  402c10:	47b0      	blx	r6
  402c12:	2800      	cmp	r0, #0
  402c14:	d1fa      	bne.n	402c0c <usart_serial_getchar+0x9c>
  402c16:	e7c0      	b.n	402b9a <usart_serial_getchar+0x2a>
  402c18:	4e0b      	ldr	r6, [pc, #44]	; (402c48 <usart_serial_getchar+0xd8>)
		while (uart_read((Uart*)p_usart, data));
  402c1a:	4607      	mov	r7, r0
  402c1c:	4629      	mov	r1, r5
  402c1e:	4638      	mov	r0, r7
  402c20:	47b0      	blx	r6
  402c22:	2800      	cmp	r0, #0
  402c24:	d1fa      	bne.n	402c1c <usart_serial_getchar+0xac>
  402c26:	e7bb      	b.n	402ba0 <usart_serial_getchar+0x30>
  402c28:	400e0800 	.word	0x400e0800
  402c2c:	400e0a00 	.word	0x400e0a00
  402c30:	400e1a00 	.word	0x400e1a00
  402c34:	400e1c00 	.word	0x400e1c00
  402c38:	40024000 	.word	0x40024000
  402c3c:	40028000 	.word	0x40028000
  402c40:	4002c000 	.word	0x4002c000
  402c44:	004009a1 	.word	0x004009a1
  402c48:	004008a1 	.word	0x004008a1

00402c4c <usart_serial_putchar>:
	if (UART0 == (Uart*)p_usart) {
  402c4c:	4b2a      	ldr	r3, [pc, #168]	; (402cf8 <usart_serial_putchar+0xac>)
  402c4e:	4298      	cmp	r0, r3
{
  402c50:	b570      	push	{r4, r5, r6, lr}
  402c52:	460d      	mov	r5, r1
	if (UART0 == (Uart*)p_usart) {
  402c54:	d01c      	beq.n	402c90 <usart_serial_putchar+0x44>
	if (UART1 == (Uart*)p_usart) {
  402c56:	4b29      	ldr	r3, [pc, #164]	; (402cfc <usart_serial_putchar+0xb0>)
  402c58:	4298      	cmp	r0, r3
  402c5a:	d022      	beq.n	402ca2 <usart_serial_putchar+0x56>
	if (UART2 == (Uart*)p_usart) {
  402c5c:	4b28      	ldr	r3, [pc, #160]	; (402d00 <usart_serial_putchar+0xb4>)
  402c5e:	4298      	cmp	r0, r3
  402c60:	d028      	beq.n	402cb4 <usart_serial_putchar+0x68>
	if (UART3 == (Uart*)p_usart) {
  402c62:	4b28      	ldr	r3, [pc, #160]	; (402d04 <usart_serial_putchar+0xb8>)
  402c64:	4298      	cmp	r0, r3
  402c66:	d02e      	beq.n	402cc6 <usart_serial_putchar+0x7a>
	if (USART0 == p_usart) {
  402c68:	4b27      	ldr	r3, [pc, #156]	; (402d08 <usart_serial_putchar+0xbc>)
  402c6a:	4298      	cmp	r0, r3
  402c6c:	d007      	beq.n	402c7e <usart_serial_putchar+0x32>
	if (USART1 == p_usart) {
  402c6e:	4b27      	ldr	r3, [pc, #156]	; (402d0c <usart_serial_putchar+0xc0>)
  402c70:	4298      	cmp	r0, r3
  402c72:	d038      	beq.n	402ce6 <usart_serial_putchar+0x9a>
	if (USART2 == p_usart) {
  402c74:	4b26      	ldr	r3, [pc, #152]	; (402d10 <usart_serial_putchar+0xc4>)
  402c76:	4298      	cmp	r0, r3
  402c78:	d02d      	beq.n	402cd6 <usart_serial_putchar+0x8a>
	return 0;
  402c7a:	2000      	movs	r0, #0
}
  402c7c:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  402c7e:	4604      	mov	r4, r0
  402c80:	4e24      	ldr	r6, [pc, #144]	; (402d14 <usart_serial_putchar+0xc8>)
  402c82:	4629      	mov	r1, r5
  402c84:	4620      	mov	r0, r4
  402c86:	47b0      	blx	r6
  402c88:	2800      	cmp	r0, #0
  402c8a:	d1fa      	bne.n	402c82 <usart_serial_putchar+0x36>
		return 1;
  402c8c:	2001      	movs	r0, #1
  402c8e:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402c90:	4604      	mov	r4, r0
  402c92:	4e21      	ldr	r6, [pc, #132]	; (402d18 <usart_serial_putchar+0xcc>)
  402c94:	4629      	mov	r1, r5
  402c96:	4620      	mov	r0, r4
  402c98:	47b0      	blx	r6
  402c9a:	2800      	cmp	r0, #0
  402c9c:	d1fa      	bne.n	402c94 <usart_serial_putchar+0x48>
		return 1;
  402c9e:	2001      	movs	r0, #1
  402ca0:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402ca2:	4604      	mov	r4, r0
  402ca4:	4e1c      	ldr	r6, [pc, #112]	; (402d18 <usart_serial_putchar+0xcc>)
  402ca6:	4629      	mov	r1, r5
  402ca8:	4620      	mov	r0, r4
  402caa:	47b0      	blx	r6
  402cac:	2800      	cmp	r0, #0
  402cae:	d1fa      	bne.n	402ca6 <usart_serial_putchar+0x5a>
		return 1;
  402cb0:	2001      	movs	r0, #1
  402cb2:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402cb4:	4604      	mov	r4, r0
  402cb6:	4e18      	ldr	r6, [pc, #96]	; (402d18 <usart_serial_putchar+0xcc>)
  402cb8:	4629      	mov	r1, r5
  402cba:	4620      	mov	r0, r4
  402cbc:	47b0      	blx	r6
  402cbe:	2800      	cmp	r0, #0
  402cc0:	d1fa      	bne.n	402cb8 <usart_serial_putchar+0x6c>
		return 1;
  402cc2:	2001      	movs	r0, #1
  402cc4:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402cc6:	4604      	mov	r4, r0
  402cc8:	4e13      	ldr	r6, [pc, #76]	; (402d18 <usart_serial_putchar+0xcc>)
  402cca:	4629      	mov	r1, r5
  402ccc:	4620      	mov	r0, r4
  402cce:	47b0      	blx	r6
  402cd0:	2800      	cmp	r0, #0
  402cd2:	d1fa      	bne.n	402cca <usart_serial_putchar+0x7e>
  402cd4:	e7da      	b.n	402c8c <usart_serial_putchar+0x40>
		while (usart_write(p_usart, c)!=0);
  402cd6:	4604      	mov	r4, r0
  402cd8:	4e0e      	ldr	r6, [pc, #56]	; (402d14 <usart_serial_putchar+0xc8>)
  402cda:	4629      	mov	r1, r5
  402cdc:	4620      	mov	r0, r4
  402cde:	47b0      	blx	r6
  402ce0:	2800      	cmp	r0, #0
  402ce2:	d1fa      	bne.n	402cda <usart_serial_putchar+0x8e>
  402ce4:	e7d2      	b.n	402c8c <usart_serial_putchar+0x40>
		while (usart_write(p_usart, c)!=0);
  402ce6:	4604      	mov	r4, r0
  402ce8:	4e0a      	ldr	r6, [pc, #40]	; (402d14 <usart_serial_putchar+0xc8>)
  402cea:	4629      	mov	r1, r5
  402cec:	4620      	mov	r0, r4
  402cee:	47b0      	blx	r6
  402cf0:	2800      	cmp	r0, #0
  402cf2:	d1fa      	bne.n	402cea <usart_serial_putchar+0x9e>
  402cf4:	e7ca      	b.n	402c8c <usart_serial_putchar+0x40>
  402cf6:	bf00      	nop
  402cf8:	400e0800 	.word	0x400e0800
  402cfc:	400e0a00 	.word	0x400e0a00
  402d00:	400e1a00 	.word	0x400e1a00
  402d04:	400e1c00 	.word	0x400e1c00
  402d08:	40024000 	.word	0x40024000
  402d0c:	40028000 	.word	0x40028000
  402d10:	4002c000 	.word	0x4002c000
  402d14:	00400989 	.word	0x00400989
  402d18:	00400891 	.word	0x00400891

00402d1c <vApplicationStackOverflowHook>:
                                          signed char *pcTaskName) {
  402d1c:	b508      	push	{r3, lr}
  printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  402d1e:	460a      	mov	r2, r1
  402d20:	4b02      	ldr	r3, [pc, #8]	; (402d2c <vApplicationStackOverflowHook+0x10>)
  402d22:	4601      	mov	r1, r0
  402d24:	4802      	ldr	r0, [pc, #8]	; (402d30 <vApplicationStackOverflowHook+0x14>)
  402d26:	4798      	blx	r3
  402d28:	e7fe      	b.n	402d28 <vApplicationStackOverflowHook+0xc>
  402d2a:	bf00      	nop
  402d2c:	0040301d 	.word	0x0040301d
  402d30:	00406108 	.word	0x00406108

00402d34 <vApplicationTickHook>:
extern void vApplicationTickHook(void) {}
  402d34:	4770      	bx	lr
  402d36:	bf00      	nop

00402d38 <vApplicationMallocFailedHook>:
  402d38:	f04f 0380 	mov.w	r3, #128	; 0x80
  402d3c:	b672      	cpsid	i
  402d3e:	f383 8811 	msr	BASEPRI, r3
  402d42:	f3bf 8f6f 	isb	sy
  402d46:	f3bf 8f4f 	dsb	sy
  402d4a:	b662      	cpsie	i
  402d4c:	e7fe      	b.n	402d4c <vApplicationMallocFailedHook+0x14>
  402d4e:	bf00      	nop

00402d50 <pin_toggle>:
void pin_toggle(Pio *pio, uint32_t mask) {
  402d50:	b570      	push	{r4, r5, r6, lr}
  402d52:	460d      	mov	r5, r1
  if (pio_get_output_data_status(pio, mask))
  402d54:	4b07      	ldr	r3, [pc, #28]	; (402d74 <pin_toggle+0x24>)
void pin_toggle(Pio *pio, uint32_t mask) {
  402d56:	4604      	mov	r4, r0
  if (pio_get_output_data_status(pio, mask))
  402d58:	4798      	blx	r3
    pio_clear(pio, mask);
  402d5a:	4629      	mov	r1, r5
  if (pio_get_output_data_status(pio, mask))
  402d5c:	b920      	cbnz	r0, 402d68 <pin_toggle+0x18>
    pio_set(pio, mask);
  402d5e:	4620      	mov	r0, r4
  402d60:	4b05      	ldr	r3, [pc, #20]	; (402d78 <pin_toggle+0x28>)
}
  402d62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pio_set(pio, mask);
  402d66:	4718      	bx	r3
    pio_clear(pio, mask);
  402d68:	4620      	mov	r0, r4
  402d6a:	4b04      	ldr	r3, [pc, #16]	; (402d7c <pin_toggle+0x2c>)
}
  402d6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pio_clear(pio, mask);
  402d70:	4718      	bx	r3
  402d72:	bf00      	nop
  402d74:	004005d5 	.word	0x004005d5
  402d78:	00400441 	.word	0x00400441
  402d7c:	00400445 	.word	0x00400445

00402d80 <LED_init>:
void LED_init(int estado){
  402d80:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(LED_PIO_ID);
  402d82:	4b07      	ldr	r3, [pc, #28]	; (402da0 <LED_init+0x20>)
void LED_init(int estado){
  402d84:	b082      	sub	sp, #8
  402d86:	4604      	mov	r4, r0
	pmc_enable_periph_clk(LED_PIO_ID);
  402d88:	200c      	movs	r0, #12
  402d8a:	4798      	blx	r3
	pio_set_output(LED_PIO, LED_IDX_MASK, estado, 0, 0);
  402d8c:	2300      	movs	r3, #0
  402d8e:	4622      	mov	r2, r4
  402d90:	f44f 7180 	mov.w	r1, #256	; 0x100
  402d94:	4803      	ldr	r0, [pc, #12]	; (402da4 <LED_init+0x24>)
  402d96:	4c04      	ldr	r4, [pc, #16]	; (402da8 <LED_init+0x28>)
  402d98:	9300      	str	r3, [sp, #0]
  402d9a:	47a0      	blx	r4
};
  402d9c:	b002      	add	sp, #8
  402d9e:	bd10      	pop	{r4, pc}
  402da0:	00400849 	.word	0x00400849
  402da4:	400e1200 	.word	0x400e1200
  402da8:	004004e1 	.word	0x004004e1

00402dac <task_led>:
static void task_led(void *pvParameters) {
  402dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402db0:	b083      	sub	sp, #12
  LED_init(1);
  402db2:	4b14      	ldr	r3, [pc, #80]	; (402e04 <task_led+0x58>)
  402db4:	2001      	movs	r0, #1
  uint32_t delayMs = 2000;
  402db6:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
  LED_init(1);
  402dba:	4798      	blx	r3
  uint32_t msg = 0;
  402dbc:	ae02      	add	r6, sp, #8
  402dbe:	2300      	movs	r3, #0
  402dc0:	4d11      	ldr	r5, [pc, #68]	; (402e08 <task_led+0x5c>)
  402dc2:	f8df b054 	ldr.w	fp, [pc, #84]	; 402e18 <task_led+0x6c>
  402dc6:	f8df 9054 	ldr.w	r9, [pc, #84]	; 402e1c <task_led+0x70>
  402dca:	f8df 8054 	ldr.w	r8, [pc, #84]	; 402e20 <task_led+0x74>
    pin_toggle(LED_PIO, LED_IDX_MASK);
  402dce:	f8df a054 	ldr.w	sl, [pc, #84]	; 402e24 <task_led+0x78>
  uint32_t msg = 0;
  402dd2:	f846 3d04 	str.w	r3, [r6, #-4]!
  402dd6:	e005      	b.n	402de4 <task_led+0x38>
    pin_toggle(LED_PIO, LED_IDX_MASK);
  402dd8:	4650      	mov	r0, sl
  402dda:	f44f 7180 	mov.w	r1, #256	; 0x100
  402dde:	47c8      	blx	r9
    vTaskDelay(delayMs);
  402de0:	4620      	mov	r0, r4
  402de2:	47c0      	blx	r8
		printf("LED LED LED LED\n");
  402de4:	4809      	ldr	r0, [pc, #36]	; (402e0c <task_led+0x60>)
  402de6:	47a8      	blx	r5
		if (xQueueReceive(xQueueLedFreq, &msg, (TickType_t) 0)) {
  402de8:	2300      	movs	r3, #0
  402dea:	4631      	mov	r1, r6
  402dec:	f8db 0000 	ldr.w	r0, [fp]
  402df0:	461a      	mov	r2, r3
  402df2:	4f07      	ldr	r7, [pc, #28]	; (402e10 <task_led+0x64>)
  402df4:	47b8      	blx	r7
  402df6:	2800      	cmp	r0, #0
  402df8:	d0ee      	beq.n	402dd8 <task_led+0x2c>
			delayMs = msg / portTICK_PERIOD_MS;
  402dfa:	9c01      	ldr	r4, [sp, #4]
			printf("task_led: %d \n", delayMs);
  402dfc:	4805      	ldr	r0, [pc, #20]	; (402e14 <task_led+0x68>)
  402dfe:	4621      	mov	r1, r4
  402e00:	47a8      	blx	r5
  402e02:	e7e9      	b.n	402dd8 <task_led+0x2c>
  402e04:	00402d81 	.word	0x00402d81
  402e08:	0040301d 	.word	0x0040301d
  402e0c:	004060e4 	.word	0x004060e4
  402e10:	004016f1 	.word	0x004016f1
  402e14:	004060f8 	.word	0x004060f8
  402e18:	20400c18 	.word	0x20400c18
  402e1c:	00402d51 	.word	0x00402d51
  402e20:	00401f55 	.word	0x00401f55
  402e24:	400e1200 	.word	0x400e1200

00402e28 <main>:
/**
 *  \brief FreeRTOS Real Time Kernel example entry point.
 *
 *  \return Unused (ANSI-C compatibility).
 */
int main(void) {
  402e28:	b580      	push	{r7, lr}
	/* Initialize the SAM system */
	sysclk_init();
  402e2a:	4b44      	ldr	r3, [pc, #272]	; (402f3c <main+0x114>)
int main(void) {
  402e2c:	b08a      	sub	sp, #40	; 0x28
	sysclk_init();
  402e2e:	4798      	blx	r3
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  402e30:	4e43      	ldr	r6, [pc, #268]	; (402f40 <main+0x118>)
	board_init();
  402e32:	4b44      	ldr	r3, [pc, #272]	; (402f44 <main+0x11c>)
	usart_settings.stop_bits= opt->stopbits;
  402e34:	2500      	movs	r5, #0
  402e36:	4f44      	ldr	r7, [pc, #272]	; (402f48 <main+0x120>)
  402e38:	4798      	blx	r3
	stdio_base = (void *)usart;
  402e3a:	4c44      	ldr	r4, [pc, #272]	; (402f4c <main+0x124>)
	usart_settings.baudrate = opt->baudrate;
  402e3c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  402e40:	4843      	ldr	r0, [pc, #268]	; (402f50 <main+0x128>)
	usart_settings.char_length = opt->charlength;
  402e42:	21c0      	movs	r1, #192	; 0xc0
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  402e44:	6037      	str	r7, [r6, #0]
	usart_settings.parity_type = opt->paritytype;
  402e46:	f44f 6200 	mov.w	r2, #2048	; 0x800
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  402e4a:	4e42      	ldr	r6, [pc, #264]	; (402f54 <main+0x12c>)
  402e4c:	4f42      	ldr	r7, [pc, #264]	; (402f58 <main+0x130>)
	stdio_base = (void *)usart;
  402e4e:	6004      	str	r4, [r0, #0]
  402e50:	200e      	movs	r0, #14
	usart_settings.baudrate = opt->baudrate;
  402e52:	9304      	str	r3, [sp, #16]
  402e54:	4b41      	ldr	r3, [pc, #260]	; (402f5c <main+0x134>)
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  402e56:	6037      	str	r7, [r6, #0]
	usart_settings.char_length = opt->charlength;
  402e58:	9105      	str	r1, [sp, #20]
	usart_settings.parity_type = opt->paritytype;
  402e5a:	9206      	str	r2, [sp, #24]
	usart_settings.stop_bits= opt->stopbits;
  402e5c:	9507      	str	r5, [sp, #28]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  402e5e:	9508      	str	r5, [sp, #32]
  402e60:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  402e62:	4a3f      	ldr	r2, [pc, #252]	; (402f60 <main+0x138>)
  402e64:	a904      	add	r1, sp, #16
  402e66:	4620      	mov	r0, r4
  402e68:	4b3e      	ldr	r3, [pc, #248]	; (402f64 <main+0x13c>)
  402e6a:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  402e6c:	4e3e      	ldr	r6, [pc, #248]	; (402f68 <main+0x140>)
		usart_enable_tx(p_usart);
  402e6e:	4620      	mov	r0, r4
  402e70:	4b3e      	ldr	r3, [pc, #248]	; (402f6c <main+0x144>)
  402e72:	4798      	blx	r3
		usart_enable_rx(p_usart);
  402e74:	4620      	mov	r0, r4
  402e76:	4b3e      	ldr	r3, [pc, #248]	; (402f70 <main+0x148>)
  402e78:	4798      	blx	r3
  402e7a:	6833      	ldr	r3, [r6, #0]
  402e7c:	4f3d      	ldr	r7, [pc, #244]	; (402f74 <main+0x14c>)
  402e7e:	4629      	mov	r1, r5
  402e80:	6898      	ldr	r0, [r3, #8]
  402e82:	47b8      	blx	r7
	setbuf(stdin, NULL);
  402e84:	6833      	ldr	r3, [r6, #0]
  402e86:	4629      	mov	r1, r5
	configure_console();
  	
	printf("Sys init ok \n");
  402e88:	4c3b      	ldr	r4, [pc, #236]	; (402f78 <main+0x150>)
  402e8a:	6858      	ldr	r0, [r3, #4]
  402e8c:	47b8      	blx	r7
  setbuf(stdout, NULL);
  402e8e:	6833      	ldr	r3, [r6, #0]
  402e90:	4629      	mov	r1, r5
  
	/* Attempt to create a semaphore. */
	xSemaphoreDwBut = xSemaphoreCreateBinary();
  402e92:	4e3a      	ldr	r6, [pc, #232]	; (402f7c <main+0x154>)
  setbuf(stdout, NULL);
  402e94:	6898      	ldr	r0, [r3, #8]
  402e96:	47b8      	blx	r7
	printf("Sys init ok \n");
  402e98:	4839      	ldr	r0, [pc, #228]	; (402f80 <main+0x158>)
  402e9a:	47a0      	blx	r4
	xSemaphoreDwBut = xSemaphoreCreateBinary();
  402e9c:	4629      	mov	r1, r5
  402e9e:	2203      	movs	r2, #3
  402ea0:	2001      	movs	r0, #1
  402ea2:	47b0      	blx	r6
  402ea4:	4b37      	ldr	r3, [pc, #220]	; (402f84 <main+0x15c>)
  402ea6:	6018      	str	r0, [r3, #0]
	if (xSemaphoreDwBut == NULL) {
  402ea8:	2800      	cmp	r0, #0
  402eaa:	d043      	beq.n	402f34 <main+0x10c>
		printf("falha em criar o semaforo dw \n");
	}
	
	/* Attempt to create a semaphore. */
	xSemaphoreBut = xSemaphoreCreateBinary();
  402eac:	2203      	movs	r2, #3
  402eae:	2100      	movs	r1, #0
  402eb0:	2001      	movs	r0, #1
  402eb2:	47b0      	blx	r6
  402eb4:	4b34      	ldr	r3, [pc, #208]	; (402f88 <main+0x160>)
  402eb6:	6018      	str	r0, [r3, #0]
	if (xSemaphoreBut == NULL) {
  402eb8:	2800      	cmp	r0, #0
  402eba:	d038      	beq.n	402f2e <main+0x106>
		printf("falha em criar o semaforo \n");
	}
  
	/* cria queue com 32 "espacos" */
	/* cada espaço possui o tamanho de um inteiro*/
	xQueueLedFreq = xQueueCreate(32, sizeof(uint32_t));
  402ebc:	2200      	movs	r2, #0
  402ebe:	2104      	movs	r1, #4
  402ec0:	2020      	movs	r0, #32
  402ec2:	47b0      	blx	r6
  402ec4:	4b31      	ldr	r3, [pc, #196]	; (402f8c <main+0x164>)
  402ec6:	6018      	str	r0, [r3, #0]
	if (xQueueLedFreq == NULL) {
  402ec8:	2800      	cmp	r0, #0
  402eca:	d02d      	beq.n	402f28 <main+0x100>
		printf("falha em criar a queue \n");
	}
	
	xQueueLedFreq2 = xQueueCreate(32, sizeof(uint32_t));
  402ecc:	2200      	movs	r2, #0
  402ece:	2104      	movs	r1, #4
  402ed0:	2020      	movs	r0, #32
  402ed2:	47b0      	blx	r6
  402ed4:	4b2e      	ldr	r3, [pc, #184]	; (402f90 <main+0x168>)
  402ed6:	6018      	str	r0, [r3, #0]
	if (xQueueLedFreq2 == NULL) {
  402ed8:	b318      	cbz	r0, 402f22 <main+0xfa>
		printf("falha em criar a queue 2 \n");
	}
	
	/* Create task to make led blink */
	if (xTaskCreate(task_led, "Led", TASK_LED_STACK_SIZE, NULL, TASK_LED_STACK_PRIORITY, NULL) != pdPASS) {
  402eda:	2000      	movs	r0, #0
  402edc:	f44f 6280 	mov.w	r2, #1024	; 0x400
  402ee0:	492c      	ldr	r1, [pc, #176]	; (402f94 <main+0x16c>)
  402ee2:	4603      	mov	r3, r0
  402ee4:	9003      	str	r0, [sp, #12]
  402ee6:	9002      	str	r0, [sp, #8]
  402ee8:	9001      	str	r0, [sp, #4]
  402eea:	9000      	str	r0, [sp, #0]
  402eec:	4d2a      	ldr	r5, [pc, #168]	; (402f98 <main+0x170>)
  402eee:	482b      	ldr	r0, [pc, #172]	; (402f9c <main+0x174>)
  402ef0:	47a8      	blx	r5
  402ef2:	2801      	cmp	r0, #1
		printf("Failed to create test led task\r\n");
  402ef4:	bf14      	ite	ne
  402ef6:	482a      	ldrne	r0, [pc, #168]	; (402fa0 <main+0x178>)
	} else {
		printf("task led created\r\n");
  402ef8:	482a      	ldreq	r0, [pc, #168]	; (402fa4 <main+0x17c>)
  402efa:	47a0      	blx	r4
	  
	}
	/* Create task to monitor processor activity */
	if (xTaskCreate(task_but, "BUT", TASK_BUT_STACK_SIZE, NULL, TASK_BUT_STACK_PRIORITY, NULL) != pdPASS) {
  402efc:	2000      	movs	r0, #0
  402efe:	f44f 6280 	mov.w	r2, #1024	; 0x400
  402f02:	4929      	ldr	r1, [pc, #164]	; (402fa8 <main+0x180>)
  402f04:	4603      	mov	r3, r0
  402f06:	9003      	str	r0, [sp, #12]
  402f08:	9002      	str	r0, [sp, #8]
  402f0a:	9001      	str	r0, [sp, #4]
  402f0c:	9000      	str	r0, [sp, #0]
  402f0e:	4827      	ldr	r0, [pc, #156]	; (402fac <main+0x184>)
  402f10:	47a8      	blx	r5
  402f12:	2801      	cmp	r0, #1
		printf("Failed to create UartTx task\r\n");
  402f14:	bf14      	ite	ne
  402f16:	4826      	ldrne	r0, [pc, #152]	; (402fb0 <main+0x188>)
	} else {
		printf("task but created\r\n");  
  402f18:	4826      	ldreq	r0, [pc, #152]	; (402fb4 <main+0x18c>)
  402f1a:	47a0      	blx	r4
	}

	/* Start the scheduler. */
	vTaskStartScheduler();
  402f1c:	4b26      	ldr	r3, [pc, #152]	; (402fb8 <main+0x190>)
  402f1e:	4798      	blx	r3
  402f20:	e7fe      	b.n	402f20 <main+0xf8>
		printf("falha em criar a queue 2 \n");
  402f22:	4826      	ldr	r0, [pc, #152]	; (402fbc <main+0x194>)
  402f24:	47a0      	blx	r4
  402f26:	e7d8      	b.n	402eda <main+0xb2>
		printf("falha em criar a queue \n");
  402f28:	4825      	ldr	r0, [pc, #148]	; (402fc0 <main+0x198>)
  402f2a:	47a0      	blx	r4
  402f2c:	e7ce      	b.n	402ecc <main+0xa4>
		printf("falha em criar o semaforo \n");
  402f2e:	4825      	ldr	r0, [pc, #148]	; (402fc4 <main+0x19c>)
  402f30:	47a0      	blx	r4
  402f32:	e7c3      	b.n	402ebc <main+0x94>
		printf("falha em criar o semaforo dw \n");
  402f34:	4824      	ldr	r0, [pc, #144]	; (402fc8 <main+0x1a0>)
  402f36:	47a0      	blx	r4
  402f38:	e7b8      	b.n	402eac <main+0x84>
  402f3a:	bf00      	nop
  402f3c:	004001ad 	.word	0x004001ad
  402f40:	20400bc8 	.word	0x20400bc8
  402f44:	004002ad 	.word	0x004002ad
  402f48:	00402c4d 	.word	0x00402c4d
  402f4c:	40028000 	.word	0x40028000
  402f50:	20400bcc 	.word	0x20400bcc
  402f54:	20400bc4 	.word	0x20400bc4
  402f58:	00402b71 	.word	0x00402b71
  402f5c:	00400849 	.word	0x00400849
  402f60:	08f0d180 	.word	0x08f0d180
  402f64:	00400915 	.word	0x00400915
  402f68:	2040000c 	.word	0x2040000c
  402f6c:	00400979 	.word	0x00400979
  402f70:	00400981 	.word	0x00400981
  402f74:	004037d1 	.word	0x004037d1
  402f78:	0040301d 	.word	0x0040301d
  402f7c:	004012cd 	.word	0x004012cd
  402f80:	00405f98 	.word	0x00405f98
  402f84:	20400c1c 	.word	0x20400c1c
  402f88:	20400c14 	.word	0x20400c14
  402f8c:	20400c18 	.word	0x20400c18
  402f90:	20400c10 	.word	0x20400c10
  402f94:	0040601c 	.word	0x0040601c
  402f98:	00401bc9 	.word	0x00401bc9
  402f9c:	00402dad 	.word	0x00402dad
  402fa0:	00406020 	.word	0x00406020
  402fa4:	00406044 	.word	0x00406044
  402fa8:	00406058 	.word	0x00406058
  402fac:	00402a2d 	.word	0x00402a2d
  402fb0:	0040605c 	.word	0x0040605c
  402fb4:	0040607c 	.word	0x0040607c
  402fb8:	00401c15 	.word	0x00401c15
  402fbc:	00406000 	.word	0x00406000
  402fc0:	00405fe4 	.word	0x00405fe4
  402fc4:	00405fc8 	.word	0x00405fc8
  402fc8:	00405fa8 	.word	0x00405fa8

00402fcc <__libc_init_array>:
  402fcc:	b570      	push	{r4, r5, r6, lr}
  402fce:	4e0f      	ldr	r6, [pc, #60]	; (40300c <__libc_init_array+0x40>)
  402fd0:	4d0f      	ldr	r5, [pc, #60]	; (403010 <__libc_init_array+0x44>)
  402fd2:	1b76      	subs	r6, r6, r5
  402fd4:	10b6      	asrs	r6, r6, #2
  402fd6:	bf18      	it	ne
  402fd8:	2400      	movne	r4, #0
  402fda:	d005      	beq.n	402fe8 <__libc_init_array+0x1c>
  402fdc:	3401      	adds	r4, #1
  402fde:	f855 3b04 	ldr.w	r3, [r5], #4
  402fe2:	4798      	blx	r3
  402fe4:	42a6      	cmp	r6, r4
  402fe6:	d1f9      	bne.n	402fdc <__libc_init_array+0x10>
  402fe8:	4e0a      	ldr	r6, [pc, #40]	; (403014 <__libc_init_array+0x48>)
  402fea:	4d0b      	ldr	r5, [pc, #44]	; (403018 <__libc_init_array+0x4c>)
  402fec:	1b76      	subs	r6, r6, r5
  402fee:	f003 f94b 	bl	406288 <_init>
  402ff2:	10b6      	asrs	r6, r6, #2
  402ff4:	bf18      	it	ne
  402ff6:	2400      	movne	r4, #0
  402ff8:	d006      	beq.n	403008 <__libc_init_array+0x3c>
  402ffa:	3401      	adds	r4, #1
  402ffc:	f855 3b04 	ldr.w	r3, [r5], #4
  403000:	4798      	blx	r3
  403002:	42a6      	cmp	r6, r4
  403004:	d1f9      	bne.n	402ffa <__libc_init_array+0x2e>
  403006:	bd70      	pop	{r4, r5, r6, pc}
  403008:	bd70      	pop	{r4, r5, r6, pc}
  40300a:	bf00      	nop
  40300c:	00406294 	.word	0x00406294
  403010:	00406294 	.word	0x00406294
  403014:	0040629c 	.word	0x0040629c
  403018:	00406294 	.word	0x00406294

0040301c <iprintf>:
  40301c:	b40f      	push	{r0, r1, r2, r3}
  40301e:	b500      	push	{lr}
  403020:	4907      	ldr	r1, [pc, #28]	; (403040 <iprintf+0x24>)
  403022:	b083      	sub	sp, #12
  403024:	ab04      	add	r3, sp, #16
  403026:	6808      	ldr	r0, [r1, #0]
  403028:	f853 2b04 	ldr.w	r2, [r3], #4
  40302c:	6881      	ldr	r1, [r0, #8]
  40302e:	9301      	str	r3, [sp, #4]
  403030:	f000 fd54 	bl	403adc <_vfiprintf_r>
  403034:	b003      	add	sp, #12
  403036:	f85d eb04 	ldr.w	lr, [sp], #4
  40303a:	b004      	add	sp, #16
  40303c:	4770      	bx	lr
  40303e:	bf00      	nop
  403040:	2040000c 	.word	0x2040000c

00403044 <malloc>:
  403044:	4b02      	ldr	r3, [pc, #8]	; (403050 <malloc+0xc>)
  403046:	4601      	mov	r1, r0
  403048:	6818      	ldr	r0, [r3, #0]
  40304a:	f000 b80b 	b.w	403064 <_malloc_r>
  40304e:	bf00      	nop
  403050:	2040000c 	.word	0x2040000c

00403054 <free>:
  403054:	4b02      	ldr	r3, [pc, #8]	; (403060 <free+0xc>)
  403056:	4601      	mov	r1, r0
  403058:	6818      	ldr	r0, [r3, #0]
  40305a:	f001 be5b 	b.w	404d14 <_free_r>
  40305e:	bf00      	nop
  403060:	2040000c 	.word	0x2040000c

00403064 <_malloc_r>:
  403064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403068:	f101 060b 	add.w	r6, r1, #11
  40306c:	2e16      	cmp	r6, #22
  40306e:	b083      	sub	sp, #12
  403070:	4605      	mov	r5, r0
  403072:	f240 809e 	bls.w	4031b2 <_malloc_r+0x14e>
  403076:	f036 0607 	bics.w	r6, r6, #7
  40307a:	f100 80bd 	bmi.w	4031f8 <_malloc_r+0x194>
  40307e:	42b1      	cmp	r1, r6
  403080:	f200 80ba 	bhi.w	4031f8 <_malloc_r+0x194>
  403084:	f000 fb86 	bl	403794 <__malloc_lock>
  403088:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  40308c:	f0c0 8293 	bcc.w	4035b6 <_malloc_r+0x552>
  403090:	0a73      	lsrs	r3, r6, #9
  403092:	f000 80b8 	beq.w	403206 <_malloc_r+0x1a2>
  403096:	2b04      	cmp	r3, #4
  403098:	f200 8179 	bhi.w	40338e <_malloc_r+0x32a>
  40309c:	09b3      	lsrs	r3, r6, #6
  40309e:	f103 0039 	add.w	r0, r3, #57	; 0x39
  4030a2:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  4030a6:	00c3      	lsls	r3, r0, #3
  4030a8:	4fbf      	ldr	r7, [pc, #764]	; (4033a8 <_malloc_r+0x344>)
  4030aa:	443b      	add	r3, r7
  4030ac:	f1a3 0108 	sub.w	r1, r3, #8
  4030b0:	685c      	ldr	r4, [r3, #4]
  4030b2:	42a1      	cmp	r1, r4
  4030b4:	d106      	bne.n	4030c4 <_malloc_r+0x60>
  4030b6:	e00c      	b.n	4030d2 <_malloc_r+0x6e>
  4030b8:	2a00      	cmp	r2, #0
  4030ba:	f280 80aa 	bge.w	403212 <_malloc_r+0x1ae>
  4030be:	68e4      	ldr	r4, [r4, #12]
  4030c0:	42a1      	cmp	r1, r4
  4030c2:	d006      	beq.n	4030d2 <_malloc_r+0x6e>
  4030c4:	6863      	ldr	r3, [r4, #4]
  4030c6:	f023 0303 	bic.w	r3, r3, #3
  4030ca:	1b9a      	subs	r2, r3, r6
  4030cc:	2a0f      	cmp	r2, #15
  4030ce:	ddf3      	ble.n	4030b8 <_malloc_r+0x54>
  4030d0:	4670      	mov	r0, lr
  4030d2:	693c      	ldr	r4, [r7, #16]
  4030d4:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 4033bc <_malloc_r+0x358>
  4030d8:	4574      	cmp	r4, lr
  4030da:	f000 81ab 	beq.w	403434 <_malloc_r+0x3d0>
  4030de:	6863      	ldr	r3, [r4, #4]
  4030e0:	f023 0303 	bic.w	r3, r3, #3
  4030e4:	1b9a      	subs	r2, r3, r6
  4030e6:	2a0f      	cmp	r2, #15
  4030e8:	f300 8190 	bgt.w	40340c <_malloc_r+0x3a8>
  4030ec:	2a00      	cmp	r2, #0
  4030ee:	f8c7 e014 	str.w	lr, [r7, #20]
  4030f2:	f8c7 e010 	str.w	lr, [r7, #16]
  4030f6:	f280 809d 	bge.w	403234 <_malloc_r+0x1d0>
  4030fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4030fe:	f080 8161 	bcs.w	4033c4 <_malloc_r+0x360>
  403102:	08db      	lsrs	r3, r3, #3
  403104:	f103 0c01 	add.w	ip, r3, #1
  403108:	1099      	asrs	r1, r3, #2
  40310a:	687a      	ldr	r2, [r7, #4]
  40310c:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  403110:	f8c4 8008 	str.w	r8, [r4, #8]
  403114:	2301      	movs	r3, #1
  403116:	408b      	lsls	r3, r1
  403118:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  40311c:	4313      	orrs	r3, r2
  40311e:	3908      	subs	r1, #8
  403120:	60e1      	str	r1, [r4, #12]
  403122:	607b      	str	r3, [r7, #4]
  403124:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  403128:	f8c8 400c 	str.w	r4, [r8, #12]
  40312c:	1082      	asrs	r2, r0, #2
  40312e:	2401      	movs	r4, #1
  403130:	4094      	lsls	r4, r2
  403132:	429c      	cmp	r4, r3
  403134:	f200 808b 	bhi.w	40324e <_malloc_r+0x1ea>
  403138:	421c      	tst	r4, r3
  40313a:	d106      	bne.n	40314a <_malloc_r+0xe6>
  40313c:	f020 0003 	bic.w	r0, r0, #3
  403140:	0064      	lsls	r4, r4, #1
  403142:	421c      	tst	r4, r3
  403144:	f100 0004 	add.w	r0, r0, #4
  403148:	d0fa      	beq.n	403140 <_malloc_r+0xdc>
  40314a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40314e:	46cc      	mov	ip, r9
  403150:	4680      	mov	r8, r0
  403152:	f8dc 300c 	ldr.w	r3, [ip, #12]
  403156:	459c      	cmp	ip, r3
  403158:	d107      	bne.n	40316a <_malloc_r+0x106>
  40315a:	e16d      	b.n	403438 <_malloc_r+0x3d4>
  40315c:	2a00      	cmp	r2, #0
  40315e:	f280 817b 	bge.w	403458 <_malloc_r+0x3f4>
  403162:	68db      	ldr	r3, [r3, #12]
  403164:	459c      	cmp	ip, r3
  403166:	f000 8167 	beq.w	403438 <_malloc_r+0x3d4>
  40316a:	6859      	ldr	r1, [r3, #4]
  40316c:	f021 0103 	bic.w	r1, r1, #3
  403170:	1b8a      	subs	r2, r1, r6
  403172:	2a0f      	cmp	r2, #15
  403174:	ddf2      	ble.n	40315c <_malloc_r+0xf8>
  403176:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40317a:	f8d3 8008 	ldr.w	r8, [r3, #8]
  40317e:	9300      	str	r3, [sp, #0]
  403180:	199c      	adds	r4, r3, r6
  403182:	4628      	mov	r0, r5
  403184:	f046 0601 	orr.w	r6, r6, #1
  403188:	f042 0501 	orr.w	r5, r2, #1
  40318c:	605e      	str	r6, [r3, #4]
  40318e:	f8c8 c00c 	str.w	ip, [r8, #12]
  403192:	f8cc 8008 	str.w	r8, [ip, #8]
  403196:	617c      	str	r4, [r7, #20]
  403198:	613c      	str	r4, [r7, #16]
  40319a:	f8c4 e00c 	str.w	lr, [r4, #12]
  40319e:	f8c4 e008 	str.w	lr, [r4, #8]
  4031a2:	6065      	str	r5, [r4, #4]
  4031a4:	505a      	str	r2, [r3, r1]
  4031a6:	f000 fafb 	bl	4037a0 <__malloc_unlock>
  4031aa:	9b00      	ldr	r3, [sp, #0]
  4031ac:	f103 0408 	add.w	r4, r3, #8
  4031b0:	e01e      	b.n	4031f0 <_malloc_r+0x18c>
  4031b2:	2910      	cmp	r1, #16
  4031b4:	d820      	bhi.n	4031f8 <_malloc_r+0x194>
  4031b6:	f000 faed 	bl	403794 <__malloc_lock>
  4031ba:	2610      	movs	r6, #16
  4031bc:	2318      	movs	r3, #24
  4031be:	2002      	movs	r0, #2
  4031c0:	4f79      	ldr	r7, [pc, #484]	; (4033a8 <_malloc_r+0x344>)
  4031c2:	443b      	add	r3, r7
  4031c4:	f1a3 0208 	sub.w	r2, r3, #8
  4031c8:	685c      	ldr	r4, [r3, #4]
  4031ca:	4294      	cmp	r4, r2
  4031cc:	f000 813d 	beq.w	40344a <_malloc_r+0x3e6>
  4031d0:	6863      	ldr	r3, [r4, #4]
  4031d2:	68e1      	ldr	r1, [r4, #12]
  4031d4:	68a6      	ldr	r6, [r4, #8]
  4031d6:	f023 0303 	bic.w	r3, r3, #3
  4031da:	4423      	add	r3, r4
  4031dc:	4628      	mov	r0, r5
  4031de:	685a      	ldr	r2, [r3, #4]
  4031e0:	60f1      	str	r1, [r6, #12]
  4031e2:	f042 0201 	orr.w	r2, r2, #1
  4031e6:	608e      	str	r6, [r1, #8]
  4031e8:	605a      	str	r2, [r3, #4]
  4031ea:	f000 fad9 	bl	4037a0 <__malloc_unlock>
  4031ee:	3408      	adds	r4, #8
  4031f0:	4620      	mov	r0, r4
  4031f2:	b003      	add	sp, #12
  4031f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4031f8:	2400      	movs	r4, #0
  4031fa:	230c      	movs	r3, #12
  4031fc:	4620      	mov	r0, r4
  4031fe:	602b      	str	r3, [r5, #0]
  403200:	b003      	add	sp, #12
  403202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403206:	2040      	movs	r0, #64	; 0x40
  403208:	f44f 7300 	mov.w	r3, #512	; 0x200
  40320c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  403210:	e74a      	b.n	4030a8 <_malloc_r+0x44>
  403212:	4423      	add	r3, r4
  403214:	68e1      	ldr	r1, [r4, #12]
  403216:	685a      	ldr	r2, [r3, #4]
  403218:	68a6      	ldr	r6, [r4, #8]
  40321a:	f042 0201 	orr.w	r2, r2, #1
  40321e:	60f1      	str	r1, [r6, #12]
  403220:	4628      	mov	r0, r5
  403222:	608e      	str	r6, [r1, #8]
  403224:	605a      	str	r2, [r3, #4]
  403226:	f000 fabb 	bl	4037a0 <__malloc_unlock>
  40322a:	3408      	adds	r4, #8
  40322c:	4620      	mov	r0, r4
  40322e:	b003      	add	sp, #12
  403230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403234:	4423      	add	r3, r4
  403236:	4628      	mov	r0, r5
  403238:	685a      	ldr	r2, [r3, #4]
  40323a:	f042 0201 	orr.w	r2, r2, #1
  40323e:	605a      	str	r2, [r3, #4]
  403240:	f000 faae 	bl	4037a0 <__malloc_unlock>
  403244:	3408      	adds	r4, #8
  403246:	4620      	mov	r0, r4
  403248:	b003      	add	sp, #12
  40324a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40324e:	68bc      	ldr	r4, [r7, #8]
  403250:	6863      	ldr	r3, [r4, #4]
  403252:	f023 0803 	bic.w	r8, r3, #3
  403256:	45b0      	cmp	r8, r6
  403258:	d304      	bcc.n	403264 <_malloc_r+0x200>
  40325a:	eba8 0306 	sub.w	r3, r8, r6
  40325e:	2b0f      	cmp	r3, #15
  403260:	f300 8085 	bgt.w	40336e <_malloc_r+0x30a>
  403264:	f8df 9158 	ldr.w	r9, [pc, #344]	; 4033c0 <_malloc_r+0x35c>
  403268:	4b50      	ldr	r3, [pc, #320]	; (4033ac <_malloc_r+0x348>)
  40326a:	f8d9 2000 	ldr.w	r2, [r9]
  40326e:	681b      	ldr	r3, [r3, #0]
  403270:	3201      	adds	r2, #1
  403272:	4433      	add	r3, r6
  403274:	eb04 0a08 	add.w	sl, r4, r8
  403278:	f000 8155 	beq.w	403526 <_malloc_r+0x4c2>
  40327c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  403280:	330f      	adds	r3, #15
  403282:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  403286:	f02b 0b0f 	bic.w	fp, fp, #15
  40328a:	4659      	mov	r1, fp
  40328c:	4628      	mov	r0, r5
  40328e:	f000 fa8d 	bl	4037ac <_sbrk_r>
  403292:	1c41      	adds	r1, r0, #1
  403294:	4602      	mov	r2, r0
  403296:	f000 80fc 	beq.w	403492 <_malloc_r+0x42e>
  40329a:	4582      	cmp	sl, r0
  40329c:	f200 80f7 	bhi.w	40348e <_malloc_r+0x42a>
  4032a0:	4b43      	ldr	r3, [pc, #268]	; (4033b0 <_malloc_r+0x34c>)
  4032a2:	6819      	ldr	r1, [r3, #0]
  4032a4:	4459      	add	r1, fp
  4032a6:	6019      	str	r1, [r3, #0]
  4032a8:	f000 814d 	beq.w	403546 <_malloc_r+0x4e2>
  4032ac:	f8d9 0000 	ldr.w	r0, [r9]
  4032b0:	3001      	adds	r0, #1
  4032b2:	bf1b      	ittet	ne
  4032b4:	eba2 0a0a 	subne.w	sl, r2, sl
  4032b8:	4451      	addne	r1, sl
  4032ba:	f8c9 2000 	streq.w	r2, [r9]
  4032be:	6019      	strne	r1, [r3, #0]
  4032c0:	f012 0107 	ands.w	r1, r2, #7
  4032c4:	f000 8115 	beq.w	4034f2 <_malloc_r+0x48e>
  4032c8:	f1c1 0008 	rsb	r0, r1, #8
  4032cc:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  4032d0:	4402      	add	r2, r0
  4032d2:	3108      	adds	r1, #8
  4032d4:	eb02 090b 	add.w	r9, r2, fp
  4032d8:	f3c9 090b 	ubfx	r9, r9, #0, #12
  4032dc:	eba1 0909 	sub.w	r9, r1, r9
  4032e0:	4649      	mov	r1, r9
  4032e2:	4628      	mov	r0, r5
  4032e4:	9301      	str	r3, [sp, #4]
  4032e6:	9200      	str	r2, [sp, #0]
  4032e8:	f000 fa60 	bl	4037ac <_sbrk_r>
  4032ec:	1c43      	adds	r3, r0, #1
  4032ee:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4032f2:	f000 8143 	beq.w	40357c <_malloc_r+0x518>
  4032f6:	1a80      	subs	r0, r0, r2
  4032f8:	4448      	add	r0, r9
  4032fa:	f040 0001 	orr.w	r0, r0, #1
  4032fe:	6819      	ldr	r1, [r3, #0]
  403300:	60ba      	str	r2, [r7, #8]
  403302:	4449      	add	r1, r9
  403304:	42bc      	cmp	r4, r7
  403306:	6050      	str	r0, [r2, #4]
  403308:	6019      	str	r1, [r3, #0]
  40330a:	d017      	beq.n	40333c <_malloc_r+0x2d8>
  40330c:	f1b8 0f0f 	cmp.w	r8, #15
  403310:	f240 80fb 	bls.w	40350a <_malloc_r+0x4a6>
  403314:	6860      	ldr	r0, [r4, #4]
  403316:	f1a8 020c 	sub.w	r2, r8, #12
  40331a:	f022 0207 	bic.w	r2, r2, #7
  40331e:	eb04 0e02 	add.w	lr, r4, r2
  403322:	f000 0001 	and.w	r0, r0, #1
  403326:	f04f 0c05 	mov.w	ip, #5
  40332a:	4310      	orrs	r0, r2
  40332c:	2a0f      	cmp	r2, #15
  40332e:	6060      	str	r0, [r4, #4]
  403330:	f8ce c004 	str.w	ip, [lr, #4]
  403334:	f8ce c008 	str.w	ip, [lr, #8]
  403338:	f200 8117 	bhi.w	40356a <_malloc_r+0x506>
  40333c:	4b1d      	ldr	r3, [pc, #116]	; (4033b4 <_malloc_r+0x350>)
  40333e:	68bc      	ldr	r4, [r7, #8]
  403340:	681a      	ldr	r2, [r3, #0]
  403342:	4291      	cmp	r1, r2
  403344:	bf88      	it	hi
  403346:	6019      	strhi	r1, [r3, #0]
  403348:	4b1b      	ldr	r3, [pc, #108]	; (4033b8 <_malloc_r+0x354>)
  40334a:	681a      	ldr	r2, [r3, #0]
  40334c:	4291      	cmp	r1, r2
  40334e:	6862      	ldr	r2, [r4, #4]
  403350:	bf88      	it	hi
  403352:	6019      	strhi	r1, [r3, #0]
  403354:	f022 0203 	bic.w	r2, r2, #3
  403358:	4296      	cmp	r6, r2
  40335a:	eba2 0306 	sub.w	r3, r2, r6
  40335e:	d801      	bhi.n	403364 <_malloc_r+0x300>
  403360:	2b0f      	cmp	r3, #15
  403362:	dc04      	bgt.n	40336e <_malloc_r+0x30a>
  403364:	4628      	mov	r0, r5
  403366:	f000 fa1b 	bl	4037a0 <__malloc_unlock>
  40336a:	2400      	movs	r4, #0
  40336c:	e740      	b.n	4031f0 <_malloc_r+0x18c>
  40336e:	19a2      	adds	r2, r4, r6
  403370:	f043 0301 	orr.w	r3, r3, #1
  403374:	f046 0601 	orr.w	r6, r6, #1
  403378:	6066      	str	r6, [r4, #4]
  40337a:	4628      	mov	r0, r5
  40337c:	60ba      	str	r2, [r7, #8]
  40337e:	6053      	str	r3, [r2, #4]
  403380:	f000 fa0e 	bl	4037a0 <__malloc_unlock>
  403384:	3408      	adds	r4, #8
  403386:	4620      	mov	r0, r4
  403388:	b003      	add	sp, #12
  40338a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40338e:	2b14      	cmp	r3, #20
  403390:	d971      	bls.n	403476 <_malloc_r+0x412>
  403392:	2b54      	cmp	r3, #84	; 0x54
  403394:	f200 80a3 	bhi.w	4034de <_malloc_r+0x47a>
  403398:	0b33      	lsrs	r3, r6, #12
  40339a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40339e:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  4033a2:	00c3      	lsls	r3, r0, #3
  4033a4:	e680      	b.n	4030a8 <_malloc_r+0x44>
  4033a6:	bf00      	nop
  4033a8:	20400438 	.word	0x20400438
  4033ac:	20400bc0 	.word	0x20400bc0
  4033b0:	20400b90 	.word	0x20400b90
  4033b4:	20400bb8 	.word	0x20400bb8
  4033b8:	20400bbc 	.word	0x20400bbc
  4033bc:	20400440 	.word	0x20400440
  4033c0:	20400840 	.word	0x20400840
  4033c4:	0a5a      	lsrs	r2, r3, #9
  4033c6:	2a04      	cmp	r2, #4
  4033c8:	d95b      	bls.n	403482 <_malloc_r+0x41e>
  4033ca:	2a14      	cmp	r2, #20
  4033cc:	f200 80ae 	bhi.w	40352c <_malloc_r+0x4c8>
  4033d0:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4033d4:	00c9      	lsls	r1, r1, #3
  4033d6:	325b      	adds	r2, #91	; 0x5b
  4033d8:	eb07 0c01 	add.w	ip, r7, r1
  4033dc:	5879      	ldr	r1, [r7, r1]
  4033de:	f1ac 0c08 	sub.w	ip, ip, #8
  4033e2:	458c      	cmp	ip, r1
  4033e4:	f000 8088 	beq.w	4034f8 <_malloc_r+0x494>
  4033e8:	684a      	ldr	r2, [r1, #4]
  4033ea:	f022 0203 	bic.w	r2, r2, #3
  4033ee:	4293      	cmp	r3, r2
  4033f0:	d273      	bcs.n	4034da <_malloc_r+0x476>
  4033f2:	6889      	ldr	r1, [r1, #8]
  4033f4:	458c      	cmp	ip, r1
  4033f6:	d1f7      	bne.n	4033e8 <_malloc_r+0x384>
  4033f8:	f8dc 200c 	ldr.w	r2, [ip, #12]
  4033fc:	687b      	ldr	r3, [r7, #4]
  4033fe:	60e2      	str	r2, [r4, #12]
  403400:	f8c4 c008 	str.w	ip, [r4, #8]
  403404:	6094      	str	r4, [r2, #8]
  403406:	f8cc 400c 	str.w	r4, [ip, #12]
  40340a:	e68f      	b.n	40312c <_malloc_r+0xc8>
  40340c:	19a1      	adds	r1, r4, r6
  40340e:	f046 0c01 	orr.w	ip, r6, #1
  403412:	f042 0601 	orr.w	r6, r2, #1
  403416:	f8c4 c004 	str.w	ip, [r4, #4]
  40341a:	4628      	mov	r0, r5
  40341c:	6179      	str	r1, [r7, #20]
  40341e:	6139      	str	r1, [r7, #16]
  403420:	f8c1 e00c 	str.w	lr, [r1, #12]
  403424:	f8c1 e008 	str.w	lr, [r1, #8]
  403428:	604e      	str	r6, [r1, #4]
  40342a:	50e2      	str	r2, [r4, r3]
  40342c:	f000 f9b8 	bl	4037a0 <__malloc_unlock>
  403430:	3408      	adds	r4, #8
  403432:	e6dd      	b.n	4031f0 <_malloc_r+0x18c>
  403434:	687b      	ldr	r3, [r7, #4]
  403436:	e679      	b.n	40312c <_malloc_r+0xc8>
  403438:	f108 0801 	add.w	r8, r8, #1
  40343c:	f018 0f03 	tst.w	r8, #3
  403440:	f10c 0c08 	add.w	ip, ip, #8
  403444:	f47f ae85 	bne.w	403152 <_malloc_r+0xee>
  403448:	e02d      	b.n	4034a6 <_malloc_r+0x442>
  40344a:	68dc      	ldr	r4, [r3, #12]
  40344c:	42a3      	cmp	r3, r4
  40344e:	bf08      	it	eq
  403450:	3002      	addeq	r0, #2
  403452:	f43f ae3e 	beq.w	4030d2 <_malloc_r+0x6e>
  403456:	e6bb      	b.n	4031d0 <_malloc_r+0x16c>
  403458:	4419      	add	r1, r3
  40345a:	461c      	mov	r4, r3
  40345c:	684a      	ldr	r2, [r1, #4]
  40345e:	68db      	ldr	r3, [r3, #12]
  403460:	f854 6f08 	ldr.w	r6, [r4, #8]!
  403464:	f042 0201 	orr.w	r2, r2, #1
  403468:	604a      	str	r2, [r1, #4]
  40346a:	4628      	mov	r0, r5
  40346c:	60f3      	str	r3, [r6, #12]
  40346e:	609e      	str	r6, [r3, #8]
  403470:	f000 f996 	bl	4037a0 <__malloc_unlock>
  403474:	e6bc      	b.n	4031f0 <_malloc_r+0x18c>
  403476:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  40347a:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  40347e:	00c3      	lsls	r3, r0, #3
  403480:	e612      	b.n	4030a8 <_malloc_r+0x44>
  403482:	099a      	lsrs	r2, r3, #6
  403484:	f102 0139 	add.w	r1, r2, #57	; 0x39
  403488:	00c9      	lsls	r1, r1, #3
  40348a:	3238      	adds	r2, #56	; 0x38
  40348c:	e7a4      	b.n	4033d8 <_malloc_r+0x374>
  40348e:	42bc      	cmp	r4, r7
  403490:	d054      	beq.n	40353c <_malloc_r+0x4d8>
  403492:	68bc      	ldr	r4, [r7, #8]
  403494:	6862      	ldr	r2, [r4, #4]
  403496:	f022 0203 	bic.w	r2, r2, #3
  40349a:	e75d      	b.n	403358 <_malloc_r+0x2f4>
  40349c:	f859 3908 	ldr.w	r3, [r9], #-8
  4034a0:	4599      	cmp	r9, r3
  4034a2:	f040 8086 	bne.w	4035b2 <_malloc_r+0x54e>
  4034a6:	f010 0f03 	tst.w	r0, #3
  4034aa:	f100 30ff 	add.w	r0, r0, #4294967295
  4034ae:	d1f5      	bne.n	40349c <_malloc_r+0x438>
  4034b0:	687b      	ldr	r3, [r7, #4]
  4034b2:	ea23 0304 	bic.w	r3, r3, r4
  4034b6:	607b      	str	r3, [r7, #4]
  4034b8:	0064      	lsls	r4, r4, #1
  4034ba:	429c      	cmp	r4, r3
  4034bc:	f63f aec7 	bhi.w	40324e <_malloc_r+0x1ea>
  4034c0:	2c00      	cmp	r4, #0
  4034c2:	f43f aec4 	beq.w	40324e <_malloc_r+0x1ea>
  4034c6:	421c      	tst	r4, r3
  4034c8:	4640      	mov	r0, r8
  4034ca:	f47f ae3e 	bne.w	40314a <_malloc_r+0xe6>
  4034ce:	0064      	lsls	r4, r4, #1
  4034d0:	421c      	tst	r4, r3
  4034d2:	f100 0004 	add.w	r0, r0, #4
  4034d6:	d0fa      	beq.n	4034ce <_malloc_r+0x46a>
  4034d8:	e637      	b.n	40314a <_malloc_r+0xe6>
  4034da:	468c      	mov	ip, r1
  4034dc:	e78c      	b.n	4033f8 <_malloc_r+0x394>
  4034de:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4034e2:	d815      	bhi.n	403510 <_malloc_r+0x4ac>
  4034e4:	0bf3      	lsrs	r3, r6, #15
  4034e6:	f103 0078 	add.w	r0, r3, #120	; 0x78
  4034ea:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  4034ee:	00c3      	lsls	r3, r0, #3
  4034f0:	e5da      	b.n	4030a8 <_malloc_r+0x44>
  4034f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4034f6:	e6ed      	b.n	4032d4 <_malloc_r+0x270>
  4034f8:	687b      	ldr	r3, [r7, #4]
  4034fa:	1092      	asrs	r2, r2, #2
  4034fc:	2101      	movs	r1, #1
  4034fe:	fa01 f202 	lsl.w	r2, r1, r2
  403502:	4313      	orrs	r3, r2
  403504:	607b      	str	r3, [r7, #4]
  403506:	4662      	mov	r2, ip
  403508:	e779      	b.n	4033fe <_malloc_r+0x39a>
  40350a:	2301      	movs	r3, #1
  40350c:	6053      	str	r3, [r2, #4]
  40350e:	e729      	b.n	403364 <_malloc_r+0x300>
  403510:	f240 5254 	movw	r2, #1364	; 0x554
  403514:	4293      	cmp	r3, r2
  403516:	d822      	bhi.n	40355e <_malloc_r+0x4fa>
  403518:	0cb3      	lsrs	r3, r6, #18
  40351a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  40351e:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  403522:	00c3      	lsls	r3, r0, #3
  403524:	e5c0      	b.n	4030a8 <_malloc_r+0x44>
  403526:	f103 0b10 	add.w	fp, r3, #16
  40352a:	e6ae      	b.n	40328a <_malloc_r+0x226>
  40352c:	2a54      	cmp	r2, #84	; 0x54
  40352e:	d829      	bhi.n	403584 <_malloc_r+0x520>
  403530:	0b1a      	lsrs	r2, r3, #12
  403532:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  403536:	00c9      	lsls	r1, r1, #3
  403538:	326e      	adds	r2, #110	; 0x6e
  40353a:	e74d      	b.n	4033d8 <_malloc_r+0x374>
  40353c:	4b20      	ldr	r3, [pc, #128]	; (4035c0 <_malloc_r+0x55c>)
  40353e:	6819      	ldr	r1, [r3, #0]
  403540:	4459      	add	r1, fp
  403542:	6019      	str	r1, [r3, #0]
  403544:	e6b2      	b.n	4032ac <_malloc_r+0x248>
  403546:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40354a:	2800      	cmp	r0, #0
  40354c:	f47f aeae 	bne.w	4032ac <_malloc_r+0x248>
  403550:	eb08 030b 	add.w	r3, r8, fp
  403554:	68ba      	ldr	r2, [r7, #8]
  403556:	f043 0301 	orr.w	r3, r3, #1
  40355a:	6053      	str	r3, [r2, #4]
  40355c:	e6ee      	b.n	40333c <_malloc_r+0x2d8>
  40355e:	207f      	movs	r0, #127	; 0x7f
  403560:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  403564:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  403568:	e59e      	b.n	4030a8 <_malloc_r+0x44>
  40356a:	f104 0108 	add.w	r1, r4, #8
  40356e:	4628      	mov	r0, r5
  403570:	9300      	str	r3, [sp, #0]
  403572:	f001 fbcf 	bl	404d14 <_free_r>
  403576:	9b00      	ldr	r3, [sp, #0]
  403578:	6819      	ldr	r1, [r3, #0]
  40357a:	e6df      	b.n	40333c <_malloc_r+0x2d8>
  40357c:	2001      	movs	r0, #1
  40357e:	f04f 0900 	mov.w	r9, #0
  403582:	e6bc      	b.n	4032fe <_malloc_r+0x29a>
  403584:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403588:	d805      	bhi.n	403596 <_malloc_r+0x532>
  40358a:	0bda      	lsrs	r2, r3, #15
  40358c:	f102 0178 	add.w	r1, r2, #120	; 0x78
  403590:	00c9      	lsls	r1, r1, #3
  403592:	3277      	adds	r2, #119	; 0x77
  403594:	e720      	b.n	4033d8 <_malloc_r+0x374>
  403596:	f240 5154 	movw	r1, #1364	; 0x554
  40359a:	428a      	cmp	r2, r1
  40359c:	d805      	bhi.n	4035aa <_malloc_r+0x546>
  40359e:	0c9a      	lsrs	r2, r3, #18
  4035a0:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  4035a4:	00c9      	lsls	r1, r1, #3
  4035a6:	327c      	adds	r2, #124	; 0x7c
  4035a8:	e716      	b.n	4033d8 <_malloc_r+0x374>
  4035aa:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  4035ae:	227e      	movs	r2, #126	; 0x7e
  4035b0:	e712      	b.n	4033d8 <_malloc_r+0x374>
  4035b2:	687b      	ldr	r3, [r7, #4]
  4035b4:	e780      	b.n	4034b8 <_malloc_r+0x454>
  4035b6:	08f0      	lsrs	r0, r6, #3
  4035b8:	f106 0308 	add.w	r3, r6, #8
  4035bc:	e600      	b.n	4031c0 <_malloc_r+0x15c>
  4035be:	bf00      	nop
  4035c0:	20400b90 	.word	0x20400b90

004035c4 <memcpy>:
  4035c4:	4684      	mov	ip, r0
  4035c6:	ea41 0300 	orr.w	r3, r1, r0
  4035ca:	f013 0303 	ands.w	r3, r3, #3
  4035ce:	d16d      	bne.n	4036ac <memcpy+0xe8>
  4035d0:	3a40      	subs	r2, #64	; 0x40
  4035d2:	d341      	bcc.n	403658 <memcpy+0x94>
  4035d4:	f851 3b04 	ldr.w	r3, [r1], #4
  4035d8:	f840 3b04 	str.w	r3, [r0], #4
  4035dc:	f851 3b04 	ldr.w	r3, [r1], #4
  4035e0:	f840 3b04 	str.w	r3, [r0], #4
  4035e4:	f851 3b04 	ldr.w	r3, [r1], #4
  4035e8:	f840 3b04 	str.w	r3, [r0], #4
  4035ec:	f851 3b04 	ldr.w	r3, [r1], #4
  4035f0:	f840 3b04 	str.w	r3, [r0], #4
  4035f4:	f851 3b04 	ldr.w	r3, [r1], #4
  4035f8:	f840 3b04 	str.w	r3, [r0], #4
  4035fc:	f851 3b04 	ldr.w	r3, [r1], #4
  403600:	f840 3b04 	str.w	r3, [r0], #4
  403604:	f851 3b04 	ldr.w	r3, [r1], #4
  403608:	f840 3b04 	str.w	r3, [r0], #4
  40360c:	f851 3b04 	ldr.w	r3, [r1], #4
  403610:	f840 3b04 	str.w	r3, [r0], #4
  403614:	f851 3b04 	ldr.w	r3, [r1], #4
  403618:	f840 3b04 	str.w	r3, [r0], #4
  40361c:	f851 3b04 	ldr.w	r3, [r1], #4
  403620:	f840 3b04 	str.w	r3, [r0], #4
  403624:	f851 3b04 	ldr.w	r3, [r1], #4
  403628:	f840 3b04 	str.w	r3, [r0], #4
  40362c:	f851 3b04 	ldr.w	r3, [r1], #4
  403630:	f840 3b04 	str.w	r3, [r0], #4
  403634:	f851 3b04 	ldr.w	r3, [r1], #4
  403638:	f840 3b04 	str.w	r3, [r0], #4
  40363c:	f851 3b04 	ldr.w	r3, [r1], #4
  403640:	f840 3b04 	str.w	r3, [r0], #4
  403644:	f851 3b04 	ldr.w	r3, [r1], #4
  403648:	f840 3b04 	str.w	r3, [r0], #4
  40364c:	f851 3b04 	ldr.w	r3, [r1], #4
  403650:	f840 3b04 	str.w	r3, [r0], #4
  403654:	3a40      	subs	r2, #64	; 0x40
  403656:	d2bd      	bcs.n	4035d4 <memcpy+0x10>
  403658:	3230      	adds	r2, #48	; 0x30
  40365a:	d311      	bcc.n	403680 <memcpy+0xbc>
  40365c:	f851 3b04 	ldr.w	r3, [r1], #4
  403660:	f840 3b04 	str.w	r3, [r0], #4
  403664:	f851 3b04 	ldr.w	r3, [r1], #4
  403668:	f840 3b04 	str.w	r3, [r0], #4
  40366c:	f851 3b04 	ldr.w	r3, [r1], #4
  403670:	f840 3b04 	str.w	r3, [r0], #4
  403674:	f851 3b04 	ldr.w	r3, [r1], #4
  403678:	f840 3b04 	str.w	r3, [r0], #4
  40367c:	3a10      	subs	r2, #16
  40367e:	d2ed      	bcs.n	40365c <memcpy+0x98>
  403680:	320c      	adds	r2, #12
  403682:	d305      	bcc.n	403690 <memcpy+0xcc>
  403684:	f851 3b04 	ldr.w	r3, [r1], #4
  403688:	f840 3b04 	str.w	r3, [r0], #4
  40368c:	3a04      	subs	r2, #4
  40368e:	d2f9      	bcs.n	403684 <memcpy+0xc0>
  403690:	3204      	adds	r2, #4
  403692:	d008      	beq.n	4036a6 <memcpy+0xe2>
  403694:	07d2      	lsls	r2, r2, #31
  403696:	bf1c      	itt	ne
  403698:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40369c:	f800 3b01 	strbne.w	r3, [r0], #1
  4036a0:	d301      	bcc.n	4036a6 <memcpy+0xe2>
  4036a2:	880b      	ldrh	r3, [r1, #0]
  4036a4:	8003      	strh	r3, [r0, #0]
  4036a6:	4660      	mov	r0, ip
  4036a8:	4770      	bx	lr
  4036aa:	bf00      	nop
  4036ac:	2a08      	cmp	r2, #8
  4036ae:	d313      	bcc.n	4036d8 <memcpy+0x114>
  4036b0:	078b      	lsls	r3, r1, #30
  4036b2:	d08d      	beq.n	4035d0 <memcpy+0xc>
  4036b4:	f010 0303 	ands.w	r3, r0, #3
  4036b8:	d08a      	beq.n	4035d0 <memcpy+0xc>
  4036ba:	f1c3 0304 	rsb	r3, r3, #4
  4036be:	1ad2      	subs	r2, r2, r3
  4036c0:	07db      	lsls	r3, r3, #31
  4036c2:	bf1c      	itt	ne
  4036c4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4036c8:	f800 3b01 	strbne.w	r3, [r0], #1
  4036cc:	d380      	bcc.n	4035d0 <memcpy+0xc>
  4036ce:	f831 3b02 	ldrh.w	r3, [r1], #2
  4036d2:	f820 3b02 	strh.w	r3, [r0], #2
  4036d6:	e77b      	b.n	4035d0 <memcpy+0xc>
  4036d8:	3a04      	subs	r2, #4
  4036da:	d3d9      	bcc.n	403690 <memcpy+0xcc>
  4036dc:	3a01      	subs	r2, #1
  4036de:	f811 3b01 	ldrb.w	r3, [r1], #1
  4036e2:	f800 3b01 	strb.w	r3, [r0], #1
  4036e6:	d2f9      	bcs.n	4036dc <memcpy+0x118>
  4036e8:	780b      	ldrb	r3, [r1, #0]
  4036ea:	7003      	strb	r3, [r0, #0]
  4036ec:	784b      	ldrb	r3, [r1, #1]
  4036ee:	7043      	strb	r3, [r0, #1]
  4036f0:	788b      	ldrb	r3, [r1, #2]
  4036f2:	7083      	strb	r3, [r0, #2]
  4036f4:	4660      	mov	r0, ip
  4036f6:	4770      	bx	lr

004036f8 <memset>:
  4036f8:	b470      	push	{r4, r5, r6}
  4036fa:	0786      	lsls	r6, r0, #30
  4036fc:	d046      	beq.n	40378c <memset+0x94>
  4036fe:	1e54      	subs	r4, r2, #1
  403700:	2a00      	cmp	r2, #0
  403702:	d041      	beq.n	403788 <memset+0x90>
  403704:	b2ca      	uxtb	r2, r1
  403706:	4603      	mov	r3, r0
  403708:	e002      	b.n	403710 <memset+0x18>
  40370a:	f114 34ff 	adds.w	r4, r4, #4294967295
  40370e:	d33b      	bcc.n	403788 <memset+0x90>
  403710:	f803 2b01 	strb.w	r2, [r3], #1
  403714:	079d      	lsls	r5, r3, #30
  403716:	d1f8      	bne.n	40370a <memset+0x12>
  403718:	2c03      	cmp	r4, #3
  40371a:	d92e      	bls.n	40377a <memset+0x82>
  40371c:	b2cd      	uxtb	r5, r1
  40371e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  403722:	2c0f      	cmp	r4, #15
  403724:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  403728:	d919      	bls.n	40375e <memset+0x66>
  40372a:	f103 0210 	add.w	r2, r3, #16
  40372e:	4626      	mov	r6, r4
  403730:	3e10      	subs	r6, #16
  403732:	2e0f      	cmp	r6, #15
  403734:	f842 5c10 	str.w	r5, [r2, #-16]
  403738:	f842 5c0c 	str.w	r5, [r2, #-12]
  40373c:	f842 5c08 	str.w	r5, [r2, #-8]
  403740:	f842 5c04 	str.w	r5, [r2, #-4]
  403744:	f102 0210 	add.w	r2, r2, #16
  403748:	d8f2      	bhi.n	403730 <memset+0x38>
  40374a:	f1a4 0210 	sub.w	r2, r4, #16
  40374e:	f022 020f 	bic.w	r2, r2, #15
  403752:	f004 040f 	and.w	r4, r4, #15
  403756:	3210      	adds	r2, #16
  403758:	2c03      	cmp	r4, #3
  40375a:	4413      	add	r3, r2
  40375c:	d90d      	bls.n	40377a <memset+0x82>
  40375e:	461e      	mov	r6, r3
  403760:	4622      	mov	r2, r4
  403762:	3a04      	subs	r2, #4
  403764:	2a03      	cmp	r2, #3
  403766:	f846 5b04 	str.w	r5, [r6], #4
  40376a:	d8fa      	bhi.n	403762 <memset+0x6a>
  40376c:	1f22      	subs	r2, r4, #4
  40376e:	f022 0203 	bic.w	r2, r2, #3
  403772:	3204      	adds	r2, #4
  403774:	4413      	add	r3, r2
  403776:	f004 0403 	and.w	r4, r4, #3
  40377a:	b12c      	cbz	r4, 403788 <memset+0x90>
  40377c:	b2c9      	uxtb	r1, r1
  40377e:	441c      	add	r4, r3
  403780:	f803 1b01 	strb.w	r1, [r3], #1
  403784:	429c      	cmp	r4, r3
  403786:	d1fb      	bne.n	403780 <memset+0x88>
  403788:	bc70      	pop	{r4, r5, r6}
  40378a:	4770      	bx	lr
  40378c:	4614      	mov	r4, r2
  40378e:	4603      	mov	r3, r0
  403790:	e7c2      	b.n	403718 <memset+0x20>
  403792:	bf00      	nop

00403794 <__malloc_lock>:
  403794:	4801      	ldr	r0, [pc, #4]	; (40379c <__malloc_lock+0x8>)
  403796:	f001 bd57 	b.w	405248 <__retarget_lock_acquire_recursive>
  40379a:	bf00      	nop
  40379c:	20400c30 	.word	0x20400c30

004037a0 <__malloc_unlock>:
  4037a0:	4801      	ldr	r0, [pc, #4]	; (4037a8 <__malloc_unlock+0x8>)
  4037a2:	f001 bd53 	b.w	40524c <__retarget_lock_release_recursive>
  4037a6:	bf00      	nop
  4037a8:	20400c30 	.word	0x20400c30

004037ac <_sbrk_r>:
  4037ac:	b538      	push	{r3, r4, r5, lr}
  4037ae:	4c07      	ldr	r4, [pc, #28]	; (4037cc <_sbrk_r+0x20>)
  4037b0:	2300      	movs	r3, #0
  4037b2:	4605      	mov	r5, r0
  4037b4:	4608      	mov	r0, r1
  4037b6:	6023      	str	r3, [r4, #0]
  4037b8:	f7fd fa18 	bl	400bec <_sbrk>
  4037bc:	1c43      	adds	r3, r0, #1
  4037be:	d000      	beq.n	4037c2 <_sbrk_r+0x16>
  4037c0:	bd38      	pop	{r3, r4, r5, pc}
  4037c2:	6823      	ldr	r3, [r4, #0]
  4037c4:	2b00      	cmp	r3, #0
  4037c6:	d0fb      	beq.n	4037c0 <_sbrk_r+0x14>
  4037c8:	602b      	str	r3, [r5, #0]
  4037ca:	bd38      	pop	{r3, r4, r5, pc}
  4037cc:	20400c44 	.word	0x20400c44

004037d0 <setbuf>:
  4037d0:	2900      	cmp	r1, #0
  4037d2:	bf0c      	ite	eq
  4037d4:	2202      	moveq	r2, #2
  4037d6:	2200      	movne	r2, #0
  4037d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4037dc:	f000 b800 	b.w	4037e0 <setvbuf>

004037e0 <setvbuf>:
  4037e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4037e4:	4c61      	ldr	r4, [pc, #388]	; (40396c <setvbuf+0x18c>)
  4037e6:	6825      	ldr	r5, [r4, #0]
  4037e8:	b083      	sub	sp, #12
  4037ea:	4604      	mov	r4, r0
  4037ec:	460f      	mov	r7, r1
  4037ee:	4690      	mov	r8, r2
  4037f0:	461e      	mov	r6, r3
  4037f2:	b115      	cbz	r5, 4037fa <setvbuf+0x1a>
  4037f4:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4037f6:	2b00      	cmp	r3, #0
  4037f8:	d064      	beq.n	4038c4 <setvbuf+0xe4>
  4037fa:	f1b8 0f02 	cmp.w	r8, #2
  4037fe:	d006      	beq.n	40380e <setvbuf+0x2e>
  403800:	f1b8 0f01 	cmp.w	r8, #1
  403804:	f200 809f 	bhi.w	403946 <setvbuf+0x166>
  403808:	2e00      	cmp	r6, #0
  40380a:	f2c0 809c 	blt.w	403946 <setvbuf+0x166>
  40380e:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403810:	07d8      	lsls	r0, r3, #31
  403812:	d534      	bpl.n	40387e <setvbuf+0x9e>
  403814:	4621      	mov	r1, r4
  403816:	4628      	mov	r0, r5
  403818:	f001 f8fe 	bl	404a18 <_fflush_r>
  40381c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40381e:	b141      	cbz	r1, 403832 <setvbuf+0x52>
  403820:	f104 0340 	add.w	r3, r4, #64	; 0x40
  403824:	4299      	cmp	r1, r3
  403826:	d002      	beq.n	40382e <setvbuf+0x4e>
  403828:	4628      	mov	r0, r5
  40382a:	f001 fa73 	bl	404d14 <_free_r>
  40382e:	2300      	movs	r3, #0
  403830:	6323      	str	r3, [r4, #48]	; 0x30
  403832:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403836:	2200      	movs	r2, #0
  403838:	61a2      	str	r2, [r4, #24]
  40383a:	6062      	str	r2, [r4, #4]
  40383c:	061a      	lsls	r2, r3, #24
  40383e:	d43a      	bmi.n	4038b6 <setvbuf+0xd6>
  403840:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  403844:	f023 0303 	bic.w	r3, r3, #3
  403848:	f1b8 0f02 	cmp.w	r8, #2
  40384c:	81a3      	strh	r3, [r4, #12]
  40384e:	d01d      	beq.n	40388c <setvbuf+0xac>
  403850:	ab01      	add	r3, sp, #4
  403852:	466a      	mov	r2, sp
  403854:	4621      	mov	r1, r4
  403856:	4628      	mov	r0, r5
  403858:	f001 fcfa 	bl	405250 <__swhatbuf_r>
  40385c:	89a3      	ldrh	r3, [r4, #12]
  40385e:	4318      	orrs	r0, r3
  403860:	81a0      	strh	r0, [r4, #12]
  403862:	2e00      	cmp	r6, #0
  403864:	d132      	bne.n	4038cc <setvbuf+0xec>
  403866:	9e00      	ldr	r6, [sp, #0]
  403868:	4630      	mov	r0, r6
  40386a:	f7ff fbeb 	bl	403044 <malloc>
  40386e:	4607      	mov	r7, r0
  403870:	2800      	cmp	r0, #0
  403872:	d06b      	beq.n	40394c <setvbuf+0x16c>
  403874:	89a3      	ldrh	r3, [r4, #12]
  403876:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40387a:	81a3      	strh	r3, [r4, #12]
  40387c:	e028      	b.n	4038d0 <setvbuf+0xf0>
  40387e:	89a3      	ldrh	r3, [r4, #12]
  403880:	0599      	lsls	r1, r3, #22
  403882:	d4c7      	bmi.n	403814 <setvbuf+0x34>
  403884:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403886:	f001 fcdf 	bl	405248 <__retarget_lock_acquire_recursive>
  40388a:	e7c3      	b.n	403814 <setvbuf+0x34>
  40388c:	2500      	movs	r5, #0
  40388e:	6e61      	ldr	r1, [r4, #100]	; 0x64
  403890:	2600      	movs	r6, #0
  403892:	f104 0243 	add.w	r2, r4, #67	; 0x43
  403896:	f043 0302 	orr.w	r3, r3, #2
  40389a:	2001      	movs	r0, #1
  40389c:	60a6      	str	r6, [r4, #8]
  40389e:	07ce      	lsls	r6, r1, #31
  4038a0:	81a3      	strh	r3, [r4, #12]
  4038a2:	6022      	str	r2, [r4, #0]
  4038a4:	6122      	str	r2, [r4, #16]
  4038a6:	6160      	str	r0, [r4, #20]
  4038a8:	d401      	bmi.n	4038ae <setvbuf+0xce>
  4038aa:	0598      	lsls	r0, r3, #22
  4038ac:	d53e      	bpl.n	40392c <setvbuf+0x14c>
  4038ae:	4628      	mov	r0, r5
  4038b0:	b003      	add	sp, #12
  4038b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4038b6:	6921      	ldr	r1, [r4, #16]
  4038b8:	4628      	mov	r0, r5
  4038ba:	f001 fa2b 	bl	404d14 <_free_r>
  4038be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4038c2:	e7bd      	b.n	403840 <setvbuf+0x60>
  4038c4:	4628      	mov	r0, r5
  4038c6:	f001 f8ff 	bl	404ac8 <__sinit>
  4038ca:	e796      	b.n	4037fa <setvbuf+0x1a>
  4038cc:	2f00      	cmp	r7, #0
  4038ce:	d0cb      	beq.n	403868 <setvbuf+0x88>
  4038d0:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4038d2:	2b00      	cmp	r3, #0
  4038d4:	d033      	beq.n	40393e <setvbuf+0x15e>
  4038d6:	9b00      	ldr	r3, [sp, #0]
  4038d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4038dc:	6027      	str	r7, [r4, #0]
  4038de:	429e      	cmp	r6, r3
  4038e0:	bf1c      	itt	ne
  4038e2:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  4038e6:	81a2      	strhne	r2, [r4, #12]
  4038e8:	f1b8 0f01 	cmp.w	r8, #1
  4038ec:	bf04      	itt	eq
  4038ee:	f042 0201 	orreq.w	r2, r2, #1
  4038f2:	81a2      	strheq	r2, [r4, #12]
  4038f4:	b292      	uxth	r2, r2
  4038f6:	f012 0308 	ands.w	r3, r2, #8
  4038fa:	6127      	str	r7, [r4, #16]
  4038fc:	6166      	str	r6, [r4, #20]
  4038fe:	d00e      	beq.n	40391e <setvbuf+0x13e>
  403900:	07d1      	lsls	r1, r2, #31
  403902:	d51a      	bpl.n	40393a <setvbuf+0x15a>
  403904:	6e65      	ldr	r5, [r4, #100]	; 0x64
  403906:	4276      	negs	r6, r6
  403908:	2300      	movs	r3, #0
  40390a:	f015 0501 	ands.w	r5, r5, #1
  40390e:	61a6      	str	r6, [r4, #24]
  403910:	60a3      	str	r3, [r4, #8]
  403912:	d009      	beq.n	403928 <setvbuf+0x148>
  403914:	2500      	movs	r5, #0
  403916:	4628      	mov	r0, r5
  403918:	b003      	add	sp, #12
  40391a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40391e:	60a3      	str	r3, [r4, #8]
  403920:	6e65      	ldr	r5, [r4, #100]	; 0x64
  403922:	f015 0501 	ands.w	r5, r5, #1
  403926:	d1f5      	bne.n	403914 <setvbuf+0x134>
  403928:	0593      	lsls	r3, r2, #22
  40392a:	d4c0      	bmi.n	4038ae <setvbuf+0xce>
  40392c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40392e:	f001 fc8d 	bl	40524c <__retarget_lock_release_recursive>
  403932:	4628      	mov	r0, r5
  403934:	b003      	add	sp, #12
  403936:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40393a:	60a6      	str	r6, [r4, #8]
  40393c:	e7f0      	b.n	403920 <setvbuf+0x140>
  40393e:	4628      	mov	r0, r5
  403940:	f001 f8c2 	bl	404ac8 <__sinit>
  403944:	e7c7      	b.n	4038d6 <setvbuf+0xf6>
  403946:	f04f 35ff 	mov.w	r5, #4294967295
  40394a:	e7b0      	b.n	4038ae <setvbuf+0xce>
  40394c:	f8dd 9000 	ldr.w	r9, [sp]
  403950:	45b1      	cmp	r9, r6
  403952:	d004      	beq.n	40395e <setvbuf+0x17e>
  403954:	4648      	mov	r0, r9
  403956:	f7ff fb75 	bl	403044 <malloc>
  40395a:	4607      	mov	r7, r0
  40395c:	b920      	cbnz	r0, 403968 <setvbuf+0x188>
  40395e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403962:	f04f 35ff 	mov.w	r5, #4294967295
  403966:	e792      	b.n	40388e <setvbuf+0xae>
  403968:	464e      	mov	r6, r9
  40396a:	e783      	b.n	403874 <setvbuf+0x94>
  40396c:	2040000c 	.word	0x2040000c
	...

00403980 <strlen>:
  403980:	f890 f000 	pld	[r0]
  403984:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  403988:	f020 0107 	bic.w	r1, r0, #7
  40398c:	f06f 0c00 	mvn.w	ip, #0
  403990:	f010 0407 	ands.w	r4, r0, #7
  403994:	f891 f020 	pld	[r1, #32]
  403998:	f040 8049 	bne.w	403a2e <strlen+0xae>
  40399c:	f04f 0400 	mov.w	r4, #0
  4039a0:	f06f 0007 	mvn.w	r0, #7
  4039a4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4039a8:	f891 f040 	pld	[r1, #64]	; 0x40
  4039ac:	f100 0008 	add.w	r0, r0, #8
  4039b0:	fa82 f24c 	uadd8	r2, r2, ip
  4039b4:	faa4 f28c 	sel	r2, r4, ip
  4039b8:	fa83 f34c 	uadd8	r3, r3, ip
  4039bc:	faa2 f38c 	sel	r3, r2, ip
  4039c0:	bb4b      	cbnz	r3, 403a16 <strlen+0x96>
  4039c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  4039c6:	fa82 f24c 	uadd8	r2, r2, ip
  4039ca:	f100 0008 	add.w	r0, r0, #8
  4039ce:	faa4 f28c 	sel	r2, r4, ip
  4039d2:	fa83 f34c 	uadd8	r3, r3, ip
  4039d6:	faa2 f38c 	sel	r3, r2, ip
  4039da:	b9e3      	cbnz	r3, 403a16 <strlen+0x96>
  4039dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4039e0:	fa82 f24c 	uadd8	r2, r2, ip
  4039e4:	f100 0008 	add.w	r0, r0, #8
  4039e8:	faa4 f28c 	sel	r2, r4, ip
  4039ec:	fa83 f34c 	uadd8	r3, r3, ip
  4039f0:	faa2 f38c 	sel	r3, r2, ip
  4039f4:	b97b      	cbnz	r3, 403a16 <strlen+0x96>
  4039f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4039fa:	f101 0120 	add.w	r1, r1, #32
  4039fe:	fa82 f24c 	uadd8	r2, r2, ip
  403a02:	f100 0008 	add.w	r0, r0, #8
  403a06:	faa4 f28c 	sel	r2, r4, ip
  403a0a:	fa83 f34c 	uadd8	r3, r3, ip
  403a0e:	faa2 f38c 	sel	r3, r2, ip
  403a12:	2b00      	cmp	r3, #0
  403a14:	d0c6      	beq.n	4039a4 <strlen+0x24>
  403a16:	2a00      	cmp	r2, #0
  403a18:	bf04      	itt	eq
  403a1a:	3004      	addeq	r0, #4
  403a1c:	461a      	moveq	r2, r3
  403a1e:	ba12      	rev	r2, r2
  403a20:	fab2 f282 	clz	r2, r2
  403a24:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  403a28:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  403a2c:	4770      	bx	lr
  403a2e:	e9d1 2300 	ldrd	r2, r3, [r1]
  403a32:	f004 0503 	and.w	r5, r4, #3
  403a36:	f1c4 0000 	rsb	r0, r4, #0
  403a3a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  403a3e:	f014 0f04 	tst.w	r4, #4
  403a42:	f891 f040 	pld	[r1, #64]	; 0x40
  403a46:	fa0c f505 	lsl.w	r5, ip, r5
  403a4a:	ea62 0205 	orn	r2, r2, r5
  403a4e:	bf1c      	itt	ne
  403a50:	ea63 0305 	ornne	r3, r3, r5
  403a54:	4662      	movne	r2, ip
  403a56:	f04f 0400 	mov.w	r4, #0
  403a5a:	e7a9      	b.n	4039b0 <strlen+0x30>

00403a5c <__sprint_r.part.0>:
  403a5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403a60:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  403a62:	049c      	lsls	r4, r3, #18
  403a64:	4693      	mov	fp, r2
  403a66:	d52f      	bpl.n	403ac8 <__sprint_r.part.0+0x6c>
  403a68:	6893      	ldr	r3, [r2, #8]
  403a6a:	6812      	ldr	r2, [r2, #0]
  403a6c:	b353      	cbz	r3, 403ac4 <__sprint_r.part.0+0x68>
  403a6e:	460e      	mov	r6, r1
  403a70:	4607      	mov	r7, r0
  403a72:	f102 0908 	add.w	r9, r2, #8
  403a76:	e919 0420 	ldmdb	r9, {r5, sl}
  403a7a:	ea5f 089a 	movs.w	r8, sl, lsr #2
  403a7e:	d017      	beq.n	403ab0 <__sprint_r.part.0+0x54>
  403a80:	3d04      	subs	r5, #4
  403a82:	2400      	movs	r4, #0
  403a84:	e001      	b.n	403a8a <__sprint_r.part.0+0x2e>
  403a86:	45a0      	cmp	r8, r4
  403a88:	d010      	beq.n	403aac <__sprint_r.part.0+0x50>
  403a8a:	4632      	mov	r2, r6
  403a8c:	f855 1f04 	ldr.w	r1, [r5, #4]!
  403a90:	4638      	mov	r0, r7
  403a92:	f001 f8bb 	bl	404c0c <_fputwc_r>
  403a96:	1c43      	adds	r3, r0, #1
  403a98:	f104 0401 	add.w	r4, r4, #1
  403a9c:	d1f3      	bne.n	403a86 <__sprint_r.part.0+0x2a>
  403a9e:	2300      	movs	r3, #0
  403aa0:	f8cb 3008 	str.w	r3, [fp, #8]
  403aa4:	f8cb 3004 	str.w	r3, [fp, #4]
  403aa8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403aac:	f8db 3008 	ldr.w	r3, [fp, #8]
  403ab0:	f02a 0a03 	bic.w	sl, sl, #3
  403ab4:	eba3 030a 	sub.w	r3, r3, sl
  403ab8:	f8cb 3008 	str.w	r3, [fp, #8]
  403abc:	f109 0908 	add.w	r9, r9, #8
  403ac0:	2b00      	cmp	r3, #0
  403ac2:	d1d8      	bne.n	403a76 <__sprint_r.part.0+0x1a>
  403ac4:	2000      	movs	r0, #0
  403ac6:	e7ea      	b.n	403a9e <__sprint_r.part.0+0x42>
  403ac8:	f001 fa0a 	bl	404ee0 <__sfvwrite_r>
  403acc:	2300      	movs	r3, #0
  403ace:	f8cb 3008 	str.w	r3, [fp, #8]
  403ad2:	f8cb 3004 	str.w	r3, [fp, #4]
  403ad6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403ada:	bf00      	nop

00403adc <_vfiprintf_r>:
  403adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403ae0:	b0ad      	sub	sp, #180	; 0xb4
  403ae2:	461d      	mov	r5, r3
  403ae4:	468b      	mov	fp, r1
  403ae6:	4690      	mov	r8, r2
  403ae8:	9307      	str	r3, [sp, #28]
  403aea:	9006      	str	r0, [sp, #24]
  403aec:	b118      	cbz	r0, 403af6 <_vfiprintf_r+0x1a>
  403aee:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403af0:	2b00      	cmp	r3, #0
  403af2:	f000 80f3 	beq.w	403cdc <_vfiprintf_r+0x200>
  403af6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  403afa:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  403afe:	07df      	lsls	r7, r3, #31
  403b00:	b281      	uxth	r1, r0
  403b02:	d402      	bmi.n	403b0a <_vfiprintf_r+0x2e>
  403b04:	058e      	lsls	r6, r1, #22
  403b06:	f140 80fc 	bpl.w	403d02 <_vfiprintf_r+0x226>
  403b0a:	048c      	lsls	r4, r1, #18
  403b0c:	d40a      	bmi.n	403b24 <_vfiprintf_r+0x48>
  403b0e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  403b12:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  403b16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  403b1a:	f8ab 100c 	strh.w	r1, [fp, #12]
  403b1e:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  403b22:	b289      	uxth	r1, r1
  403b24:	0708      	lsls	r0, r1, #28
  403b26:	f140 80b3 	bpl.w	403c90 <_vfiprintf_r+0x1b4>
  403b2a:	f8db 3010 	ldr.w	r3, [fp, #16]
  403b2e:	2b00      	cmp	r3, #0
  403b30:	f000 80ae 	beq.w	403c90 <_vfiprintf_r+0x1b4>
  403b34:	f001 031a 	and.w	r3, r1, #26
  403b38:	2b0a      	cmp	r3, #10
  403b3a:	f000 80b5 	beq.w	403ca8 <_vfiprintf_r+0x1cc>
  403b3e:	2300      	movs	r3, #0
  403b40:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  403b44:	930b      	str	r3, [sp, #44]	; 0x2c
  403b46:	9311      	str	r3, [sp, #68]	; 0x44
  403b48:	9310      	str	r3, [sp, #64]	; 0x40
  403b4a:	9303      	str	r3, [sp, #12]
  403b4c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  403b50:	46ca      	mov	sl, r9
  403b52:	f8cd b010 	str.w	fp, [sp, #16]
  403b56:	f898 3000 	ldrb.w	r3, [r8]
  403b5a:	4644      	mov	r4, r8
  403b5c:	b1fb      	cbz	r3, 403b9e <_vfiprintf_r+0xc2>
  403b5e:	2b25      	cmp	r3, #37	; 0x25
  403b60:	d102      	bne.n	403b68 <_vfiprintf_r+0x8c>
  403b62:	e01c      	b.n	403b9e <_vfiprintf_r+0xc2>
  403b64:	2b25      	cmp	r3, #37	; 0x25
  403b66:	d003      	beq.n	403b70 <_vfiprintf_r+0x94>
  403b68:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  403b6c:	2b00      	cmp	r3, #0
  403b6e:	d1f9      	bne.n	403b64 <_vfiprintf_r+0x88>
  403b70:	eba4 0508 	sub.w	r5, r4, r8
  403b74:	b19d      	cbz	r5, 403b9e <_vfiprintf_r+0xc2>
  403b76:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403b78:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403b7a:	f8ca 8000 	str.w	r8, [sl]
  403b7e:	3301      	adds	r3, #1
  403b80:	442a      	add	r2, r5
  403b82:	2b07      	cmp	r3, #7
  403b84:	f8ca 5004 	str.w	r5, [sl, #4]
  403b88:	9211      	str	r2, [sp, #68]	; 0x44
  403b8a:	9310      	str	r3, [sp, #64]	; 0x40
  403b8c:	dd7a      	ble.n	403c84 <_vfiprintf_r+0x1a8>
  403b8e:	2a00      	cmp	r2, #0
  403b90:	f040 84b0 	bne.w	4044f4 <_vfiprintf_r+0xa18>
  403b94:	9b03      	ldr	r3, [sp, #12]
  403b96:	9210      	str	r2, [sp, #64]	; 0x40
  403b98:	442b      	add	r3, r5
  403b9a:	46ca      	mov	sl, r9
  403b9c:	9303      	str	r3, [sp, #12]
  403b9e:	7823      	ldrb	r3, [r4, #0]
  403ba0:	2b00      	cmp	r3, #0
  403ba2:	f000 83e0 	beq.w	404366 <_vfiprintf_r+0x88a>
  403ba6:	2000      	movs	r0, #0
  403ba8:	f04f 0300 	mov.w	r3, #0
  403bac:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  403bb0:	f104 0801 	add.w	r8, r4, #1
  403bb4:	7862      	ldrb	r2, [r4, #1]
  403bb6:	4605      	mov	r5, r0
  403bb8:	4606      	mov	r6, r0
  403bba:	4603      	mov	r3, r0
  403bbc:	f04f 34ff 	mov.w	r4, #4294967295
  403bc0:	f108 0801 	add.w	r8, r8, #1
  403bc4:	f1a2 0120 	sub.w	r1, r2, #32
  403bc8:	2958      	cmp	r1, #88	; 0x58
  403bca:	f200 82de 	bhi.w	40418a <_vfiprintf_r+0x6ae>
  403bce:	e8df f011 	tbh	[pc, r1, lsl #1]
  403bd2:	0221      	.short	0x0221
  403bd4:	02dc02dc 	.word	0x02dc02dc
  403bd8:	02dc0229 	.word	0x02dc0229
  403bdc:	02dc02dc 	.word	0x02dc02dc
  403be0:	02dc02dc 	.word	0x02dc02dc
  403be4:	028902dc 	.word	0x028902dc
  403be8:	02dc0295 	.word	0x02dc0295
  403bec:	02bd00a2 	.word	0x02bd00a2
  403bf0:	019f02dc 	.word	0x019f02dc
  403bf4:	01a401a4 	.word	0x01a401a4
  403bf8:	01a401a4 	.word	0x01a401a4
  403bfc:	01a401a4 	.word	0x01a401a4
  403c00:	01a401a4 	.word	0x01a401a4
  403c04:	02dc01a4 	.word	0x02dc01a4
  403c08:	02dc02dc 	.word	0x02dc02dc
  403c0c:	02dc02dc 	.word	0x02dc02dc
  403c10:	02dc02dc 	.word	0x02dc02dc
  403c14:	02dc02dc 	.word	0x02dc02dc
  403c18:	01b202dc 	.word	0x01b202dc
  403c1c:	02dc02dc 	.word	0x02dc02dc
  403c20:	02dc02dc 	.word	0x02dc02dc
  403c24:	02dc02dc 	.word	0x02dc02dc
  403c28:	02dc02dc 	.word	0x02dc02dc
  403c2c:	02dc02dc 	.word	0x02dc02dc
  403c30:	02dc0197 	.word	0x02dc0197
  403c34:	02dc02dc 	.word	0x02dc02dc
  403c38:	02dc02dc 	.word	0x02dc02dc
  403c3c:	02dc019b 	.word	0x02dc019b
  403c40:	025302dc 	.word	0x025302dc
  403c44:	02dc02dc 	.word	0x02dc02dc
  403c48:	02dc02dc 	.word	0x02dc02dc
  403c4c:	02dc02dc 	.word	0x02dc02dc
  403c50:	02dc02dc 	.word	0x02dc02dc
  403c54:	02dc02dc 	.word	0x02dc02dc
  403c58:	021b025a 	.word	0x021b025a
  403c5c:	02dc02dc 	.word	0x02dc02dc
  403c60:	026e02dc 	.word	0x026e02dc
  403c64:	02dc021b 	.word	0x02dc021b
  403c68:	027302dc 	.word	0x027302dc
  403c6c:	01f502dc 	.word	0x01f502dc
  403c70:	02090182 	.word	0x02090182
  403c74:	02dc02d7 	.word	0x02dc02d7
  403c78:	02dc029a 	.word	0x02dc029a
  403c7c:	02dc00a7 	.word	0x02dc00a7
  403c80:	022e02dc 	.word	0x022e02dc
  403c84:	f10a 0a08 	add.w	sl, sl, #8
  403c88:	9b03      	ldr	r3, [sp, #12]
  403c8a:	442b      	add	r3, r5
  403c8c:	9303      	str	r3, [sp, #12]
  403c8e:	e786      	b.n	403b9e <_vfiprintf_r+0xc2>
  403c90:	4659      	mov	r1, fp
  403c92:	9806      	ldr	r0, [sp, #24]
  403c94:	f000 fdac 	bl	4047f0 <__swsetup_r>
  403c98:	bb18      	cbnz	r0, 403ce2 <_vfiprintf_r+0x206>
  403c9a:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  403c9e:	f001 031a 	and.w	r3, r1, #26
  403ca2:	2b0a      	cmp	r3, #10
  403ca4:	f47f af4b 	bne.w	403b3e <_vfiprintf_r+0x62>
  403ca8:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  403cac:	2b00      	cmp	r3, #0
  403cae:	f6ff af46 	blt.w	403b3e <_vfiprintf_r+0x62>
  403cb2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  403cb6:	07db      	lsls	r3, r3, #31
  403cb8:	d405      	bmi.n	403cc6 <_vfiprintf_r+0x1ea>
  403cba:	058f      	lsls	r7, r1, #22
  403cbc:	d403      	bmi.n	403cc6 <_vfiprintf_r+0x1ea>
  403cbe:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  403cc2:	f001 fac3 	bl	40524c <__retarget_lock_release_recursive>
  403cc6:	462b      	mov	r3, r5
  403cc8:	4642      	mov	r2, r8
  403cca:	4659      	mov	r1, fp
  403ccc:	9806      	ldr	r0, [sp, #24]
  403cce:	f000 fd4d 	bl	40476c <__sbprintf>
  403cd2:	9003      	str	r0, [sp, #12]
  403cd4:	9803      	ldr	r0, [sp, #12]
  403cd6:	b02d      	add	sp, #180	; 0xb4
  403cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403cdc:	f000 fef4 	bl	404ac8 <__sinit>
  403ce0:	e709      	b.n	403af6 <_vfiprintf_r+0x1a>
  403ce2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  403ce6:	07d9      	lsls	r1, r3, #31
  403ce8:	d404      	bmi.n	403cf4 <_vfiprintf_r+0x218>
  403cea:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  403cee:	059a      	lsls	r2, r3, #22
  403cf0:	f140 84aa 	bpl.w	404648 <_vfiprintf_r+0xb6c>
  403cf4:	f04f 33ff 	mov.w	r3, #4294967295
  403cf8:	9303      	str	r3, [sp, #12]
  403cfa:	9803      	ldr	r0, [sp, #12]
  403cfc:	b02d      	add	sp, #180	; 0xb4
  403cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403d02:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  403d06:	f001 fa9f 	bl	405248 <__retarget_lock_acquire_recursive>
  403d0a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  403d0e:	b281      	uxth	r1, r0
  403d10:	e6fb      	b.n	403b0a <_vfiprintf_r+0x2e>
  403d12:	4276      	negs	r6, r6
  403d14:	9207      	str	r2, [sp, #28]
  403d16:	f043 0304 	orr.w	r3, r3, #4
  403d1a:	f898 2000 	ldrb.w	r2, [r8]
  403d1e:	e74f      	b.n	403bc0 <_vfiprintf_r+0xe4>
  403d20:	9608      	str	r6, [sp, #32]
  403d22:	069e      	lsls	r6, r3, #26
  403d24:	f100 8450 	bmi.w	4045c8 <_vfiprintf_r+0xaec>
  403d28:	9907      	ldr	r1, [sp, #28]
  403d2a:	06dd      	lsls	r5, r3, #27
  403d2c:	460a      	mov	r2, r1
  403d2e:	f100 83ef 	bmi.w	404510 <_vfiprintf_r+0xa34>
  403d32:	0658      	lsls	r0, r3, #25
  403d34:	f140 83ec 	bpl.w	404510 <_vfiprintf_r+0xa34>
  403d38:	880e      	ldrh	r6, [r1, #0]
  403d3a:	3104      	adds	r1, #4
  403d3c:	2700      	movs	r7, #0
  403d3e:	2201      	movs	r2, #1
  403d40:	9107      	str	r1, [sp, #28]
  403d42:	f04f 0100 	mov.w	r1, #0
  403d46:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  403d4a:	2500      	movs	r5, #0
  403d4c:	1c61      	adds	r1, r4, #1
  403d4e:	f000 8116 	beq.w	403f7e <_vfiprintf_r+0x4a2>
  403d52:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  403d56:	9102      	str	r1, [sp, #8]
  403d58:	ea56 0107 	orrs.w	r1, r6, r7
  403d5c:	f040 8114 	bne.w	403f88 <_vfiprintf_r+0x4ac>
  403d60:	2c00      	cmp	r4, #0
  403d62:	f040 835c 	bne.w	40441e <_vfiprintf_r+0x942>
  403d66:	2a00      	cmp	r2, #0
  403d68:	f040 83b7 	bne.w	4044da <_vfiprintf_r+0x9fe>
  403d6c:	f013 0301 	ands.w	r3, r3, #1
  403d70:	9305      	str	r3, [sp, #20]
  403d72:	f000 8457 	beq.w	404624 <_vfiprintf_r+0xb48>
  403d76:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  403d7a:	2330      	movs	r3, #48	; 0x30
  403d7c:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  403d80:	9b05      	ldr	r3, [sp, #20]
  403d82:	42a3      	cmp	r3, r4
  403d84:	bfb8      	it	lt
  403d86:	4623      	movlt	r3, r4
  403d88:	9301      	str	r3, [sp, #4]
  403d8a:	b10d      	cbz	r5, 403d90 <_vfiprintf_r+0x2b4>
  403d8c:	3301      	adds	r3, #1
  403d8e:	9301      	str	r3, [sp, #4]
  403d90:	9b02      	ldr	r3, [sp, #8]
  403d92:	f013 0302 	ands.w	r3, r3, #2
  403d96:	9309      	str	r3, [sp, #36]	; 0x24
  403d98:	d002      	beq.n	403da0 <_vfiprintf_r+0x2c4>
  403d9a:	9b01      	ldr	r3, [sp, #4]
  403d9c:	3302      	adds	r3, #2
  403d9e:	9301      	str	r3, [sp, #4]
  403da0:	9b02      	ldr	r3, [sp, #8]
  403da2:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  403da6:	930a      	str	r3, [sp, #40]	; 0x28
  403da8:	f040 8217 	bne.w	4041da <_vfiprintf_r+0x6fe>
  403dac:	9b08      	ldr	r3, [sp, #32]
  403dae:	9a01      	ldr	r2, [sp, #4]
  403db0:	1a9d      	subs	r5, r3, r2
  403db2:	2d00      	cmp	r5, #0
  403db4:	f340 8211 	ble.w	4041da <_vfiprintf_r+0x6fe>
  403db8:	2d10      	cmp	r5, #16
  403dba:	f340 8490 	ble.w	4046de <_vfiprintf_r+0xc02>
  403dbe:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403dc0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403dc2:	4ec4      	ldr	r6, [pc, #784]	; (4040d4 <_vfiprintf_r+0x5f8>)
  403dc4:	46d6      	mov	lr, sl
  403dc6:	2710      	movs	r7, #16
  403dc8:	46a2      	mov	sl, r4
  403dca:	4619      	mov	r1, r3
  403dcc:	9c06      	ldr	r4, [sp, #24]
  403dce:	e007      	b.n	403de0 <_vfiprintf_r+0x304>
  403dd0:	f101 0c02 	add.w	ip, r1, #2
  403dd4:	f10e 0e08 	add.w	lr, lr, #8
  403dd8:	4601      	mov	r1, r0
  403dda:	3d10      	subs	r5, #16
  403ddc:	2d10      	cmp	r5, #16
  403dde:	dd11      	ble.n	403e04 <_vfiprintf_r+0x328>
  403de0:	1c48      	adds	r0, r1, #1
  403de2:	3210      	adds	r2, #16
  403de4:	2807      	cmp	r0, #7
  403de6:	9211      	str	r2, [sp, #68]	; 0x44
  403de8:	e88e 00c0 	stmia.w	lr, {r6, r7}
  403dec:	9010      	str	r0, [sp, #64]	; 0x40
  403dee:	ddef      	ble.n	403dd0 <_vfiprintf_r+0x2f4>
  403df0:	2a00      	cmp	r2, #0
  403df2:	f040 81e4 	bne.w	4041be <_vfiprintf_r+0x6e2>
  403df6:	3d10      	subs	r5, #16
  403df8:	2d10      	cmp	r5, #16
  403dfa:	4611      	mov	r1, r2
  403dfc:	f04f 0c01 	mov.w	ip, #1
  403e00:	46ce      	mov	lr, r9
  403e02:	dced      	bgt.n	403de0 <_vfiprintf_r+0x304>
  403e04:	4654      	mov	r4, sl
  403e06:	4661      	mov	r1, ip
  403e08:	46f2      	mov	sl, lr
  403e0a:	442a      	add	r2, r5
  403e0c:	2907      	cmp	r1, #7
  403e0e:	9211      	str	r2, [sp, #68]	; 0x44
  403e10:	f8ca 6000 	str.w	r6, [sl]
  403e14:	f8ca 5004 	str.w	r5, [sl, #4]
  403e18:	9110      	str	r1, [sp, #64]	; 0x40
  403e1a:	f300 82ec 	bgt.w	4043f6 <_vfiprintf_r+0x91a>
  403e1e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  403e22:	f10a 0a08 	add.w	sl, sl, #8
  403e26:	1c48      	adds	r0, r1, #1
  403e28:	2d00      	cmp	r5, #0
  403e2a:	f040 81de 	bne.w	4041ea <_vfiprintf_r+0x70e>
  403e2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403e30:	2b00      	cmp	r3, #0
  403e32:	f000 81f8 	beq.w	404226 <_vfiprintf_r+0x74a>
  403e36:	3202      	adds	r2, #2
  403e38:	a90e      	add	r1, sp, #56	; 0x38
  403e3a:	2302      	movs	r3, #2
  403e3c:	2807      	cmp	r0, #7
  403e3e:	9211      	str	r2, [sp, #68]	; 0x44
  403e40:	9010      	str	r0, [sp, #64]	; 0x40
  403e42:	e88a 000a 	stmia.w	sl, {r1, r3}
  403e46:	f340 81ea 	ble.w	40421e <_vfiprintf_r+0x742>
  403e4a:	2a00      	cmp	r2, #0
  403e4c:	f040 838c 	bne.w	404568 <_vfiprintf_r+0xa8c>
  403e50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403e52:	2b80      	cmp	r3, #128	; 0x80
  403e54:	f04f 0001 	mov.w	r0, #1
  403e58:	4611      	mov	r1, r2
  403e5a:	46ca      	mov	sl, r9
  403e5c:	f040 81e7 	bne.w	40422e <_vfiprintf_r+0x752>
  403e60:	9b08      	ldr	r3, [sp, #32]
  403e62:	9d01      	ldr	r5, [sp, #4]
  403e64:	1b5e      	subs	r6, r3, r5
  403e66:	2e00      	cmp	r6, #0
  403e68:	f340 81e1 	ble.w	40422e <_vfiprintf_r+0x752>
  403e6c:	2e10      	cmp	r6, #16
  403e6e:	4d9a      	ldr	r5, [pc, #616]	; (4040d8 <_vfiprintf_r+0x5fc>)
  403e70:	f340 8450 	ble.w	404714 <_vfiprintf_r+0xc38>
  403e74:	46d4      	mov	ip, sl
  403e76:	2710      	movs	r7, #16
  403e78:	46a2      	mov	sl, r4
  403e7a:	9c06      	ldr	r4, [sp, #24]
  403e7c:	e007      	b.n	403e8e <_vfiprintf_r+0x3b2>
  403e7e:	f101 0e02 	add.w	lr, r1, #2
  403e82:	f10c 0c08 	add.w	ip, ip, #8
  403e86:	4601      	mov	r1, r0
  403e88:	3e10      	subs	r6, #16
  403e8a:	2e10      	cmp	r6, #16
  403e8c:	dd11      	ble.n	403eb2 <_vfiprintf_r+0x3d6>
  403e8e:	1c48      	adds	r0, r1, #1
  403e90:	3210      	adds	r2, #16
  403e92:	2807      	cmp	r0, #7
  403e94:	9211      	str	r2, [sp, #68]	; 0x44
  403e96:	e88c 00a0 	stmia.w	ip, {r5, r7}
  403e9a:	9010      	str	r0, [sp, #64]	; 0x40
  403e9c:	ddef      	ble.n	403e7e <_vfiprintf_r+0x3a2>
  403e9e:	2a00      	cmp	r2, #0
  403ea0:	f040 829d 	bne.w	4043de <_vfiprintf_r+0x902>
  403ea4:	3e10      	subs	r6, #16
  403ea6:	2e10      	cmp	r6, #16
  403ea8:	f04f 0e01 	mov.w	lr, #1
  403eac:	4611      	mov	r1, r2
  403eae:	46cc      	mov	ip, r9
  403eb0:	dced      	bgt.n	403e8e <_vfiprintf_r+0x3b2>
  403eb2:	4654      	mov	r4, sl
  403eb4:	46e2      	mov	sl, ip
  403eb6:	4432      	add	r2, r6
  403eb8:	f1be 0f07 	cmp.w	lr, #7
  403ebc:	9211      	str	r2, [sp, #68]	; 0x44
  403ebe:	e88a 0060 	stmia.w	sl, {r5, r6}
  403ec2:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  403ec6:	f300 8369 	bgt.w	40459c <_vfiprintf_r+0xac0>
  403eca:	f10a 0a08 	add.w	sl, sl, #8
  403ece:	f10e 0001 	add.w	r0, lr, #1
  403ed2:	4671      	mov	r1, lr
  403ed4:	e1ab      	b.n	40422e <_vfiprintf_r+0x752>
  403ed6:	9608      	str	r6, [sp, #32]
  403ed8:	f013 0220 	ands.w	r2, r3, #32
  403edc:	f040 838c 	bne.w	4045f8 <_vfiprintf_r+0xb1c>
  403ee0:	f013 0110 	ands.w	r1, r3, #16
  403ee4:	f040 831a 	bne.w	40451c <_vfiprintf_r+0xa40>
  403ee8:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  403eec:	f000 8316 	beq.w	40451c <_vfiprintf_r+0xa40>
  403ef0:	9807      	ldr	r0, [sp, #28]
  403ef2:	460a      	mov	r2, r1
  403ef4:	4601      	mov	r1, r0
  403ef6:	3104      	adds	r1, #4
  403ef8:	8806      	ldrh	r6, [r0, #0]
  403efa:	9107      	str	r1, [sp, #28]
  403efc:	2700      	movs	r7, #0
  403efe:	e720      	b.n	403d42 <_vfiprintf_r+0x266>
  403f00:	9608      	str	r6, [sp, #32]
  403f02:	f043 0310 	orr.w	r3, r3, #16
  403f06:	e7e7      	b.n	403ed8 <_vfiprintf_r+0x3fc>
  403f08:	9608      	str	r6, [sp, #32]
  403f0a:	f043 0310 	orr.w	r3, r3, #16
  403f0e:	e708      	b.n	403d22 <_vfiprintf_r+0x246>
  403f10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403f14:	f898 2000 	ldrb.w	r2, [r8]
  403f18:	e652      	b.n	403bc0 <_vfiprintf_r+0xe4>
  403f1a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  403f1e:	2600      	movs	r6, #0
  403f20:	f818 2b01 	ldrb.w	r2, [r8], #1
  403f24:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  403f28:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  403f2c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  403f30:	2909      	cmp	r1, #9
  403f32:	d9f5      	bls.n	403f20 <_vfiprintf_r+0x444>
  403f34:	e646      	b.n	403bc4 <_vfiprintf_r+0xe8>
  403f36:	9608      	str	r6, [sp, #32]
  403f38:	2800      	cmp	r0, #0
  403f3a:	f040 8408 	bne.w	40474e <_vfiprintf_r+0xc72>
  403f3e:	f043 0310 	orr.w	r3, r3, #16
  403f42:	069e      	lsls	r6, r3, #26
  403f44:	f100 834c 	bmi.w	4045e0 <_vfiprintf_r+0xb04>
  403f48:	06dd      	lsls	r5, r3, #27
  403f4a:	f100 82f3 	bmi.w	404534 <_vfiprintf_r+0xa58>
  403f4e:	0658      	lsls	r0, r3, #25
  403f50:	f140 82f0 	bpl.w	404534 <_vfiprintf_r+0xa58>
  403f54:	9d07      	ldr	r5, [sp, #28]
  403f56:	f9b5 6000 	ldrsh.w	r6, [r5]
  403f5a:	462a      	mov	r2, r5
  403f5c:	17f7      	asrs	r7, r6, #31
  403f5e:	3204      	adds	r2, #4
  403f60:	4630      	mov	r0, r6
  403f62:	4639      	mov	r1, r7
  403f64:	9207      	str	r2, [sp, #28]
  403f66:	2800      	cmp	r0, #0
  403f68:	f171 0200 	sbcs.w	r2, r1, #0
  403f6c:	f2c0 835d 	blt.w	40462a <_vfiprintf_r+0xb4e>
  403f70:	1c61      	adds	r1, r4, #1
  403f72:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  403f76:	f04f 0201 	mov.w	r2, #1
  403f7a:	f47f aeea 	bne.w	403d52 <_vfiprintf_r+0x276>
  403f7e:	ea56 0107 	orrs.w	r1, r6, r7
  403f82:	f000 824d 	beq.w	404420 <_vfiprintf_r+0x944>
  403f86:	9302      	str	r3, [sp, #8]
  403f88:	2a01      	cmp	r2, #1
  403f8a:	f000 828c 	beq.w	4044a6 <_vfiprintf_r+0x9ca>
  403f8e:	2a02      	cmp	r2, #2
  403f90:	f040 825c 	bne.w	40444c <_vfiprintf_r+0x970>
  403f94:	980b      	ldr	r0, [sp, #44]	; 0x2c
  403f96:	46cb      	mov	fp, r9
  403f98:	0933      	lsrs	r3, r6, #4
  403f9a:	f006 010f 	and.w	r1, r6, #15
  403f9e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  403fa2:	093a      	lsrs	r2, r7, #4
  403fa4:	461e      	mov	r6, r3
  403fa6:	4617      	mov	r7, r2
  403fa8:	5c43      	ldrb	r3, [r0, r1]
  403faa:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  403fae:	ea56 0307 	orrs.w	r3, r6, r7
  403fb2:	d1f1      	bne.n	403f98 <_vfiprintf_r+0x4bc>
  403fb4:	eba9 030b 	sub.w	r3, r9, fp
  403fb8:	9305      	str	r3, [sp, #20]
  403fba:	e6e1      	b.n	403d80 <_vfiprintf_r+0x2a4>
  403fbc:	2800      	cmp	r0, #0
  403fbe:	f040 83c0 	bne.w	404742 <_vfiprintf_r+0xc66>
  403fc2:	0699      	lsls	r1, r3, #26
  403fc4:	f100 8367 	bmi.w	404696 <_vfiprintf_r+0xbba>
  403fc8:	06da      	lsls	r2, r3, #27
  403fca:	f100 80f1 	bmi.w	4041b0 <_vfiprintf_r+0x6d4>
  403fce:	065b      	lsls	r3, r3, #25
  403fd0:	f140 80ee 	bpl.w	4041b0 <_vfiprintf_r+0x6d4>
  403fd4:	9a07      	ldr	r2, [sp, #28]
  403fd6:	6813      	ldr	r3, [r2, #0]
  403fd8:	3204      	adds	r2, #4
  403fda:	9207      	str	r2, [sp, #28]
  403fdc:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  403fe0:	801a      	strh	r2, [r3, #0]
  403fe2:	e5b8      	b.n	403b56 <_vfiprintf_r+0x7a>
  403fe4:	9807      	ldr	r0, [sp, #28]
  403fe6:	4a3d      	ldr	r2, [pc, #244]	; (4040dc <_vfiprintf_r+0x600>)
  403fe8:	9608      	str	r6, [sp, #32]
  403fea:	920b      	str	r2, [sp, #44]	; 0x2c
  403fec:	6806      	ldr	r6, [r0, #0]
  403fee:	2278      	movs	r2, #120	; 0x78
  403ff0:	2130      	movs	r1, #48	; 0x30
  403ff2:	3004      	adds	r0, #4
  403ff4:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  403ff8:	f043 0302 	orr.w	r3, r3, #2
  403ffc:	9007      	str	r0, [sp, #28]
  403ffe:	2700      	movs	r7, #0
  404000:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  404004:	2202      	movs	r2, #2
  404006:	e69c      	b.n	403d42 <_vfiprintf_r+0x266>
  404008:	9608      	str	r6, [sp, #32]
  40400a:	2800      	cmp	r0, #0
  40400c:	d099      	beq.n	403f42 <_vfiprintf_r+0x466>
  40400e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404012:	e796      	b.n	403f42 <_vfiprintf_r+0x466>
  404014:	f898 2000 	ldrb.w	r2, [r8]
  404018:	2d00      	cmp	r5, #0
  40401a:	f47f add1 	bne.w	403bc0 <_vfiprintf_r+0xe4>
  40401e:	2001      	movs	r0, #1
  404020:	2520      	movs	r5, #32
  404022:	e5cd      	b.n	403bc0 <_vfiprintf_r+0xe4>
  404024:	f043 0301 	orr.w	r3, r3, #1
  404028:	f898 2000 	ldrb.w	r2, [r8]
  40402c:	e5c8      	b.n	403bc0 <_vfiprintf_r+0xe4>
  40402e:	9608      	str	r6, [sp, #32]
  404030:	2800      	cmp	r0, #0
  404032:	f040 8393 	bne.w	40475c <_vfiprintf_r+0xc80>
  404036:	4929      	ldr	r1, [pc, #164]	; (4040dc <_vfiprintf_r+0x600>)
  404038:	910b      	str	r1, [sp, #44]	; 0x2c
  40403a:	069f      	lsls	r7, r3, #26
  40403c:	f100 82e8 	bmi.w	404610 <_vfiprintf_r+0xb34>
  404040:	9807      	ldr	r0, [sp, #28]
  404042:	06de      	lsls	r6, r3, #27
  404044:	4601      	mov	r1, r0
  404046:	f100 8270 	bmi.w	40452a <_vfiprintf_r+0xa4e>
  40404a:	065d      	lsls	r5, r3, #25
  40404c:	f140 826d 	bpl.w	40452a <_vfiprintf_r+0xa4e>
  404050:	3104      	adds	r1, #4
  404052:	8806      	ldrh	r6, [r0, #0]
  404054:	9107      	str	r1, [sp, #28]
  404056:	2700      	movs	r7, #0
  404058:	07d8      	lsls	r0, r3, #31
  40405a:	f140 8222 	bpl.w	4044a2 <_vfiprintf_r+0x9c6>
  40405e:	ea56 0107 	orrs.w	r1, r6, r7
  404062:	f000 821e 	beq.w	4044a2 <_vfiprintf_r+0x9c6>
  404066:	2130      	movs	r1, #48	; 0x30
  404068:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  40406c:	f043 0302 	orr.w	r3, r3, #2
  404070:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  404074:	2202      	movs	r2, #2
  404076:	e664      	b.n	403d42 <_vfiprintf_r+0x266>
  404078:	9608      	str	r6, [sp, #32]
  40407a:	2800      	cmp	r0, #0
  40407c:	f040 836b 	bne.w	404756 <_vfiprintf_r+0xc7a>
  404080:	4917      	ldr	r1, [pc, #92]	; (4040e0 <_vfiprintf_r+0x604>)
  404082:	910b      	str	r1, [sp, #44]	; 0x2c
  404084:	e7d9      	b.n	40403a <_vfiprintf_r+0x55e>
  404086:	9907      	ldr	r1, [sp, #28]
  404088:	9608      	str	r6, [sp, #32]
  40408a:	680a      	ldr	r2, [r1, #0]
  40408c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  404090:	f04f 0000 	mov.w	r0, #0
  404094:	460a      	mov	r2, r1
  404096:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  40409a:	3204      	adds	r2, #4
  40409c:	2001      	movs	r0, #1
  40409e:	9001      	str	r0, [sp, #4]
  4040a0:	9207      	str	r2, [sp, #28]
  4040a2:	9005      	str	r0, [sp, #20]
  4040a4:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4040a8:	9302      	str	r3, [sp, #8]
  4040aa:	2400      	movs	r4, #0
  4040ac:	e670      	b.n	403d90 <_vfiprintf_r+0x2b4>
  4040ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4040b2:	f898 2000 	ldrb.w	r2, [r8]
  4040b6:	e583      	b.n	403bc0 <_vfiprintf_r+0xe4>
  4040b8:	f898 2000 	ldrb.w	r2, [r8]
  4040bc:	2a6c      	cmp	r2, #108	; 0x6c
  4040be:	bf03      	ittte	eq
  4040c0:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  4040c4:	f043 0320 	orreq.w	r3, r3, #32
  4040c8:	f108 0801 	addeq.w	r8, r8, #1
  4040cc:	f043 0310 	orrne.w	r3, r3, #16
  4040d0:	e576      	b.n	403bc0 <_vfiprintf_r+0xe4>
  4040d2:	bf00      	nop
  4040d4:	00406154 	.word	0x00406154
  4040d8:	00406164 	.word	0x00406164
  4040dc:	00406138 	.word	0x00406138
  4040e0:	00406124 	.word	0x00406124
  4040e4:	9907      	ldr	r1, [sp, #28]
  4040e6:	680e      	ldr	r6, [r1, #0]
  4040e8:	460a      	mov	r2, r1
  4040ea:	2e00      	cmp	r6, #0
  4040ec:	f102 0204 	add.w	r2, r2, #4
  4040f0:	f6ff ae0f 	blt.w	403d12 <_vfiprintf_r+0x236>
  4040f4:	9207      	str	r2, [sp, #28]
  4040f6:	f898 2000 	ldrb.w	r2, [r8]
  4040fa:	e561      	b.n	403bc0 <_vfiprintf_r+0xe4>
  4040fc:	f898 2000 	ldrb.w	r2, [r8]
  404100:	2001      	movs	r0, #1
  404102:	252b      	movs	r5, #43	; 0x2b
  404104:	e55c      	b.n	403bc0 <_vfiprintf_r+0xe4>
  404106:	9907      	ldr	r1, [sp, #28]
  404108:	9608      	str	r6, [sp, #32]
  40410a:	f8d1 b000 	ldr.w	fp, [r1]
  40410e:	f04f 0200 	mov.w	r2, #0
  404112:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  404116:	1d0e      	adds	r6, r1, #4
  404118:	f1bb 0f00 	cmp.w	fp, #0
  40411c:	f000 82e5 	beq.w	4046ea <_vfiprintf_r+0xc0e>
  404120:	1c67      	adds	r7, r4, #1
  404122:	f000 82c4 	beq.w	4046ae <_vfiprintf_r+0xbd2>
  404126:	4622      	mov	r2, r4
  404128:	2100      	movs	r1, #0
  40412a:	4658      	mov	r0, fp
  40412c:	9301      	str	r3, [sp, #4]
  40412e:	f001 f91f 	bl	405370 <memchr>
  404132:	9b01      	ldr	r3, [sp, #4]
  404134:	2800      	cmp	r0, #0
  404136:	f000 82e5 	beq.w	404704 <_vfiprintf_r+0xc28>
  40413a:	eba0 020b 	sub.w	r2, r0, fp
  40413e:	9205      	str	r2, [sp, #20]
  404140:	9607      	str	r6, [sp, #28]
  404142:	9302      	str	r3, [sp, #8]
  404144:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404148:	2400      	movs	r4, #0
  40414a:	e619      	b.n	403d80 <_vfiprintf_r+0x2a4>
  40414c:	f898 2000 	ldrb.w	r2, [r8]
  404150:	2a2a      	cmp	r2, #42	; 0x2a
  404152:	f108 0701 	add.w	r7, r8, #1
  404156:	f000 82e9 	beq.w	40472c <_vfiprintf_r+0xc50>
  40415a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40415e:	2909      	cmp	r1, #9
  404160:	46b8      	mov	r8, r7
  404162:	f04f 0400 	mov.w	r4, #0
  404166:	f63f ad2d 	bhi.w	403bc4 <_vfiprintf_r+0xe8>
  40416a:	f818 2b01 	ldrb.w	r2, [r8], #1
  40416e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  404172:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  404176:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40417a:	2909      	cmp	r1, #9
  40417c:	d9f5      	bls.n	40416a <_vfiprintf_r+0x68e>
  40417e:	e521      	b.n	403bc4 <_vfiprintf_r+0xe8>
  404180:	f043 0320 	orr.w	r3, r3, #32
  404184:	f898 2000 	ldrb.w	r2, [r8]
  404188:	e51a      	b.n	403bc0 <_vfiprintf_r+0xe4>
  40418a:	9608      	str	r6, [sp, #32]
  40418c:	2800      	cmp	r0, #0
  40418e:	f040 82db 	bne.w	404748 <_vfiprintf_r+0xc6c>
  404192:	2a00      	cmp	r2, #0
  404194:	f000 80e7 	beq.w	404366 <_vfiprintf_r+0x88a>
  404198:	2101      	movs	r1, #1
  40419a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40419e:	f04f 0200 	mov.w	r2, #0
  4041a2:	9101      	str	r1, [sp, #4]
  4041a4:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4041a8:	9105      	str	r1, [sp, #20]
  4041aa:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4041ae:	e77b      	b.n	4040a8 <_vfiprintf_r+0x5cc>
  4041b0:	9a07      	ldr	r2, [sp, #28]
  4041b2:	6813      	ldr	r3, [r2, #0]
  4041b4:	3204      	adds	r2, #4
  4041b6:	9207      	str	r2, [sp, #28]
  4041b8:	9a03      	ldr	r2, [sp, #12]
  4041ba:	601a      	str	r2, [r3, #0]
  4041bc:	e4cb      	b.n	403b56 <_vfiprintf_r+0x7a>
  4041be:	aa0f      	add	r2, sp, #60	; 0x3c
  4041c0:	9904      	ldr	r1, [sp, #16]
  4041c2:	4620      	mov	r0, r4
  4041c4:	f7ff fc4a 	bl	403a5c <__sprint_r.part.0>
  4041c8:	2800      	cmp	r0, #0
  4041ca:	f040 8139 	bne.w	404440 <_vfiprintf_r+0x964>
  4041ce:	9910      	ldr	r1, [sp, #64]	; 0x40
  4041d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4041d2:	f101 0c01 	add.w	ip, r1, #1
  4041d6:	46ce      	mov	lr, r9
  4041d8:	e5ff      	b.n	403dda <_vfiprintf_r+0x2fe>
  4041da:	9910      	ldr	r1, [sp, #64]	; 0x40
  4041dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4041de:	1c48      	adds	r0, r1, #1
  4041e0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4041e4:	2d00      	cmp	r5, #0
  4041e6:	f43f ae22 	beq.w	403e2e <_vfiprintf_r+0x352>
  4041ea:	3201      	adds	r2, #1
  4041ec:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  4041f0:	2101      	movs	r1, #1
  4041f2:	2807      	cmp	r0, #7
  4041f4:	9211      	str	r2, [sp, #68]	; 0x44
  4041f6:	9010      	str	r0, [sp, #64]	; 0x40
  4041f8:	f8ca 5000 	str.w	r5, [sl]
  4041fc:	f8ca 1004 	str.w	r1, [sl, #4]
  404200:	f340 8108 	ble.w	404414 <_vfiprintf_r+0x938>
  404204:	2a00      	cmp	r2, #0
  404206:	f040 81bc 	bne.w	404582 <_vfiprintf_r+0xaa6>
  40420a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40420c:	2b00      	cmp	r3, #0
  40420e:	f43f ae1f 	beq.w	403e50 <_vfiprintf_r+0x374>
  404212:	ab0e      	add	r3, sp, #56	; 0x38
  404214:	2202      	movs	r2, #2
  404216:	4608      	mov	r0, r1
  404218:	931c      	str	r3, [sp, #112]	; 0x70
  40421a:	921d      	str	r2, [sp, #116]	; 0x74
  40421c:	46ca      	mov	sl, r9
  40421e:	4601      	mov	r1, r0
  404220:	f10a 0a08 	add.w	sl, sl, #8
  404224:	3001      	adds	r0, #1
  404226:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404228:	2b80      	cmp	r3, #128	; 0x80
  40422a:	f43f ae19 	beq.w	403e60 <_vfiprintf_r+0x384>
  40422e:	9b05      	ldr	r3, [sp, #20]
  404230:	1ae4      	subs	r4, r4, r3
  404232:	2c00      	cmp	r4, #0
  404234:	dd2e      	ble.n	404294 <_vfiprintf_r+0x7b8>
  404236:	2c10      	cmp	r4, #16
  404238:	4db3      	ldr	r5, [pc, #716]	; (404508 <_vfiprintf_r+0xa2c>)
  40423a:	dd1e      	ble.n	40427a <_vfiprintf_r+0x79e>
  40423c:	46d6      	mov	lr, sl
  40423e:	2610      	movs	r6, #16
  404240:	9f06      	ldr	r7, [sp, #24]
  404242:	f8dd a010 	ldr.w	sl, [sp, #16]
  404246:	e006      	b.n	404256 <_vfiprintf_r+0x77a>
  404248:	1c88      	adds	r0, r1, #2
  40424a:	f10e 0e08 	add.w	lr, lr, #8
  40424e:	4619      	mov	r1, r3
  404250:	3c10      	subs	r4, #16
  404252:	2c10      	cmp	r4, #16
  404254:	dd10      	ble.n	404278 <_vfiprintf_r+0x79c>
  404256:	1c4b      	adds	r3, r1, #1
  404258:	3210      	adds	r2, #16
  40425a:	2b07      	cmp	r3, #7
  40425c:	9211      	str	r2, [sp, #68]	; 0x44
  40425e:	e88e 0060 	stmia.w	lr, {r5, r6}
  404262:	9310      	str	r3, [sp, #64]	; 0x40
  404264:	ddf0      	ble.n	404248 <_vfiprintf_r+0x76c>
  404266:	2a00      	cmp	r2, #0
  404268:	d165      	bne.n	404336 <_vfiprintf_r+0x85a>
  40426a:	3c10      	subs	r4, #16
  40426c:	2c10      	cmp	r4, #16
  40426e:	f04f 0001 	mov.w	r0, #1
  404272:	4611      	mov	r1, r2
  404274:	46ce      	mov	lr, r9
  404276:	dcee      	bgt.n	404256 <_vfiprintf_r+0x77a>
  404278:	46f2      	mov	sl, lr
  40427a:	4422      	add	r2, r4
  40427c:	2807      	cmp	r0, #7
  40427e:	9211      	str	r2, [sp, #68]	; 0x44
  404280:	f8ca 5000 	str.w	r5, [sl]
  404284:	f8ca 4004 	str.w	r4, [sl, #4]
  404288:	9010      	str	r0, [sp, #64]	; 0x40
  40428a:	f300 8085 	bgt.w	404398 <_vfiprintf_r+0x8bc>
  40428e:	f10a 0a08 	add.w	sl, sl, #8
  404292:	3001      	adds	r0, #1
  404294:	9905      	ldr	r1, [sp, #20]
  404296:	f8ca b000 	str.w	fp, [sl]
  40429a:	440a      	add	r2, r1
  40429c:	2807      	cmp	r0, #7
  40429e:	9211      	str	r2, [sp, #68]	; 0x44
  4042a0:	f8ca 1004 	str.w	r1, [sl, #4]
  4042a4:	9010      	str	r0, [sp, #64]	; 0x40
  4042a6:	f340 8082 	ble.w	4043ae <_vfiprintf_r+0x8d2>
  4042aa:	2a00      	cmp	r2, #0
  4042ac:	f040 8118 	bne.w	4044e0 <_vfiprintf_r+0xa04>
  4042b0:	9b02      	ldr	r3, [sp, #8]
  4042b2:	9210      	str	r2, [sp, #64]	; 0x40
  4042b4:	0758      	lsls	r0, r3, #29
  4042b6:	d535      	bpl.n	404324 <_vfiprintf_r+0x848>
  4042b8:	9b08      	ldr	r3, [sp, #32]
  4042ba:	9901      	ldr	r1, [sp, #4]
  4042bc:	1a5c      	subs	r4, r3, r1
  4042be:	2c00      	cmp	r4, #0
  4042c0:	f340 80e7 	ble.w	404492 <_vfiprintf_r+0x9b6>
  4042c4:	46ca      	mov	sl, r9
  4042c6:	2c10      	cmp	r4, #16
  4042c8:	f340 8218 	ble.w	4046fc <_vfiprintf_r+0xc20>
  4042cc:	9910      	ldr	r1, [sp, #64]	; 0x40
  4042ce:	4e8f      	ldr	r6, [pc, #572]	; (40450c <_vfiprintf_r+0xa30>)
  4042d0:	9f06      	ldr	r7, [sp, #24]
  4042d2:	f8dd b010 	ldr.w	fp, [sp, #16]
  4042d6:	2510      	movs	r5, #16
  4042d8:	e006      	b.n	4042e8 <_vfiprintf_r+0x80c>
  4042da:	1c88      	adds	r0, r1, #2
  4042dc:	f10a 0a08 	add.w	sl, sl, #8
  4042e0:	4619      	mov	r1, r3
  4042e2:	3c10      	subs	r4, #16
  4042e4:	2c10      	cmp	r4, #16
  4042e6:	dd11      	ble.n	40430c <_vfiprintf_r+0x830>
  4042e8:	1c4b      	adds	r3, r1, #1
  4042ea:	3210      	adds	r2, #16
  4042ec:	2b07      	cmp	r3, #7
  4042ee:	9211      	str	r2, [sp, #68]	; 0x44
  4042f0:	f8ca 6000 	str.w	r6, [sl]
  4042f4:	f8ca 5004 	str.w	r5, [sl, #4]
  4042f8:	9310      	str	r3, [sp, #64]	; 0x40
  4042fa:	ddee      	ble.n	4042da <_vfiprintf_r+0x7fe>
  4042fc:	bb42      	cbnz	r2, 404350 <_vfiprintf_r+0x874>
  4042fe:	3c10      	subs	r4, #16
  404300:	2c10      	cmp	r4, #16
  404302:	f04f 0001 	mov.w	r0, #1
  404306:	4611      	mov	r1, r2
  404308:	46ca      	mov	sl, r9
  40430a:	dced      	bgt.n	4042e8 <_vfiprintf_r+0x80c>
  40430c:	4422      	add	r2, r4
  40430e:	2807      	cmp	r0, #7
  404310:	9211      	str	r2, [sp, #68]	; 0x44
  404312:	f8ca 6000 	str.w	r6, [sl]
  404316:	f8ca 4004 	str.w	r4, [sl, #4]
  40431a:	9010      	str	r0, [sp, #64]	; 0x40
  40431c:	dd51      	ble.n	4043c2 <_vfiprintf_r+0x8e6>
  40431e:	2a00      	cmp	r2, #0
  404320:	f040 819b 	bne.w	40465a <_vfiprintf_r+0xb7e>
  404324:	9b03      	ldr	r3, [sp, #12]
  404326:	9a08      	ldr	r2, [sp, #32]
  404328:	9901      	ldr	r1, [sp, #4]
  40432a:	428a      	cmp	r2, r1
  40432c:	bfac      	ite	ge
  40432e:	189b      	addge	r3, r3, r2
  404330:	185b      	addlt	r3, r3, r1
  404332:	9303      	str	r3, [sp, #12]
  404334:	e04e      	b.n	4043d4 <_vfiprintf_r+0x8f8>
  404336:	aa0f      	add	r2, sp, #60	; 0x3c
  404338:	4651      	mov	r1, sl
  40433a:	4638      	mov	r0, r7
  40433c:	f7ff fb8e 	bl	403a5c <__sprint_r.part.0>
  404340:	2800      	cmp	r0, #0
  404342:	f040 813f 	bne.w	4045c4 <_vfiprintf_r+0xae8>
  404346:	9910      	ldr	r1, [sp, #64]	; 0x40
  404348:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40434a:	1c48      	adds	r0, r1, #1
  40434c:	46ce      	mov	lr, r9
  40434e:	e77f      	b.n	404250 <_vfiprintf_r+0x774>
  404350:	aa0f      	add	r2, sp, #60	; 0x3c
  404352:	4659      	mov	r1, fp
  404354:	4638      	mov	r0, r7
  404356:	f7ff fb81 	bl	403a5c <__sprint_r.part.0>
  40435a:	b960      	cbnz	r0, 404376 <_vfiprintf_r+0x89a>
  40435c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40435e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404360:	1c48      	adds	r0, r1, #1
  404362:	46ca      	mov	sl, r9
  404364:	e7bd      	b.n	4042e2 <_vfiprintf_r+0x806>
  404366:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404368:	f8dd b010 	ldr.w	fp, [sp, #16]
  40436c:	2b00      	cmp	r3, #0
  40436e:	f040 81d4 	bne.w	40471a <_vfiprintf_r+0xc3e>
  404372:	2300      	movs	r3, #0
  404374:	9310      	str	r3, [sp, #64]	; 0x40
  404376:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40437a:	f013 0f01 	tst.w	r3, #1
  40437e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  404382:	d102      	bne.n	40438a <_vfiprintf_r+0x8ae>
  404384:	059a      	lsls	r2, r3, #22
  404386:	f140 80de 	bpl.w	404546 <_vfiprintf_r+0xa6a>
  40438a:	065b      	lsls	r3, r3, #25
  40438c:	f53f acb2 	bmi.w	403cf4 <_vfiprintf_r+0x218>
  404390:	9803      	ldr	r0, [sp, #12]
  404392:	b02d      	add	sp, #180	; 0xb4
  404394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404398:	2a00      	cmp	r2, #0
  40439a:	f040 8106 	bne.w	4045aa <_vfiprintf_r+0xace>
  40439e:	9a05      	ldr	r2, [sp, #20]
  4043a0:	921d      	str	r2, [sp, #116]	; 0x74
  4043a2:	2301      	movs	r3, #1
  4043a4:	9211      	str	r2, [sp, #68]	; 0x44
  4043a6:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  4043aa:	9310      	str	r3, [sp, #64]	; 0x40
  4043ac:	46ca      	mov	sl, r9
  4043ae:	f10a 0a08 	add.w	sl, sl, #8
  4043b2:	9b02      	ldr	r3, [sp, #8]
  4043b4:	0759      	lsls	r1, r3, #29
  4043b6:	d504      	bpl.n	4043c2 <_vfiprintf_r+0x8e6>
  4043b8:	9b08      	ldr	r3, [sp, #32]
  4043ba:	9901      	ldr	r1, [sp, #4]
  4043bc:	1a5c      	subs	r4, r3, r1
  4043be:	2c00      	cmp	r4, #0
  4043c0:	dc81      	bgt.n	4042c6 <_vfiprintf_r+0x7ea>
  4043c2:	9b03      	ldr	r3, [sp, #12]
  4043c4:	9908      	ldr	r1, [sp, #32]
  4043c6:	9801      	ldr	r0, [sp, #4]
  4043c8:	4281      	cmp	r1, r0
  4043ca:	bfac      	ite	ge
  4043cc:	185b      	addge	r3, r3, r1
  4043ce:	181b      	addlt	r3, r3, r0
  4043d0:	9303      	str	r3, [sp, #12]
  4043d2:	bb72      	cbnz	r2, 404432 <_vfiprintf_r+0x956>
  4043d4:	2300      	movs	r3, #0
  4043d6:	9310      	str	r3, [sp, #64]	; 0x40
  4043d8:	46ca      	mov	sl, r9
  4043da:	f7ff bbbc 	b.w	403b56 <_vfiprintf_r+0x7a>
  4043de:	aa0f      	add	r2, sp, #60	; 0x3c
  4043e0:	9904      	ldr	r1, [sp, #16]
  4043e2:	4620      	mov	r0, r4
  4043e4:	f7ff fb3a 	bl	403a5c <__sprint_r.part.0>
  4043e8:	bb50      	cbnz	r0, 404440 <_vfiprintf_r+0x964>
  4043ea:	9910      	ldr	r1, [sp, #64]	; 0x40
  4043ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4043ee:	f101 0e01 	add.w	lr, r1, #1
  4043f2:	46cc      	mov	ip, r9
  4043f4:	e548      	b.n	403e88 <_vfiprintf_r+0x3ac>
  4043f6:	2a00      	cmp	r2, #0
  4043f8:	f040 8140 	bne.w	40467c <_vfiprintf_r+0xba0>
  4043fc:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  404400:	2900      	cmp	r1, #0
  404402:	f000 811b 	beq.w	40463c <_vfiprintf_r+0xb60>
  404406:	2201      	movs	r2, #1
  404408:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  40440c:	4610      	mov	r0, r2
  40440e:	921d      	str	r2, [sp, #116]	; 0x74
  404410:	911c      	str	r1, [sp, #112]	; 0x70
  404412:	46ca      	mov	sl, r9
  404414:	4601      	mov	r1, r0
  404416:	f10a 0a08 	add.w	sl, sl, #8
  40441a:	3001      	adds	r0, #1
  40441c:	e507      	b.n	403e2e <_vfiprintf_r+0x352>
  40441e:	9b02      	ldr	r3, [sp, #8]
  404420:	2a01      	cmp	r2, #1
  404422:	f000 8098 	beq.w	404556 <_vfiprintf_r+0xa7a>
  404426:	2a02      	cmp	r2, #2
  404428:	d10d      	bne.n	404446 <_vfiprintf_r+0x96a>
  40442a:	9302      	str	r3, [sp, #8]
  40442c:	2600      	movs	r6, #0
  40442e:	2700      	movs	r7, #0
  404430:	e5b0      	b.n	403f94 <_vfiprintf_r+0x4b8>
  404432:	aa0f      	add	r2, sp, #60	; 0x3c
  404434:	9904      	ldr	r1, [sp, #16]
  404436:	9806      	ldr	r0, [sp, #24]
  404438:	f7ff fb10 	bl	403a5c <__sprint_r.part.0>
  40443c:	2800      	cmp	r0, #0
  40443e:	d0c9      	beq.n	4043d4 <_vfiprintf_r+0x8f8>
  404440:	f8dd b010 	ldr.w	fp, [sp, #16]
  404444:	e797      	b.n	404376 <_vfiprintf_r+0x89a>
  404446:	9302      	str	r3, [sp, #8]
  404448:	2600      	movs	r6, #0
  40444a:	2700      	movs	r7, #0
  40444c:	4649      	mov	r1, r9
  40444e:	e000      	b.n	404452 <_vfiprintf_r+0x976>
  404450:	4659      	mov	r1, fp
  404452:	08f2      	lsrs	r2, r6, #3
  404454:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  404458:	08f8      	lsrs	r0, r7, #3
  40445a:	f006 0307 	and.w	r3, r6, #7
  40445e:	4607      	mov	r7, r0
  404460:	4616      	mov	r6, r2
  404462:	3330      	adds	r3, #48	; 0x30
  404464:	ea56 0207 	orrs.w	r2, r6, r7
  404468:	f801 3c01 	strb.w	r3, [r1, #-1]
  40446c:	f101 3bff 	add.w	fp, r1, #4294967295
  404470:	d1ee      	bne.n	404450 <_vfiprintf_r+0x974>
  404472:	9a02      	ldr	r2, [sp, #8]
  404474:	07d6      	lsls	r6, r2, #31
  404476:	f57f ad9d 	bpl.w	403fb4 <_vfiprintf_r+0x4d8>
  40447a:	2b30      	cmp	r3, #48	; 0x30
  40447c:	f43f ad9a 	beq.w	403fb4 <_vfiprintf_r+0x4d8>
  404480:	3902      	subs	r1, #2
  404482:	2330      	movs	r3, #48	; 0x30
  404484:	f80b 3c01 	strb.w	r3, [fp, #-1]
  404488:	eba9 0301 	sub.w	r3, r9, r1
  40448c:	9305      	str	r3, [sp, #20]
  40448e:	468b      	mov	fp, r1
  404490:	e476      	b.n	403d80 <_vfiprintf_r+0x2a4>
  404492:	9b03      	ldr	r3, [sp, #12]
  404494:	9a08      	ldr	r2, [sp, #32]
  404496:	428a      	cmp	r2, r1
  404498:	bfac      	ite	ge
  40449a:	189b      	addge	r3, r3, r2
  40449c:	185b      	addlt	r3, r3, r1
  40449e:	9303      	str	r3, [sp, #12]
  4044a0:	e798      	b.n	4043d4 <_vfiprintf_r+0x8f8>
  4044a2:	2202      	movs	r2, #2
  4044a4:	e44d      	b.n	403d42 <_vfiprintf_r+0x266>
  4044a6:	2f00      	cmp	r7, #0
  4044a8:	bf08      	it	eq
  4044aa:	2e0a      	cmpeq	r6, #10
  4044ac:	d352      	bcc.n	404554 <_vfiprintf_r+0xa78>
  4044ae:	46cb      	mov	fp, r9
  4044b0:	4630      	mov	r0, r6
  4044b2:	4639      	mov	r1, r7
  4044b4:	220a      	movs	r2, #10
  4044b6:	2300      	movs	r3, #0
  4044b8:	f001 fbc6 	bl	405c48 <__aeabi_uldivmod>
  4044bc:	3230      	adds	r2, #48	; 0x30
  4044be:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  4044c2:	4630      	mov	r0, r6
  4044c4:	4639      	mov	r1, r7
  4044c6:	2300      	movs	r3, #0
  4044c8:	220a      	movs	r2, #10
  4044ca:	f001 fbbd 	bl	405c48 <__aeabi_uldivmod>
  4044ce:	4606      	mov	r6, r0
  4044d0:	460f      	mov	r7, r1
  4044d2:	ea56 0307 	orrs.w	r3, r6, r7
  4044d6:	d1eb      	bne.n	4044b0 <_vfiprintf_r+0x9d4>
  4044d8:	e56c      	b.n	403fb4 <_vfiprintf_r+0x4d8>
  4044da:	9405      	str	r4, [sp, #20]
  4044dc:	46cb      	mov	fp, r9
  4044de:	e44f      	b.n	403d80 <_vfiprintf_r+0x2a4>
  4044e0:	aa0f      	add	r2, sp, #60	; 0x3c
  4044e2:	9904      	ldr	r1, [sp, #16]
  4044e4:	9806      	ldr	r0, [sp, #24]
  4044e6:	f7ff fab9 	bl	403a5c <__sprint_r.part.0>
  4044ea:	2800      	cmp	r0, #0
  4044ec:	d1a8      	bne.n	404440 <_vfiprintf_r+0x964>
  4044ee:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4044f0:	46ca      	mov	sl, r9
  4044f2:	e75e      	b.n	4043b2 <_vfiprintf_r+0x8d6>
  4044f4:	aa0f      	add	r2, sp, #60	; 0x3c
  4044f6:	9904      	ldr	r1, [sp, #16]
  4044f8:	9806      	ldr	r0, [sp, #24]
  4044fa:	f7ff faaf 	bl	403a5c <__sprint_r.part.0>
  4044fe:	2800      	cmp	r0, #0
  404500:	d19e      	bne.n	404440 <_vfiprintf_r+0x964>
  404502:	46ca      	mov	sl, r9
  404504:	f7ff bbc0 	b.w	403c88 <_vfiprintf_r+0x1ac>
  404508:	00406164 	.word	0x00406164
  40450c:	00406154 	.word	0x00406154
  404510:	3104      	adds	r1, #4
  404512:	6816      	ldr	r6, [r2, #0]
  404514:	9107      	str	r1, [sp, #28]
  404516:	2201      	movs	r2, #1
  404518:	2700      	movs	r7, #0
  40451a:	e412      	b.n	403d42 <_vfiprintf_r+0x266>
  40451c:	9807      	ldr	r0, [sp, #28]
  40451e:	4601      	mov	r1, r0
  404520:	3104      	adds	r1, #4
  404522:	6806      	ldr	r6, [r0, #0]
  404524:	9107      	str	r1, [sp, #28]
  404526:	2700      	movs	r7, #0
  404528:	e40b      	b.n	403d42 <_vfiprintf_r+0x266>
  40452a:	680e      	ldr	r6, [r1, #0]
  40452c:	3104      	adds	r1, #4
  40452e:	9107      	str	r1, [sp, #28]
  404530:	2700      	movs	r7, #0
  404532:	e591      	b.n	404058 <_vfiprintf_r+0x57c>
  404534:	9907      	ldr	r1, [sp, #28]
  404536:	680e      	ldr	r6, [r1, #0]
  404538:	460a      	mov	r2, r1
  40453a:	17f7      	asrs	r7, r6, #31
  40453c:	3204      	adds	r2, #4
  40453e:	9207      	str	r2, [sp, #28]
  404540:	4630      	mov	r0, r6
  404542:	4639      	mov	r1, r7
  404544:	e50f      	b.n	403f66 <_vfiprintf_r+0x48a>
  404546:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40454a:	f000 fe7f 	bl	40524c <__retarget_lock_release_recursive>
  40454e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  404552:	e71a      	b.n	40438a <_vfiprintf_r+0x8ae>
  404554:	9b02      	ldr	r3, [sp, #8]
  404556:	9302      	str	r3, [sp, #8]
  404558:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40455c:	3630      	adds	r6, #48	; 0x30
  40455e:	2301      	movs	r3, #1
  404560:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  404564:	9305      	str	r3, [sp, #20]
  404566:	e40b      	b.n	403d80 <_vfiprintf_r+0x2a4>
  404568:	aa0f      	add	r2, sp, #60	; 0x3c
  40456a:	9904      	ldr	r1, [sp, #16]
  40456c:	9806      	ldr	r0, [sp, #24]
  40456e:	f7ff fa75 	bl	403a5c <__sprint_r.part.0>
  404572:	2800      	cmp	r0, #0
  404574:	f47f af64 	bne.w	404440 <_vfiprintf_r+0x964>
  404578:	9910      	ldr	r1, [sp, #64]	; 0x40
  40457a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40457c:	1c48      	adds	r0, r1, #1
  40457e:	46ca      	mov	sl, r9
  404580:	e651      	b.n	404226 <_vfiprintf_r+0x74a>
  404582:	aa0f      	add	r2, sp, #60	; 0x3c
  404584:	9904      	ldr	r1, [sp, #16]
  404586:	9806      	ldr	r0, [sp, #24]
  404588:	f7ff fa68 	bl	403a5c <__sprint_r.part.0>
  40458c:	2800      	cmp	r0, #0
  40458e:	f47f af57 	bne.w	404440 <_vfiprintf_r+0x964>
  404592:	9910      	ldr	r1, [sp, #64]	; 0x40
  404594:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404596:	1c48      	adds	r0, r1, #1
  404598:	46ca      	mov	sl, r9
  40459a:	e448      	b.n	403e2e <_vfiprintf_r+0x352>
  40459c:	2a00      	cmp	r2, #0
  40459e:	f040 8091 	bne.w	4046c4 <_vfiprintf_r+0xbe8>
  4045a2:	2001      	movs	r0, #1
  4045a4:	4611      	mov	r1, r2
  4045a6:	46ca      	mov	sl, r9
  4045a8:	e641      	b.n	40422e <_vfiprintf_r+0x752>
  4045aa:	aa0f      	add	r2, sp, #60	; 0x3c
  4045ac:	9904      	ldr	r1, [sp, #16]
  4045ae:	9806      	ldr	r0, [sp, #24]
  4045b0:	f7ff fa54 	bl	403a5c <__sprint_r.part.0>
  4045b4:	2800      	cmp	r0, #0
  4045b6:	f47f af43 	bne.w	404440 <_vfiprintf_r+0x964>
  4045ba:	9810      	ldr	r0, [sp, #64]	; 0x40
  4045bc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4045be:	3001      	adds	r0, #1
  4045c0:	46ca      	mov	sl, r9
  4045c2:	e667      	b.n	404294 <_vfiprintf_r+0x7b8>
  4045c4:	46d3      	mov	fp, sl
  4045c6:	e6d6      	b.n	404376 <_vfiprintf_r+0x89a>
  4045c8:	9e07      	ldr	r6, [sp, #28]
  4045ca:	3607      	adds	r6, #7
  4045cc:	f026 0207 	bic.w	r2, r6, #7
  4045d0:	f102 0108 	add.w	r1, r2, #8
  4045d4:	e9d2 6700 	ldrd	r6, r7, [r2]
  4045d8:	9107      	str	r1, [sp, #28]
  4045da:	2201      	movs	r2, #1
  4045dc:	f7ff bbb1 	b.w	403d42 <_vfiprintf_r+0x266>
  4045e0:	9e07      	ldr	r6, [sp, #28]
  4045e2:	3607      	adds	r6, #7
  4045e4:	f026 0607 	bic.w	r6, r6, #7
  4045e8:	e9d6 0100 	ldrd	r0, r1, [r6]
  4045ec:	f106 0208 	add.w	r2, r6, #8
  4045f0:	9207      	str	r2, [sp, #28]
  4045f2:	4606      	mov	r6, r0
  4045f4:	460f      	mov	r7, r1
  4045f6:	e4b6      	b.n	403f66 <_vfiprintf_r+0x48a>
  4045f8:	9e07      	ldr	r6, [sp, #28]
  4045fa:	3607      	adds	r6, #7
  4045fc:	f026 0207 	bic.w	r2, r6, #7
  404600:	f102 0108 	add.w	r1, r2, #8
  404604:	e9d2 6700 	ldrd	r6, r7, [r2]
  404608:	9107      	str	r1, [sp, #28]
  40460a:	2200      	movs	r2, #0
  40460c:	f7ff bb99 	b.w	403d42 <_vfiprintf_r+0x266>
  404610:	9e07      	ldr	r6, [sp, #28]
  404612:	3607      	adds	r6, #7
  404614:	f026 0107 	bic.w	r1, r6, #7
  404618:	f101 0008 	add.w	r0, r1, #8
  40461c:	9007      	str	r0, [sp, #28]
  40461e:	e9d1 6700 	ldrd	r6, r7, [r1]
  404622:	e519      	b.n	404058 <_vfiprintf_r+0x57c>
  404624:	46cb      	mov	fp, r9
  404626:	f7ff bbab 	b.w	403d80 <_vfiprintf_r+0x2a4>
  40462a:	252d      	movs	r5, #45	; 0x2d
  40462c:	4276      	negs	r6, r6
  40462e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  404632:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404636:	2201      	movs	r2, #1
  404638:	f7ff bb88 	b.w	403d4c <_vfiprintf_r+0x270>
  40463c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40463e:	b9b3      	cbnz	r3, 40466e <_vfiprintf_r+0xb92>
  404640:	4611      	mov	r1, r2
  404642:	2001      	movs	r0, #1
  404644:	46ca      	mov	sl, r9
  404646:	e5f2      	b.n	40422e <_vfiprintf_r+0x752>
  404648:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40464c:	f000 fdfe 	bl	40524c <__retarget_lock_release_recursive>
  404650:	f04f 33ff 	mov.w	r3, #4294967295
  404654:	9303      	str	r3, [sp, #12]
  404656:	f7ff bb50 	b.w	403cfa <_vfiprintf_r+0x21e>
  40465a:	aa0f      	add	r2, sp, #60	; 0x3c
  40465c:	9904      	ldr	r1, [sp, #16]
  40465e:	9806      	ldr	r0, [sp, #24]
  404660:	f7ff f9fc 	bl	403a5c <__sprint_r.part.0>
  404664:	2800      	cmp	r0, #0
  404666:	f47f aeeb 	bne.w	404440 <_vfiprintf_r+0x964>
  40466a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40466c:	e6a9      	b.n	4043c2 <_vfiprintf_r+0x8e6>
  40466e:	ab0e      	add	r3, sp, #56	; 0x38
  404670:	2202      	movs	r2, #2
  404672:	931c      	str	r3, [sp, #112]	; 0x70
  404674:	921d      	str	r2, [sp, #116]	; 0x74
  404676:	2001      	movs	r0, #1
  404678:	46ca      	mov	sl, r9
  40467a:	e5d0      	b.n	40421e <_vfiprintf_r+0x742>
  40467c:	aa0f      	add	r2, sp, #60	; 0x3c
  40467e:	9904      	ldr	r1, [sp, #16]
  404680:	9806      	ldr	r0, [sp, #24]
  404682:	f7ff f9eb 	bl	403a5c <__sprint_r.part.0>
  404686:	2800      	cmp	r0, #0
  404688:	f47f aeda 	bne.w	404440 <_vfiprintf_r+0x964>
  40468c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40468e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404690:	1c48      	adds	r0, r1, #1
  404692:	46ca      	mov	sl, r9
  404694:	e5a4      	b.n	4041e0 <_vfiprintf_r+0x704>
  404696:	9a07      	ldr	r2, [sp, #28]
  404698:	9903      	ldr	r1, [sp, #12]
  40469a:	6813      	ldr	r3, [r2, #0]
  40469c:	17cd      	asrs	r5, r1, #31
  40469e:	4608      	mov	r0, r1
  4046a0:	3204      	adds	r2, #4
  4046a2:	4629      	mov	r1, r5
  4046a4:	9207      	str	r2, [sp, #28]
  4046a6:	e9c3 0100 	strd	r0, r1, [r3]
  4046aa:	f7ff ba54 	b.w	403b56 <_vfiprintf_r+0x7a>
  4046ae:	4658      	mov	r0, fp
  4046b0:	9607      	str	r6, [sp, #28]
  4046b2:	9302      	str	r3, [sp, #8]
  4046b4:	f7ff f964 	bl	403980 <strlen>
  4046b8:	2400      	movs	r4, #0
  4046ba:	9005      	str	r0, [sp, #20]
  4046bc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4046c0:	f7ff bb5e 	b.w	403d80 <_vfiprintf_r+0x2a4>
  4046c4:	aa0f      	add	r2, sp, #60	; 0x3c
  4046c6:	9904      	ldr	r1, [sp, #16]
  4046c8:	9806      	ldr	r0, [sp, #24]
  4046ca:	f7ff f9c7 	bl	403a5c <__sprint_r.part.0>
  4046ce:	2800      	cmp	r0, #0
  4046d0:	f47f aeb6 	bne.w	404440 <_vfiprintf_r+0x964>
  4046d4:	9910      	ldr	r1, [sp, #64]	; 0x40
  4046d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4046d8:	1c48      	adds	r0, r1, #1
  4046da:	46ca      	mov	sl, r9
  4046dc:	e5a7      	b.n	40422e <_vfiprintf_r+0x752>
  4046de:	9910      	ldr	r1, [sp, #64]	; 0x40
  4046e0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4046e2:	4e20      	ldr	r6, [pc, #128]	; (404764 <_vfiprintf_r+0xc88>)
  4046e4:	3101      	adds	r1, #1
  4046e6:	f7ff bb90 	b.w	403e0a <_vfiprintf_r+0x32e>
  4046ea:	2c06      	cmp	r4, #6
  4046ec:	bf28      	it	cs
  4046ee:	2406      	movcs	r4, #6
  4046f0:	9405      	str	r4, [sp, #20]
  4046f2:	9607      	str	r6, [sp, #28]
  4046f4:	9401      	str	r4, [sp, #4]
  4046f6:	f8df b070 	ldr.w	fp, [pc, #112]	; 404768 <_vfiprintf_r+0xc8c>
  4046fa:	e4d5      	b.n	4040a8 <_vfiprintf_r+0x5cc>
  4046fc:	9810      	ldr	r0, [sp, #64]	; 0x40
  4046fe:	4e19      	ldr	r6, [pc, #100]	; (404764 <_vfiprintf_r+0xc88>)
  404700:	3001      	adds	r0, #1
  404702:	e603      	b.n	40430c <_vfiprintf_r+0x830>
  404704:	9405      	str	r4, [sp, #20]
  404706:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40470a:	9607      	str	r6, [sp, #28]
  40470c:	9302      	str	r3, [sp, #8]
  40470e:	4604      	mov	r4, r0
  404710:	f7ff bb36 	b.w	403d80 <_vfiprintf_r+0x2a4>
  404714:	4686      	mov	lr, r0
  404716:	f7ff bbce 	b.w	403eb6 <_vfiprintf_r+0x3da>
  40471a:	9806      	ldr	r0, [sp, #24]
  40471c:	aa0f      	add	r2, sp, #60	; 0x3c
  40471e:	4659      	mov	r1, fp
  404720:	f7ff f99c 	bl	403a5c <__sprint_r.part.0>
  404724:	2800      	cmp	r0, #0
  404726:	f43f ae24 	beq.w	404372 <_vfiprintf_r+0x896>
  40472a:	e624      	b.n	404376 <_vfiprintf_r+0x89a>
  40472c:	9907      	ldr	r1, [sp, #28]
  40472e:	f898 2001 	ldrb.w	r2, [r8, #1]
  404732:	680c      	ldr	r4, [r1, #0]
  404734:	3104      	adds	r1, #4
  404736:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  40473a:	46b8      	mov	r8, r7
  40473c:	9107      	str	r1, [sp, #28]
  40473e:	f7ff ba3f 	b.w	403bc0 <_vfiprintf_r+0xe4>
  404742:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404746:	e43c      	b.n	403fc2 <_vfiprintf_r+0x4e6>
  404748:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40474c:	e521      	b.n	404192 <_vfiprintf_r+0x6b6>
  40474e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404752:	f7ff bbf4 	b.w	403f3e <_vfiprintf_r+0x462>
  404756:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40475a:	e491      	b.n	404080 <_vfiprintf_r+0x5a4>
  40475c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404760:	e469      	b.n	404036 <_vfiprintf_r+0x55a>
  404762:	bf00      	nop
  404764:	00406154 	.word	0x00406154
  404768:	0040614c 	.word	0x0040614c

0040476c <__sbprintf>:
  40476c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404770:	460c      	mov	r4, r1
  404772:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  404776:	8989      	ldrh	r1, [r1, #12]
  404778:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40477a:	89e5      	ldrh	r5, [r4, #14]
  40477c:	9619      	str	r6, [sp, #100]	; 0x64
  40477e:	f021 0102 	bic.w	r1, r1, #2
  404782:	4606      	mov	r6, r0
  404784:	69e0      	ldr	r0, [r4, #28]
  404786:	f8ad 100c 	strh.w	r1, [sp, #12]
  40478a:	4617      	mov	r7, r2
  40478c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  404790:	6a62      	ldr	r2, [r4, #36]	; 0x24
  404792:	f8ad 500e 	strh.w	r5, [sp, #14]
  404796:	4698      	mov	r8, r3
  404798:	ad1a      	add	r5, sp, #104	; 0x68
  40479a:	2300      	movs	r3, #0
  40479c:	9007      	str	r0, [sp, #28]
  40479e:	a816      	add	r0, sp, #88	; 0x58
  4047a0:	9209      	str	r2, [sp, #36]	; 0x24
  4047a2:	9306      	str	r3, [sp, #24]
  4047a4:	9500      	str	r5, [sp, #0]
  4047a6:	9504      	str	r5, [sp, #16]
  4047a8:	9102      	str	r1, [sp, #8]
  4047aa:	9105      	str	r1, [sp, #20]
  4047ac:	f000 fd48 	bl	405240 <__retarget_lock_init_recursive>
  4047b0:	4643      	mov	r3, r8
  4047b2:	463a      	mov	r2, r7
  4047b4:	4669      	mov	r1, sp
  4047b6:	4630      	mov	r0, r6
  4047b8:	f7ff f990 	bl	403adc <_vfiprintf_r>
  4047bc:	1e05      	subs	r5, r0, #0
  4047be:	db07      	blt.n	4047d0 <__sbprintf+0x64>
  4047c0:	4630      	mov	r0, r6
  4047c2:	4669      	mov	r1, sp
  4047c4:	f000 f928 	bl	404a18 <_fflush_r>
  4047c8:	2800      	cmp	r0, #0
  4047ca:	bf18      	it	ne
  4047cc:	f04f 35ff 	movne.w	r5, #4294967295
  4047d0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  4047d4:	065b      	lsls	r3, r3, #25
  4047d6:	d503      	bpl.n	4047e0 <__sbprintf+0x74>
  4047d8:	89a3      	ldrh	r3, [r4, #12]
  4047da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4047de:	81a3      	strh	r3, [r4, #12]
  4047e0:	9816      	ldr	r0, [sp, #88]	; 0x58
  4047e2:	f000 fd2f 	bl	405244 <__retarget_lock_close_recursive>
  4047e6:	4628      	mov	r0, r5
  4047e8:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  4047ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004047f0 <__swsetup_r>:
  4047f0:	b538      	push	{r3, r4, r5, lr}
  4047f2:	4b30      	ldr	r3, [pc, #192]	; (4048b4 <__swsetup_r+0xc4>)
  4047f4:	681b      	ldr	r3, [r3, #0]
  4047f6:	4605      	mov	r5, r0
  4047f8:	460c      	mov	r4, r1
  4047fa:	b113      	cbz	r3, 404802 <__swsetup_r+0x12>
  4047fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4047fe:	2a00      	cmp	r2, #0
  404800:	d038      	beq.n	404874 <__swsetup_r+0x84>
  404802:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404806:	b293      	uxth	r3, r2
  404808:	0718      	lsls	r0, r3, #28
  40480a:	d50c      	bpl.n	404826 <__swsetup_r+0x36>
  40480c:	6920      	ldr	r0, [r4, #16]
  40480e:	b1a8      	cbz	r0, 40483c <__swsetup_r+0x4c>
  404810:	f013 0201 	ands.w	r2, r3, #1
  404814:	d01e      	beq.n	404854 <__swsetup_r+0x64>
  404816:	6963      	ldr	r3, [r4, #20]
  404818:	2200      	movs	r2, #0
  40481a:	425b      	negs	r3, r3
  40481c:	61a3      	str	r3, [r4, #24]
  40481e:	60a2      	str	r2, [r4, #8]
  404820:	b1f0      	cbz	r0, 404860 <__swsetup_r+0x70>
  404822:	2000      	movs	r0, #0
  404824:	bd38      	pop	{r3, r4, r5, pc}
  404826:	06d9      	lsls	r1, r3, #27
  404828:	d53c      	bpl.n	4048a4 <__swsetup_r+0xb4>
  40482a:	0758      	lsls	r0, r3, #29
  40482c:	d426      	bmi.n	40487c <__swsetup_r+0x8c>
  40482e:	6920      	ldr	r0, [r4, #16]
  404830:	f042 0308 	orr.w	r3, r2, #8
  404834:	81a3      	strh	r3, [r4, #12]
  404836:	b29b      	uxth	r3, r3
  404838:	2800      	cmp	r0, #0
  40483a:	d1e9      	bne.n	404810 <__swsetup_r+0x20>
  40483c:	f403 7220 	and.w	r2, r3, #640	; 0x280
  404840:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  404844:	d0e4      	beq.n	404810 <__swsetup_r+0x20>
  404846:	4628      	mov	r0, r5
  404848:	4621      	mov	r1, r4
  40484a:	f000 fd2f 	bl	4052ac <__smakebuf_r>
  40484e:	89a3      	ldrh	r3, [r4, #12]
  404850:	6920      	ldr	r0, [r4, #16]
  404852:	e7dd      	b.n	404810 <__swsetup_r+0x20>
  404854:	0799      	lsls	r1, r3, #30
  404856:	bf58      	it	pl
  404858:	6962      	ldrpl	r2, [r4, #20]
  40485a:	60a2      	str	r2, [r4, #8]
  40485c:	2800      	cmp	r0, #0
  40485e:	d1e0      	bne.n	404822 <__swsetup_r+0x32>
  404860:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404864:	061a      	lsls	r2, r3, #24
  404866:	d5dd      	bpl.n	404824 <__swsetup_r+0x34>
  404868:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40486c:	81a3      	strh	r3, [r4, #12]
  40486e:	f04f 30ff 	mov.w	r0, #4294967295
  404872:	bd38      	pop	{r3, r4, r5, pc}
  404874:	4618      	mov	r0, r3
  404876:	f000 f927 	bl	404ac8 <__sinit>
  40487a:	e7c2      	b.n	404802 <__swsetup_r+0x12>
  40487c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40487e:	b151      	cbz	r1, 404896 <__swsetup_r+0xa6>
  404880:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404884:	4299      	cmp	r1, r3
  404886:	d004      	beq.n	404892 <__swsetup_r+0xa2>
  404888:	4628      	mov	r0, r5
  40488a:	f000 fa43 	bl	404d14 <_free_r>
  40488e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404892:	2300      	movs	r3, #0
  404894:	6323      	str	r3, [r4, #48]	; 0x30
  404896:	2300      	movs	r3, #0
  404898:	6920      	ldr	r0, [r4, #16]
  40489a:	6063      	str	r3, [r4, #4]
  40489c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  4048a0:	6020      	str	r0, [r4, #0]
  4048a2:	e7c5      	b.n	404830 <__swsetup_r+0x40>
  4048a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4048a8:	2309      	movs	r3, #9
  4048aa:	602b      	str	r3, [r5, #0]
  4048ac:	f04f 30ff 	mov.w	r0, #4294967295
  4048b0:	81a2      	strh	r2, [r4, #12]
  4048b2:	bd38      	pop	{r3, r4, r5, pc}
  4048b4:	2040000c 	.word	0x2040000c

004048b8 <register_fini>:
  4048b8:	4b02      	ldr	r3, [pc, #8]	; (4048c4 <register_fini+0xc>)
  4048ba:	b113      	cbz	r3, 4048c2 <register_fini+0xa>
  4048bc:	4802      	ldr	r0, [pc, #8]	; (4048c8 <register_fini+0x10>)
  4048be:	f000 b805 	b.w	4048cc <atexit>
  4048c2:	4770      	bx	lr
  4048c4:	00000000 	.word	0x00000000
  4048c8:	00404b39 	.word	0x00404b39

004048cc <atexit>:
  4048cc:	2300      	movs	r3, #0
  4048ce:	4601      	mov	r1, r0
  4048d0:	461a      	mov	r2, r3
  4048d2:	4618      	mov	r0, r3
  4048d4:	f001 b890 	b.w	4059f8 <__register_exitproc>

004048d8 <__sflush_r>:
  4048d8:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  4048dc:	b29a      	uxth	r2, r3
  4048de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4048e2:	460d      	mov	r5, r1
  4048e4:	0711      	lsls	r1, r2, #28
  4048e6:	4680      	mov	r8, r0
  4048e8:	d43a      	bmi.n	404960 <__sflush_r+0x88>
  4048ea:	686a      	ldr	r2, [r5, #4]
  4048ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4048f0:	2a00      	cmp	r2, #0
  4048f2:	81ab      	strh	r3, [r5, #12]
  4048f4:	dd6f      	ble.n	4049d6 <__sflush_r+0xfe>
  4048f6:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4048f8:	2c00      	cmp	r4, #0
  4048fa:	d049      	beq.n	404990 <__sflush_r+0xb8>
  4048fc:	2200      	movs	r2, #0
  4048fe:	b29b      	uxth	r3, r3
  404900:	f8d8 6000 	ldr.w	r6, [r8]
  404904:	f8c8 2000 	str.w	r2, [r8]
  404908:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  40490c:	d067      	beq.n	4049de <__sflush_r+0x106>
  40490e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  404910:	075f      	lsls	r7, r3, #29
  404912:	d505      	bpl.n	404920 <__sflush_r+0x48>
  404914:	6869      	ldr	r1, [r5, #4]
  404916:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  404918:	1a52      	subs	r2, r2, r1
  40491a:	b10b      	cbz	r3, 404920 <__sflush_r+0x48>
  40491c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40491e:	1ad2      	subs	r2, r2, r3
  404920:	2300      	movs	r3, #0
  404922:	69e9      	ldr	r1, [r5, #28]
  404924:	4640      	mov	r0, r8
  404926:	47a0      	blx	r4
  404928:	1c44      	adds	r4, r0, #1
  40492a:	d03c      	beq.n	4049a6 <__sflush_r+0xce>
  40492c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  404930:	692a      	ldr	r2, [r5, #16]
  404932:	602a      	str	r2, [r5, #0]
  404934:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  404938:	2200      	movs	r2, #0
  40493a:	81ab      	strh	r3, [r5, #12]
  40493c:	04db      	lsls	r3, r3, #19
  40493e:	606a      	str	r2, [r5, #4]
  404940:	d447      	bmi.n	4049d2 <__sflush_r+0xfa>
  404942:	6b29      	ldr	r1, [r5, #48]	; 0x30
  404944:	f8c8 6000 	str.w	r6, [r8]
  404948:	b311      	cbz	r1, 404990 <__sflush_r+0xb8>
  40494a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40494e:	4299      	cmp	r1, r3
  404950:	d002      	beq.n	404958 <__sflush_r+0x80>
  404952:	4640      	mov	r0, r8
  404954:	f000 f9de 	bl	404d14 <_free_r>
  404958:	2000      	movs	r0, #0
  40495a:	6328      	str	r0, [r5, #48]	; 0x30
  40495c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404960:	692e      	ldr	r6, [r5, #16]
  404962:	b1ae      	cbz	r6, 404990 <__sflush_r+0xb8>
  404964:	682c      	ldr	r4, [r5, #0]
  404966:	602e      	str	r6, [r5, #0]
  404968:	0791      	lsls	r1, r2, #30
  40496a:	bf0c      	ite	eq
  40496c:	696b      	ldreq	r3, [r5, #20]
  40496e:	2300      	movne	r3, #0
  404970:	1ba4      	subs	r4, r4, r6
  404972:	60ab      	str	r3, [r5, #8]
  404974:	e00a      	b.n	40498c <__sflush_r+0xb4>
  404976:	4623      	mov	r3, r4
  404978:	4632      	mov	r2, r6
  40497a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40497c:	69e9      	ldr	r1, [r5, #28]
  40497e:	4640      	mov	r0, r8
  404980:	47b8      	blx	r7
  404982:	2800      	cmp	r0, #0
  404984:	eba4 0400 	sub.w	r4, r4, r0
  404988:	4406      	add	r6, r0
  40498a:	dd04      	ble.n	404996 <__sflush_r+0xbe>
  40498c:	2c00      	cmp	r4, #0
  40498e:	dcf2      	bgt.n	404976 <__sflush_r+0x9e>
  404990:	2000      	movs	r0, #0
  404992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404996:	89ab      	ldrh	r3, [r5, #12]
  404998:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40499c:	81ab      	strh	r3, [r5, #12]
  40499e:	f04f 30ff 	mov.w	r0, #4294967295
  4049a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4049a6:	f8d8 4000 	ldr.w	r4, [r8]
  4049aa:	2c1d      	cmp	r4, #29
  4049ac:	d8f3      	bhi.n	404996 <__sflush_r+0xbe>
  4049ae:	4b19      	ldr	r3, [pc, #100]	; (404a14 <__sflush_r+0x13c>)
  4049b0:	40e3      	lsrs	r3, r4
  4049b2:	43db      	mvns	r3, r3
  4049b4:	f013 0301 	ands.w	r3, r3, #1
  4049b8:	d1ed      	bne.n	404996 <__sflush_r+0xbe>
  4049ba:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  4049be:	606b      	str	r3, [r5, #4]
  4049c0:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  4049c4:	6929      	ldr	r1, [r5, #16]
  4049c6:	81ab      	strh	r3, [r5, #12]
  4049c8:	04da      	lsls	r2, r3, #19
  4049ca:	6029      	str	r1, [r5, #0]
  4049cc:	d5b9      	bpl.n	404942 <__sflush_r+0x6a>
  4049ce:	2c00      	cmp	r4, #0
  4049d0:	d1b7      	bne.n	404942 <__sflush_r+0x6a>
  4049d2:	6528      	str	r0, [r5, #80]	; 0x50
  4049d4:	e7b5      	b.n	404942 <__sflush_r+0x6a>
  4049d6:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  4049d8:	2a00      	cmp	r2, #0
  4049da:	dc8c      	bgt.n	4048f6 <__sflush_r+0x1e>
  4049dc:	e7d8      	b.n	404990 <__sflush_r+0xb8>
  4049de:	2301      	movs	r3, #1
  4049e0:	69e9      	ldr	r1, [r5, #28]
  4049e2:	4640      	mov	r0, r8
  4049e4:	47a0      	blx	r4
  4049e6:	1c43      	adds	r3, r0, #1
  4049e8:	4602      	mov	r2, r0
  4049ea:	d002      	beq.n	4049f2 <__sflush_r+0x11a>
  4049ec:	89ab      	ldrh	r3, [r5, #12]
  4049ee:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4049f0:	e78e      	b.n	404910 <__sflush_r+0x38>
  4049f2:	f8d8 3000 	ldr.w	r3, [r8]
  4049f6:	2b00      	cmp	r3, #0
  4049f8:	d0f8      	beq.n	4049ec <__sflush_r+0x114>
  4049fa:	2b1d      	cmp	r3, #29
  4049fc:	d001      	beq.n	404a02 <__sflush_r+0x12a>
  4049fe:	2b16      	cmp	r3, #22
  404a00:	d102      	bne.n	404a08 <__sflush_r+0x130>
  404a02:	f8c8 6000 	str.w	r6, [r8]
  404a06:	e7c3      	b.n	404990 <__sflush_r+0xb8>
  404a08:	89ab      	ldrh	r3, [r5, #12]
  404a0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404a0e:	81ab      	strh	r3, [r5, #12]
  404a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404a14:	20400001 	.word	0x20400001

00404a18 <_fflush_r>:
  404a18:	b538      	push	{r3, r4, r5, lr}
  404a1a:	460d      	mov	r5, r1
  404a1c:	4604      	mov	r4, r0
  404a1e:	b108      	cbz	r0, 404a24 <_fflush_r+0xc>
  404a20:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404a22:	b1bb      	cbz	r3, 404a54 <_fflush_r+0x3c>
  404a24:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  404a28:	b188      	cbz	r0, 404a4e <_fflush_r+0x36>
  404a2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  404a2c:	07db      	lsls	r3, r3, #31
  404a2e:	d401      	bmi.n	404a34 <_fflush_r+0x1c>
  404a30:	0581      	lsls	r1, r0, #22
  404a32:	d517      	bpl.n	404a64 <_fflush_r+0x4c>
  404a34:	4620      	mov	r0, r4
  404a36:	4629      	mov	r1, r5
  404a38:	f7ff ff4e 	bl	4048d8 <__sflush_r>
  404a3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  404a3e:	07da      	lsls	r2, r3, #31
  404a40:	4604      	mov	r4, r0
  404a42:	d402      	bmi.n	404a4a <_fflush_r+0x32>
  404a44:	89ab      	ldrh	r3, [r5, #12]
  404a46:	059b      	lsls	r3, r3, #22
  404a48:	d507      	bpl.n	404a5a <_fflush_r+0x42>
  404a4a:	4620      	mov	r0, r4
  404a4c:	bd38      	pop	{r3, r4, r5, pc}
  404a4e:	4604      	mov	r4, r0
  404a50:	4620      	mov	r0, r4
  404a52:	bd38      	pop	{r3, r4, r5, pc}
  404a54:	f000 f838 	bl	404ac8 <__sinit>
  404a58:	e7e4      	b.n	404a24 <_fflush_r+0xc>
  404a5a:	6da8      	ldr	r0, [r5, #88]	; 0x58
  404a5c:	f000 fbf6 	bl	40524c <__retarget_lock_release_recursive>
  404a60:	4620      	mov	r0, r4
  404a62:	bd38      	pop	{r3, r4, r5, pc}
  404a64:	6da8      	ldr	r0, [r5, #88]	; 0x58
  404a66:	f000 fbef 	bl	405248 <__retarget_lock_acquire_recursive>
  404a6a:	e7e3      	b.n	404a34 <_fflush_r+0x1c>

00404a6c <_cleanup_r>:
  404a6c:	4901      	ldr	r1, [pc, #4]	; (404a74 <_cleanup_r+0x8>)
  404a6e:	f000 bbaf 	b.w	4051d0 <_fwalk_reent>
  404a72:	bf00      	nop
  404a74:	00405ae1 	.word	0x00405ae1

00404a78 <std.isra.0>:
  404a78:	b510      	push	{r4, lr}
  404a7a:	2300      	movs	r3, #0
  404a7c:	4604      	mov	r4, r0
  404a7e:	8181      	strh	r1, [r0, #12]
  404a80:	81c2      	strh	r2, [r0, #14]
  404a82:	6003      	str	r3, [r0, #0]
  404a84:	6043      	str	r3, [r0, #4]
  404a86:	6083      	str	r3, [r0, #8]
  404a88:	6643      	str	r3, [r0, #100]	; 0x64
  404a8a:	6103      	str	r3, [r0, #16]
  404a8c:	6143      	str	r3, [r0, #20]
  404a8e:	6183      	str	r3, [r0, #24]
  404a90:	4619      	mov	r1, r3
  404a92:	2208      	movs	r2, #8
  404a94:	305c      	adds	r0, #92	; 0x5c
  404a96:	f7fe fe2f 	bl	4036f8 <memset>
  404a9a:	4807      	ldr	r0, [pc, #28]	; (404ab8 <std.isra.0+0x40>)
  404a9c:	4907      	ldr	r1, [pc, #28]	; (404abc <std.isra.0+0x44>)
  404a9e:	4a08      	ldr	r2, [pc, #32]	; (404ac0 <std.isra.0+0x48>)
  404aa0:	4b08      	ldr	r3, [pc, #32]	; (404ac4 <std.isra.0+0x4c>)
  404aa2:	6220      	str	r0, [r4, #32]
  404aa4:	61e4      	str	r4, [r4, #28]
  404aa6:	6261      	str	r1, [r4, #36]	; 0x24
  404aa8:	62a2      	str	r2, [r4, #40]	; 0x28
  404aaa:	62e3      	str	r3, [r4, #44]	; 0x2c
  404aac:	f104 0058 	add.w	r0, r4, #88	; 0x58
  404ab0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  404ab4:	f000 bbc4 	b.w	405240 <__retarget_lock_init_recursive>
  404ab8:	00405825 	.word	0x00405825
  404abc:	00405849 	.word	0x00405849
  404ac0:	00405885 	.word	0x00405885
  404ac4:	004058a5 	.word	0x004058a5

00404ac8 <__sinit>:
  404ac8:	b510      	push	{r4, lr}
  404aca:	4604      	mov	r4, r0
  404acc:	4812      	ldr	r0, [pc, #72]	; (404b18 <__sinit+0x50>)
  404ace:	f000 fbbb 	bl	405248 <__retarget_lock_acquire_recursive>
  404ad2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  404ad4:	b9d2      	cbnz	r2, 404b0c <__sinit+0x44>
  404ad6:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  404ada:	4810      	ldr	r0, [pc, #64]	; (404b1c <__sinit+0x54>)
  404adc:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  404ae0:	2103      	movs	r1, #3
  404ae2:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  404ae6:	63e0      	str	r0, [r4, #60]	; 0x3c
  404ae8:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  404aec:	6860      	ldr	r0, [r4, #4]
  404aee:	2104      	movs	r1, #4
  404af0:	f7ff ffc2 	bl	404a78 <std.isra.0>
  404af4:	2201      	movs	r2, #1
  404af6:	2109      	movs	r1, #9
  404af8:	68a0      	ldr	r0, [r4, #8]
  404afa:	f7ff ffbd 	bl	404a78 <std.isra.0>
  404afe:	2202      	movs	r2, #2
  404b00:	2112      	movs	r1, #18
  404b02:	68e0      	ldr	r0, [r4, #12]
  404b04:	f7ff ffb8 	bl	404a78 <std.isra.0>
  404b08:	2301      	movs	r3, #1
  404b0a:	63a3      	str	r3, [r4, #56]	; 0x38
  404b0c:	4802      	ldr	r0, [pc, #8]	; (404b18 <__sinit+0x50>)
  404b0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  404b12:	f000 bb9b 	b.w	40524c <__retarget_lock_release_recursive>
  404b16:	bf00      	nop
  404b18:	20400c2c 	.word	0x20400c2c
  404b1c:	00404a6d 	.word	0x00404a6d

00404b20 <__sfp_lock_acquire>:
  404b20:	4801      	ldr	r0, [pc, #4]	; (404b28 <__sfp_lock_acquire+0x8>)
  404b22:	f000 bb91 	b.w	405248 <__retarget_lock_acquire_recursive>
  404b26:	bf00      	nop
  404b28:	20400c40 	.word	0x20400c40

00404b2c <__sfp_lock_release>:
  404b2c:	4801      	ldr	r0, [pc, #4]	; (404b34 <__sfp_lock_release+0x8>)
  404b2e:	f000 bb8d 	b.w	40524c <__retarget_lock_release_recursive>
  404b32:	bf00      	nop
  404b34:	20400c40 	.word	0x20400c40

00404b38 <__libc_fini_array>:
  404b38:	b538      	push	{r3, r4, r5, lr}
  404b3a:	4c0a      	ldr	r4, [pc, #40]	; (404b64 <__libc_fini_array+0x2c>)
  404b3c:	4d0a      	ldr	r5, [pc, #40]	; (404b68 <__libc_fini_array+0x30>)
  404b3e:	1b64      	subs	r4, r4, r5
  404b40:	10a4      	asrs	r4, r4, #2
  404b42:	d00a      	beq.n	404b5a <__libc_fini_array+0x22>
  404b44:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  404b48:	3b01      	subs	r3, #1
  404b4a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  404b4e:	3c01      	subs	r4, #1
  404b50:	f855 3904 	ldr.w	r3, [r5], #-4
  404b54:	4798      	blx	r3
  404b56:	2c00      	cmp	r4, #0
  404b58:	d1f9      	bne.n	404b4e <__libc_fini_array+0x16>
  404b5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  404b5e:	f001 bb9d 	b.w	40629c <_fini>
  404b62:	bf00      	nop
  404b64:	004062ac 	.word	0x004062ac
  404b68:	004062a8 	.word	0x004062a8

00404b6c <__fputwc>:
  404b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404b70:	b082      	sub	sp, #8
  404b72:	4680      	mov	r8, r0
  404b74:	4689      	mov	r9, r1
  404b76:	4614      	mov	r4, r2
  404b78:	f000 fb54 	bl	405224 <__locale_mb_cur_max>
  404b7c:	2801      	cmp	r0, #1
  404b7e:	d036      	beq.n	404bee <__fputwc+0x82>
  404b80:	464a      	mov	r2, r9
  404b82:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  404b86:	a901      	add	r1, sp, #4
  404b88:	4640      	mov	r0, r8
  404b8a:	f000 fee7 	bl	40595c <_wcrtomb_r>
  404b8e:	1c42      	adds	r2, r0, #1
  404b90:	4606      	mov	r6, r0
  404b92:	d025      	beq.n	404be0 <__fputwc+0x74>
  404b94:	b3a8      	cbz	r0, 404c02 <__fputwc+0x96>
  404b96:	f89d e004 	ldrb.w	lr, [sp, #4]
  404b9a:	2500      	movs	r5, #0
  404b9c:	f10d 0a04 	add.w	sl, sp, #4
  404ba0:	e009      	b.n	404bb6 <__fputwc+0x4a>
  404ba2:	6823      	ldr	r3, [r4, #0]
  404ba4:	1c5a      	adds	r2, r3, #1
  404ba6:	6022      	str	r2, [r4, #0]
  404ba8:	f883 e000 	strb.w	lr, [r3]
  404bac:	3501      	adds	r5, #1
  404bae:	42b5      	cmp	r5, r6
  404bb0:	d227      	bcs.n	404c02 <__fputwc+0x96>
  404bb2:	f815 e00a 	ldrb.w	lr, [r5, sl]
  404bb6:	68a3      	ldr	r3, [r4, #8]
  404bb8:	3b01      	subs	r3, #1
  404bba:	2b00      	cmp	r3, #0
  404bbc:	60a3      	str	r3, [r4, #8]
  404bbe:	daf0      	bge.n	404ba2 <__fputwc+0x36>
  404bc0:	69a7      	ldr	r7, [r4, #24]
  404bc2:	42bb      	cmp	r3, r7
  404bc4:	4671      	mov	r1, lr
  404bc6:	4622      	mov	r2, r4
  404bc8:	4640      	mov	r0, r8
  404bca:	db02      	blt.n	404bd2 <__fputwc+0x66>
  404bcc:	f1be 0f0a 	cmp.w	lr, #10
  404bd0:	d1e7      	bne.n	404ba2 <__fputwc+0x36>
  404bd2:	f000 fe6b 	bl	4058ac <__swbuf_r>
  404bd6:	1c43      	adds	r3, r0, #1
  404bd8:	d1e8      	bne.n	404bac <__fputwc+0x40>
  404bda:	b002      	add	sp, #8
  404bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404be0:	89a3      	ldrh	r3, [r4, #12]
  404be2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404be6:	81a3      	strh	r3, [r4, #12]
  404be8:	b002      	add	sp, #8
  404bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404bee:	f109 33ff 	add.w	r3, r9, #4294967295
  404bf2:	2bfe      	cmp	r3, #254	; 0xfe
  404bf4:	d8c4      	bhi.n	404b80 <__fputwc+0x14>
  404bf6:	fa5f fe89 	uxtb.w	lr, r9
  404bfa:	4606      	mov	r6, r0
  404bfc:	f88d e004 	strb.w	lr, [sp, #4]
  404c00:	e7cb      	b.n	404b9a <__fputwc+0x2e>
  404c02:	4648      	mov	r0, r9
  404c04:	b002      	add	sp, #8
  404c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404c0a:	bf00      	nop

00404c0c <_fputwc_r>:
  404c0c:	b530      	push	{r4, r5, lr}
  404c0e:	6e53      	ldr	r3, [r2, #100]	; 0x64
  404c10:	f013 0f01 	tst.w	r3, #1
  404c14:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  404c18:	4614      	mov	r4, r2
  404c1a:	b083      	sub	sp, #12
  404c1c:	4605      	mov	r5, r0
  404c1e:	b29a      	uxth	r2, r3
  404c20:	d101      	bne.n	404c26 <_fputwc_r+0x1a>
  404c22:	0590      	lsls	r0, r2, #22
  404c24:	d51c      	bpl.n	404c60 <_fputwc_r+0x54>
  404c26:	0490      	lsls	r0, r2, #18
  404c28:	d406      	bmi.n	404c38 <_fputwc_r+0x2c>
  404c2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
  404c2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  404c30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  404c34:	81a3      	strh	r3, [r4, #12]
  404c36:	6662      	str	r2, [r4, #100]	; 0x64
  404c38:	4628      	mov	r0, r5
  404c3a:	4622      	mov	r2, r4
  404c3c:	f7ff ff96 	bl	404b6c <__fputwc>
  404c40:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404c42:	07da      	lsls	r2, r3, #31
  404c44:	4605      	mov	r5, r0
  404c46:	d402      	bmi.n	404c4e <_fputwc_r+0x42>
  404c48:	89a3      	ldrh	r3, [r4, #12]
  404c4a:	059b      	lsls	r3, r3, #22
  404c4c:	d502      	bpl.n	404c54 <_fputwc_r+0x48>
  404c4e:	4628      	mov	r0, r5
  404c50:	b003      	add	sp, #12
  404c52:	bd30      	pop	{r4, r5, pc}
  404c54:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404c56:	f000 faf9 	bl	40524c <__retarget_lock_release_recursive>
  404c5a:	4628      	mov	r0, r5
  404c5c:	b003      	add	sp, #12
  404c5e:	bd30      	pop	{r4, r5, pc}
  404c60:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404c62:	9101      	str	r1, [sp, #4]
  404c64:	f000 faf0 	bl	405248 <__retarget_lock_acquire_recursive>
  404c68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404c6c:	9901      	ldr	r1, [sp, #4]
  404c6e:	b29a      	uxth	r2, r3
  404c70:	e7d9      	b.n	404c26 <_fputwc_r+0x1a>
  404c72:	bf00      	nop

00404c74 <_malloc_trim_r>:
  404c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404c76:	4f24      	ldr	r7, [pc, #144]	; (404d08 <_malloc_trim_r+0x94>)
  404c78:	460c      	mov	r4, r1
  404c7a:	4606      	mov	r6, r0
  404c7c:	f7fe fd8a 	bl	403794 <__malloc_lock>
  404c80:	68bb      	ldr	r3, [r7, #8]
  404c82:	685d      	ldr	r5, [r3, #4]
  404c84:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  404c88:	310f      	adds	r1, #15
  404c8a:	f025 0503 	bic.w	r5, r5, #3
  404c8e:	4429      	add	r1, r5
  404c90:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  404c94:	f021 010f 	bic.w	r1, r1, #15
  404c98:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  404c9c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  404ca0:	db07      	blt.n	404cb2 <_malloc_trim_r+0x3e>
  404ca2:	2100      	movs	r1, #0
  404ca4:	4630      	mov	r0, r6
  404ca6:	f7fe fd81 	bl	4037ac <_sbrk_r>
  404caa:	68bb      	ldr	r3, [r7, #8]
  404cac:	442b      	add	r3, r5
  404cae:	4298      	cmp	r0, r3
  404cb0:	d004      	beq.n	404cbc <_malloc_trim_r+0x48>
  404cb2:	4630      	mov	r0, r6
  404cb4:	f7fe fd74 	bl	4037a0 <__malloc_unlock>
  404cb8:	2000      	movs	r0, #0
  404cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404cbc:	4261      	negs	r1, r4
  404cbe:	4630      	mov	r0, r6
  404cc0:	f7fe fd74 	bl	4037ac <_sbrk_r>
  404cc4:	3001      	adds	r0, #1
  404cc6:	d00d      	beq.n	404ce4 <_malloc_trim_r+0x70>
  404cc8:	4b10      	ldr	r3, [pc, #64]	; (404d0c <_malloc_trim_r+0x98>)
  404cca:	68ba      	ldr	r2, [r7, #8]
  404ccc:	6819      	ldr	r1, [r3, #0]
  404cce:	1b2d      	subs	r5, r5, r4
  404cd0:	f045 0501 	orr.w	r5, r5, #1
  404cd4:	4630      	mov	r0, r6
  404cd6:	1b09      	subs	r1, r1, r4
  404cd8:	6055      	str	r5, [r2, #4]
  404cda:	6019      	str	r1, [r3, #0]
  404cdc:	f7fe fd60 	bl	4037a0 <__malloc_unlock>
  404ce0:	2001      	movs	r0, #1
  404ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404ce4:	2100      	movs	r1, #0
  404ce6:	4630      	mov	r0, r6
  404ce8:	f7fe fd60 	bl	4037ac <_sbrk_r>
  404cec:	68ba      	ldr	r2, [r7, #8]
  404cee:	1a83      	subs	r3, r0, r2
  404cf0:	2b0f      	cmp	r3, #15
  404cf2:	ddde      	ble.n	404cb2 <_malloc_trim_r+0x3e>
  404cf4:	4c06      	ldr	r4, [pc, #24]	; (404d10 <_malloc_trim_r+0x9c>)
  404cf6:	4905      	ldr	r1, [pc, #20]	; (404d0c <_malloc_trim_r+0x98>)
  404cf8:	6824      	ldr	r4, [r4, #0]
  404cfa:	f043 0301 	orr.w	r3, r3, #1
  404cfe:	1b00      	subs	r0, r0, r4
  404d00:	6053      	str	r3, [r2, #4]
  404d02:	6008      	str	r0, [r1, #0]
  404d04:	e7d5      	b.n	404cb2 <_malloc_trim_r+0x3e>
  404d06:	bf00      	nop
  404d08:	20400438 	.word	0x20400438
  404d0c:	20400b90 	.word	0x20400b90
  404d10:	20400840 	.word	0x20400840

00404d14 <_free_r>:
  404d14:	2900      	cmp	r1, #0
  404d16:	d044      	beq.n	404da2 <_free_r+0x8e>
  404d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404d1c:	460d      	mov	r5, r1
  404d1e:	4680      	mov	r8, r0
  404d20:	f7fe fd38 	bl	403794 <__malloc_lock>
  404d24:	f855 7c04 	ldr.w	r7, [r5, #-4]
  404d28:	4969      	ldr	r1, [pc, #420]	; (404ed0 <_free_r+0x1bc>)
  404d2a:	f027 0301 	bic.w	r3, r7, #1
  404d2e:	f1a5 0408 	sub.w	r4, r5, #8
  404d32:	18e2      	adds	r2, r4, r3
  404d34:	688e      	ldr	r6, [r1, #8]
  404d36:	6850      	ldr	r0, [r2, #4]
  404d38:	42b2      	cmp	r2, r6
  404d3a:	f020 0003 	bic.w	r0, r0, #3
  404d3e:	d05e      	beq.n	404dfe <_free_r+0xea>
  404d40:	07fe      	lsls	r6, r7, #31
  404d42:	6050      	str	r0, [r2, #4]
  404d44:	d40b      	bmi.n	404d5e <_free_r+0x4a>
  404d46:	f855 7c08 	ldr.w	r7, [r5, #-8]
  404d4a:	1be4      	subs	r4, r4, r7
  404d4c:	f101 0e08 	add.w	lr, r1, #8
  404d50:	68a5      	ldr	r5, [r4, #8]
  404d52:	4575      	cmp	r5, lr
  404d54:	443b      	add	r3, r7
  404d56:	d06d      	beq.n	404e34 <_free_r+0x120>
  404d58:	68e7      	ldr	r7, [r4, #12]
  404d5a:	60ef      	str	r7, [r5, #12]
  404d5c:	60bd      	str	r5, [r7, #8]
  404d5e:	1815      	adds	r5, r2, r0
  404d60:	686d      	ldr	r5, [r5, #4]
  404d62:	07ed      	lsls	r5, r5, #31
  404d64:	d53e      	bpl.n	404de4 <_free_r+0xd0>
  404d66:	f043 0201 	orr.w	r2, r3, #1
  404d6a:	6062      	str	r2, [r4, #4]
  404d6c:	50e3      	str	r3, [r4, r3]
  404d6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  404d72:	d217      	bcs.n	404da4 <_free_r+0x90>
  404d74:	08db      	lsrs	r3, r3, #3
  404d76:	1c58      	adds	r0, r3, #1
  404d78:	109a      	asrs	r2, r3, #2
  404d7a:	684d      	ldr	r5, [r1, #4]
  404d7c:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  404d80:	60a7      	str	r7, [r4, #8]
  404d82:	2301      	movs	r3, #1
  404d84:	4093      	lsls	r3, r2
  404d86:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  404d8a:	432b      	orrs	r3, r5
  404d8c:	3a08      	subs	r2, #8
  404d8e:	60e2      	str	r2, [r4, #12]
  404d90:	604b      	str	r3, [r1, #4]
  404d92:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  404d96:	60fc      	str	r4, [r7, #12]
  404d98:	4640      	mov	r0, r8
  404d9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404d9e:	f7fe bcff 	b.w	4037a0 <__malloc_unlock>
  404da2:	4770      	bx	lr
  404da4:	0a5a      	lsrs	r2, r3, #9
  404da6:	2a04      	cmp	r2, #4
  404da8:	d852      	bhi.n	404e50 <_free_r+0x13c>
  404daa:	099a      	lsrs	r2, r3, #6
  404dac:	f102 0739 	add.w	r7, r2, #57	; 0x39
  404db0:	00ff      	lsls	r7, r7, #3
  404db2:	f102 0538 	add.w	r5, r2, #56	; 0x38
  404db6:	19c8      	adds	r0, r1, r7
  404db8:	59ca      	ldr	r2, [r1, r7]
  404dba:	3808      	subs	r0, #8
  404dbc:	4290      	cmp	r0, r2
  404dbe:	d04f      	beq.n	404e60 <_free_r+0x14c>
  404dc0:	6851      	ldr	r1, [r2, #4]
  404dc2:	f021 0103 	bic.w	r1, r1, #3
  404dc6:	428b      	cmp	r3, r1
  404dc8:	d232      	bcs.n	404e30 <_free_r+0x11c>
  404dca:	6892      	ldr	r2, [r2, #8]
  404dcc:	4290      	cmp	r0, r2
  404dce:	d1f7      	bne.n	404dc0 <_free_r+0xac>
  404dd0:	68c3      	ldr	r3, [r0, #12]
  404dd2:	60a0      	str	r0, [r4, #8]
  404dd4:	60e3      	str	r3, [r4, #12]
  404dd6:	609c      	str	r4, [r3, #8]
  404dd8:	60c4      	str	r4, [r0, #12]
  404dda:	4640      	mov	r0, r8
  404ddc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404de0:	f7fe bcde 	b.w	4037a0 <__malloc_unlock>
  404de4:	6895      	ldr	r5, [r2, #8]
  404de6:	4f3b      	ldr	r7, [pc, #236]	; (404ed4 <_free_r+0x1c0>)
  404de8:	42bd      	cmp	r5, r7
  404dea:	4403      	add	r3, r0
  404dec:	d040      	beq.n	404e70 <_free_r+0x15c>
  404dee:	68d0      	ldr	r0, [r2, #12]
  404df0:	60e8      	str	r0, [r5, #12]
  404df2:	f043 0201 	orr.w	r2, r3, #1
  404df6:	6085      	str	r5, [r0, #8]
  404df8:	6062      	str	r2, [r4, #4]
  404dfa:	50e3      	str	r3, [r4, r3]
  404dfc:	e7b7      	b.n	404d6e <_free_r+0x5a>
  404dfe:	07ff      	lsls	r7, r7, #31
  404e00:	4403      	add	r3, r0
  404e02:	d407      	bmi.n	404e14 <_free_r+0x100>
  404e04:	f855 2c08 	ldr.w	r2, [r5, #-8]
  404e08:	1aa4      	subs	r4, r4, r2
  404e0a:	4413      	add	r3, r2
  404e0c:	68a0      	ldr	r0, [r4, #8]
  404e0e:	68e2      	ldr	r2, [r4, #12]
  404e10:	60c2      	str	r2, [r0, #12]
  404e12:	6090      	str	r0, [r2, #8]
  404e14:	4a30      	ldr	r2, [pc, #192]	; (404ed8 <_free_r+0x1c4>)
  404e16:	6812      	ldr	r2, [r2, #0]
  404e18:	f043 0001 	orr.w	r0, r3, #1
  404e1c:	4293      	cmp	r3, r2
  404e1e:	6060      	str	r0, [r4, #4]
  404e20:	608c      	str	r4, [r1, #8]
  404e22:	d3b9      	bcc.n	404d98 <_free_r+0x84>
  404e24:	4b2d      	ldr	r3, [pc, #180]	; (404edc <_free_r+0x1c8>)
  404e26:	4640      	mov	r0, r8
  404e28:	6819      	ldr	r1, [r3, #0]
  404e2a:	f7ff ff23 	bl	404c74 <_malloc_trim_r>
  404e2e:	e7b3      	b.n	404d98 <_free_r+0x84>
  404e30:	4610      	mov	r0, r2
  404e32:	e7cd      	b.n	404dd0 <_free_r+0xbc>
  404e34:	1811      	adds	r1, r2, r0
  404e36:	6849      	ldr	r1, [r1, #4]
  404e38:	07c9      	lsls	r1, r1, #31
  404e3a:	d444      	bmi.n	404ec6 <_free_r+0x1b2>
  404e3c:	6891      	ldr	r1, [r2, #8]
  404e3e:	68d2      	ldr	r2, [r2, #12]
  404e40:	60ca      	str	r2, [r1, #12]
  404e42:	4403      	add	r3, r0
  404e44:	f043 0001 	orr.w	r0, r3, #1
  404e48:	6091      	str	r1, [r2, #8]
  404e4a:	6060      	str	r0, [r4, #4]
  404e4c:	50e3      	str	r3, [r4, r3]
  404e4e:	e7a3      	b.n	404d98 <_free_r+0x84>
  404e50:	2a14      	cmp	r2, #20
  404e52:	d816      	bhi.n	404e82 <_free_r+0x16e>
  404e54:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  404e58:	00ff      	lsls	r7, r7, #3
  404e5a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  404e5e:	e7aa      	b.n	404db6 <_free_r+0xa2>
  404e60:	10aa      	asrs	r2, r5, #2
  404e62:	2301      	movs	r3, #1
  404e64:	684d      	ldr	r5, [r1, #4]
  404e66:	4093      	lsls	r3, r2
  404e68:	432b      	orrs	r3, r5
  404e6a:	604b      	str	r3, [r1, #4]
  404e6c:	4603      	mov	r3, r0
  404e6e:	e7b0      	b.n	404dd2 <_free_r+0xbe>
  404e70:	f043 0201 	orr.w	r2, r3, #1
  404e74:	614c      	str	r4, [r1, #20]
  404e76:	610c      	str	r4, [r1, #16]
  404e78:	60e5      	str	r5, [r4, #12]
  404e7a:	60a5      	str	r5, [r4, #8]
  404e7c:	6062      	str	r2, [r4, #4]
  404e7e:	50e3      	str	r3, [r4, r3]
  404e80:	e78a      	b.n	404d98 <_free_r+0x84>
  404e82:	2a54      	cmp	r2, #84	; 0x54
  404e84:	d806      	bhi.n	404e94 <_free_r+0x180>
  404e86:	0b1a      	lsrs	r2, r3, #12
  404e88:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  404e8c:	00ff      	lsls	r7, r7, #3
  404e8e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  404e92:	e790      	b.n	404db6 <_free_r+0xa2>
  404e94:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  404e98:	d806      	bhi.n	404ea8 <_free_r+0x194>
  404e9a:	0bda      	lsrs	r2, r3, #15
  404e9c:	f102 0778 	add.w	r7, r2, #120	; 0x78
  404ea0:	00ff      	lsls	r7, r7, #3
  404ea2:	f102 0577 	add.w	r5, r2, #119	; 0x77
  404ea6:	e786      	b.n	404db6 <_free_r+0xa2>
  404ea8:	f240 5054 	movw	r0, #1364	; 0x554
  404eac:	4282      	cmp	r2, r0
  404eae:	d806      	bhi.n	404ebe <_free_r+0x1aa>
  404eb0:	0c9a      	lsrs	r2, r3, #18
  404eb2:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  404eb6:	00ff      	lsls	r7, r7, #3
  404eb8:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  404ebc:	e77b      	b.n	404db6 <_free_r+0xa2>
  404ebe:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  404ec2:	257e      	movs	r5, #126	; 0x7e
  404ec4:	e777      	b.n	404db6 <_free_r+0xa2>
  404ec6:	f043 0101 	orr.w	r1, r3, #1
  404eca:	6061      	str	r1, [r4, #4]
  404ecc:	6013      	str	r3, [r2, #0]
  404ece:	e763      	b.n	404d98 <_free_r+0x84>
  404ed0:	20400438 	.word	0x20400438
  404ed4:	20400440 	.word	0x20400440
  404ed8:	20400844 	.word	0x20400844
  404edc:	20400bc0 	.word	0x20400bc0

00404ee0 <__sfvwrite_r>:
  404ee0:	6893      	ldr	r3, [r2, #8]
  404ee2:	2b00      	cmp	r3, #0
  404ee4:	d073      	beq.n	404fce <__sfvwrite_r+0xee>
  404ee6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404eea:	898b      	ldrh	r3, [r1, #12]
  404eec:	b083      	sub	sp, #12
  404eee:	460c      	mov	r4, r1
  404ef0:	0719      	lsls	r1, r3, #28
  404ef2:	9000      	str	r0, [sp, #0]
  404ef4:	4616      	mov	r6, r2
  404ef6:	d526      	bpl.n	404f46 <__sfvwrite_r+0x66>
  404ef8:	6922      	ldr	r2, [r4, #16]
  404efa:	b322      	cbz	r2, 404f46 <__sfvwrite_r+0x66>
  404efc:	f013 0002 	ands.w	r0, r3, #2
  404f00:	6835      	ldr	r5, [r6, #0]
  404f02:	d02c      	beq.n	404f5e <__sfvwrite_r+0x7e>
  404f04:	f04f 0900 	mov.w	r9, #0
  404f08:	4fb0      	ldr	r7, [pc, #704]	; (4051cc <__sfvwrite_r+0x2ec>)
  404f0a:	46c8      	mov	r8, r9
  404f0c:	46b2      	mov	sl, r6
  404f0e:	45b8      	cmp	r8, r7
  404f10:	4643      	mov	r3, r8
  404f12:	464a      	mov	r2, r9
  404f14:	bf28      	it	cs
  404f16:	463b      	movcs	r3, r7
  404f18:	9800      	ldr	r0, [sp, #0]
  404f1a:	f1b8 0f00 	cmp.w	r8, #0
  404f1e:	d050      	beq.n	404fc2 <__sfvwrite_r+0xe2>
  404f20:	69e1      	ldr	r1, [r4, #28]
  404f22:	6a66      	ldr	r6, [r4, #36]	; 0x24
  404f24:	47b0      	blx	r6
  404f26:	2800      	cmp	r0, #0
  404f28:	dd58      	ble.n	404fdc <__sfvwrite_r+0xfc>
  404f2a:	f8da 3008 	ldr.w	r3, [sl, #8]
  404f2e:	1a1b      	subs	r3, r3, r0
  404f30:	4481      	add	r9, r0
  404f32:	eba8 0800 	sub.w	r8, r8, r0
  404f36:	f8ca 3008 	str.w	r3, [sl, #8]
  404f3a:	2b00      	cmp	r3, #0
  404f3c:	d1e7      	bne.n	404f0e <__sfvwrite_r+0x2e>
  404f3e:	2000      	movs	r0, #0
  404f40:	b003      	add	sp, #12
  404f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404f46:	4621      	mov	r1, r4
  404f48:	9800      	ldr	r0, [sp, #0]
  404f4a:	f7ff fc51 	bl	4047f0 <__swsetup_r>
  404f4e:	2800      	cmp	r0, #0
  404f50:	f040 8133 	bne.w	4051ba <__sfvwrite_r+0x2da>
  404f54:	89a3      	ldrh	r3, [r4, #12]
  404f56:	6835      	ldr	r5, [r6, #0]
  404f58:	f013 0002 	ands.w	r0, r3, #2
  404f5c:	d1d2      	bne.n	404f04 <__sfvwrite_r+0x24>
  404f5e:	f013 0901 	ands.w	r9, r3, #1
  404f62:	d145      	bne.n	404ff0 <__sfvwrite_r+0x110>
  404f64:	464f      	mov	r7, r9
  404f66:	9601      	str	r6, [sp, #4]
  404f68:	b337      	cbz	r7, 404fb8 <__sfvwrite_r+0xd8>
  404f6a:	059a      	lsls	r2, r3, #22
  404f6c:	f8d4 8008 	ldr.w	r8, [r4, #8]
  404f70:	f140 8083 	bpl.w	40507a <__sfvwrite_r+0x19a>
  404f74:	4547      	cmp	r7, r8
  404f76:	46c3      	mov	fp, r8
  404f78:	f0c0 80ab 	bcc.w	4050d2 <__sfvwrite_r+0x1f2>
  404f7c:	f413 6f90 	tst.w	r3, #1152	; 0x480
  404f80:	f040 80ac 	bne.w	4050dc <__sfvwrite_r+0x1fc>
  404f84:	6820      	ldr	r0, [r4, #0]
  404f86:	46ba      	mov	sl, r7
  404f88:	465a      	mov	r2, fp
  404f8a:	4649      	mov	r1, r9
  404f8c:	f000 fa40 	bl	405410 <memmove>
  404f90:	68a2      	ldr	r2, [r4, #8]
  404f92:	6823      	ldr	r3, [r4, #0]
  404f94:	eba2 0208 	sub.w	r2, r2, r8
  404f98:	445b      	add	r3, fp
  404f9a:	60a2      	str	r2, [r4, #8]
  404f9c:	6023      	str	r3, [r4, #0]
  404f9e:	9a01      	ldr	r2, [sp, #4]
  404fa0:	6893      	ldr	r3, [r2, #8]
  404fa2:	eba3 030a 	sub.w	r3, r3, sl
  404fa6:	44d1      	add	r9, sl
  404fa8:	eba7 070a 	sub.w	r7, r7, sl
  404fac:	6093      	str	r3, [r2, #8]
  404fae:	2b00      	cmp	r3, #0
  404fb0:	d0c5      	beq.n	404f3e <__sfvwrite_r+0x5e>
  404fb2:	89a3      	ldrh	r3, [r4, #12]
  404fb4:	2f00      	cmp	r7, #0
  404fb6:	d1d8      	bne.n	404f6a <__sfvwrite_r+0x8a>
  404fb8:	f8d5 9000 	ldr.w	r9, [r5]
  404fbc:	686f      	ldr	r7, [r5, #4]
  404fbe:	3508      	adds	r5, #8
  404fc0:	e7d2      	b.n	404f68 <__sfvwrite_r+0x88>
  404fc2:	f8d5 9000 	ldr.w	r9, [r5]
  404fc6:	f8d5 8004 	ldr.w	r8, [r5, #4]
  404fca:	3508      	adds	r5, #8
  404fcc:	e79f      	b.n	404f0e <__sfvwrite_r+0x2e>
  404fce:	2000      	movs	r0, #0
  404fd0:	4770      	bx	lr
  404fd2:	4621      	mov	r1, r4
  404fd4:	9800      	ldr	r0, [sp, #0]
  404fd6:	f7ff fd1f 	bl	404a18 <_fflush_r>
  404fda:	b370      	cbz	r0, 40503a <__sfvwrite_r+0x15a>
  404fdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404fe0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404fe4:	f04f 30ff 	mov.w	r0, #4294967295
  404fe8:	81a3      	strh	r3, [r4, #12]
  404fea:	b003      	add	sp, #12
  404fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404ff0:	4681      	mov	r9, r0
  404ff2:	4633      	mov	r3, r6
  404ff4:	464e      	mov	r6, r9
  404ff6:	46a8      	mov	r8, r5
  404ff8:	469a      	mov	sl, r3
  404ffa:	464d      	mov	r5, r9
  404ffc:	b34e      	cbz	r6, 405052 <__sfvwrite_r+0x172>
  404ffe:	b380      	cbz	r0, 405062 <__sfvwrite_r+0x182>
  405000:	6820      	ldr	r0, [r4, #0]
  405002:	6923      	ldr	r3, [r4, #16]
  405004:	6962      	ldr	r2, [r4, #20]
  405006:	45b1      	cmp	r9, r6
  405008:	46cb      	mov	fp, r9
  40500a:	bf28      	it	cs
  40500c:	46b3      	movcs	fp, r6
  40500e:	4298      	cmp	r0, r3
  405010:	465f      	mov	r7, fp
  405012:	d904      	bls.n	40501e <__sfvwrite_r+0x13e>
  405014:	68a3      	ldr	r3, [r4, #8]
  405016:	4413      	add	r3, r2
  405018:	459b      	cmp	fp, r3
  40501a:	f300 80a6 	bgt.w	40516a <__sfvwrite_r+0x28a>
  40501e:	4593      	cmp	fp, r2
  405020:	db4b      	blt.n	4050ba <__sfvwrite_r+0x1da>
  405022:	4613      	mov	r3, r2
  405024:	6a67      	ldr	r7, [r4, #36]	; 0x24
  405026:	69e1      	ldr	r1, [r4, #28]
  405028:	9800      	ldr	r0, [sp, #0]
  40502a:	462a      	mov	r2, r5
  40502c:	47b8      	blx	r7
  40502e:	1e07      	subs	r7, r0, #0
  405030:	ddd4      	ble.n	404fdc <__sfvwrite_r+0xfc>
  405032:	ebb9 0907 	subs.w	r9, r9, r7
  405036:	d0cc      	beq.n	404fd2 <__sfvwrite_r+0xf2>
  405038:	2001      	movs	r0, #1
  40503a:	f8da 3008 	ldr.w	r3, [sl, #8]
  40503e:	1bdb      	subs	r3, r3, r7
  405040:	443d      	add	r5, r7
  405042:	1bf6      	subs	r6, r6, r7
  405044:	f8ca 3008 	str.w	r3, [sl, #8]
  405048:	2b00      	cmp	r3, #0
  40504a:	f43f af78 	beq.w	404f3e <__sfvwrite_r+0x5e>
  40504e:	2e00      	cmp	r6, #0
  405050:	d1d5      	bne.n	404ffe <__sfvwrite_r+0x11e>
  405052:	f108 0308 	add.w	r3, r8, #8
  405056:	e913 0060 	ldmdb	r3, {r5, r6}
  40505a:	4698      	mov	r8, r3
  40505c:	3308      	adds	r3, #8
  40505e:	2e00      	cmp	r6, #0
  405060:	d0f9      	beq.n	405056 <__sfvwrite_r+0x176>
  405062:	4632      	mov	r2, r6
  405064:	210a      	movs	r1, #10
  405066:	4628      	mov	r0, r5
  405068:	f000 f982 	bl	405370 <memchr>
  40506c:	2800      	cmp	r0, #0
  40506e:	f000 80a1 	beq.w	4051b4 <__sfvwrite_r+0x2d4>
  405072:	3001      	adds	r0, #1
  405074:	eba0 0905 	sub.w	r9, r0, r5
  405078:	e7c2      	b.n	405000 <__sfvwrite_r+0x120>
  40507a:	6820      	ldr	r0, [r4, #0]
  40507c:	6923      	ldr	r3, [r4, #16]
  40507e:	4298      	cmp	r0, r3
  405080:	d802      	bhi.n	405088 <__sfvwrite_r+0x1a8>
  405082:	6963      	ldr	r3, [r4, #20]
  405084:	429f      	cmp	r7, r3
  405086:	d25d      	bcs.n	405144 <__sfvwrite_r+0x264>
  405088:	45b8      	cmp	r8, r7
  40508a:	bf28      	it	cs
  40508c:	46b8      	movcs	r8, r7
  40508e:	4642      	mov	r2, r8
  405090:	4649      	mov	r1, r9
  405092:	f000 f9bd 	bl	405410 <memmove>
  405096:	68a3      	ldr	r3, [r4, #8]
  405098:	6822      	ldr	r2, [r4, #0]
  40509a:	eba3 0308 	sub.w	r3, r3, r8
  40509e:	4442      	add	r2, r8
  4050a0:	60a3      	str	r3, [r4, #8]
  4050a2:	6022      	str	r2, [r4, #0]
  4050a4:	b10b      	cbz	r3, 4050aa <__sfvwrite_r+0x1ca>
  4050a6:	46c2      	mov	sl, r8
  4050a8:	e779      	b.n	404f9e <__sfvwrite_r+0xbe>
  4050aa:	4621      	mov	r1, r4
  4050ac:	9800      	ldr	r0, [sp, #0]
  4050ae:	f7ff fcb3 	bl	404a18 <_fflush_r>
  4050b2:	2800      	cmp	r0, #0
  4050b4:	d192      	bne.n	404fdc <__sfvwrite_r+0xfc>
  4050b6:	46c2      	mov	sl, r8
  4050b8:	e771      	b.n	404f9e <__sfvwrite_r+0xbe>
  4050ba:	465a      	mov	r2, fp
  4050bc:	4629      	mov	r1, r5
  4050be:	f000 f9a7 	bl	405410 <memmove>
  4050c2:	68a2      	ldr	r2, [r4, #8]
  4050c4:	6823      	ldr	r3, [r4, #0]
  4050c6:	eba2 020b 	sub.w	r2, r2, fp
  4050ca:	445b      	add	r3, fp
  4050cc:	60a2      	str	r2, [r4, #8]
  4050ce:	6023      	str	r3, [r4, #0]
  4050d0:	e7af      	b.n	405032 <__sfvwrite_r+0x152>
  4050d2:	6820      	ldr	r0, [r4, #0]
  4050d4:	46b8      	mov	r8, r7
  4050d6:	46ba      	mov	sl, r7
  4050d8:	46bb      	mov	fp, r7
  4050da:	e755      	b.n	404f88 <__sfvwrite_r+0xa8>
  4050dc:	6962      	ldr	r2, [r4, #20]
  4050de:	6820      	ldr	r0, [r4, #0]
  4050e0:	6921      	ldr	r1, [r4, #16]
  4050e2:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  4050e6:	eba0 0a01 	sub.w	sl, r0, r1
  4050ea:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  4050ee:	f10a 0001 	add.w	r0, sl, #1
  4050f2:	ea4f 0868 	mov.w	r8, r8, asr #1
  4050f6:	4438      	add	r0, r7
  4050f8:	4540      	cmp	r0, r8
  4050fa:	4642      	mov	r2, r8
  4050fc:	bf84      	itt	hi
  4050fe:	4680      	movhi	r8, r0
  405100:	4642      	movhi	r2, r8
  405102:	055b      	lsls	r3, r3, #21
  405104:	d544      	bpl.n	405190 <__sfvwrite_r+0x2b0>
  405106:	4611      	mov	r1, r2
  405108:	9800      	ldr	r0, [sp, #0]
  40510a:	f7fd ffab 	bl	403064 <_malloc_r>
  40510e:	4683      	mov	fp, r0
  405110:	2800      	cmp	r0, #0
  405112:	d055      	beq.n	4051c0 <__sfvwrite_r+0x2e0>
  405114:	4652      	mov	r2, sl
  405116:	6921      	ldr	r1, [r4, #16]
  405118:	f7fe fa54 	bl	4035c4 <memcpy>
  40511c:	89a3      	ldrh	r3, [r4, #12]
  40511e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  405122:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405126:	81a3      	strh	r3, [r4, #12]
  405128:	eb0b 000a 	add.w	r0, fp, sl
  40512c:	eba8 030a 	sub.w	r3, r8, sl
  405130:	f8c4 b010 	str.w	fp, [r4, #16]
  405134:	f8c4 8014 	str.w	r8, [r4, #20]
  405138:	6020      	str	r0, [r4, #0]
  40513a:	60a3      	str	r3, [r4, #8]
  40513c:	46b8      	mov	r8, r7
  40513e:	46ba      	mov	sl, r7
  405140:	46bb      	mov	fp, r7
  405142:	e721      	b.n	404f88 <__sfvwrite_r+0xa8>
  405144:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  405148:	42b9      	cmp	r1, r7
  40514a:	bf28      	it	cs
  40514c:	4639      	movcs	r1, r7
  40514e:	464a      	mov	r2, r9
  405150:	fb91 f1f3 	sdiv	r1, r1, r3
  405154:	9800      	ldr	r0, [sp, #0]
  405156:	6a66      	ldr	r6, [r4, #36]	; 0x24
  405158:	fb03 f301 	mul.w	r3, r3, r1
  40515c:	69e1      	ldr	r1, [r4, #28]
  40515e:	47b0      	blx	r6
  405160:	f1b0 0a00 	subs.w	sl, r0, #0
  405164:	f73f af1b 	bgt.w	404f9e <__sfvwrite_r+0xbe>
  405168:	e738      	b.n	404fdc <__sfvwrite_r+0xfc>
  40516a:	461a      	mov	r2, r3
  40516c:	4629      	mov	r1, r5
  40516e:	9301      	str	r3, [sp, #4]
  405170:	f000 f94e 	bl	405410 <memmove>
  405174:	6822      	ldr	r2, [r4, #0]
  405176:	9b01      	ldr	r3, [sp, #4]
  405178:	9800      	ldr	r0, [sp, #0]
  40517a:	441a      	add	r2, r3
  40517c:	6022      	str	r2, [r4, #0]
  40517e:	4621      	mov	r1, r4
  405180:	f7ff fc4a 	bl	404a18 <_fflush_r>
  405184:	9b01      	ldr	r3, [sp, #4]
  405186:	2800      	cmp	r0, #0
  405188:	f47f af28 	bne.w	404fdc <__sfvwrite_r+0xfc>
  40518c:	461f      	mov	r7, r3
  40518e:	e750      	b.n	405032 <__sfvwrite_r+0x152>
  405190:	9800      	ldr	r0, [sp, #0]
  405192:	f000 f9a1 	bl	4054d8 <_realloc_r>
  405196:	4683      	mov	fp, r0
  405198:	2800      	cmp	r0, #0
  40519a:	d1c5      	bne.n	405128 <__sfvwrite_r+0x248>
  40519c:	9d00      	ldr	r5, [sp, #0]
  40519e:	6921      	ldr	r1, [r4, #16]
  4051a0:	4628      	mov	r0, r5
  4051a2:	f7ff fdb7 	bl	404d14 <_free_r>
  4051a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4051aa:	220c      	movs	r2, #12
  4051ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4051b0:	602a      	str	r2, [r5, #0]
  4051b2:	e715      	b.n	404fe0 <__sfvwrite_r+0x100>
  4051b4:	f106 0901 	add.w	r9, r6, #1
  4051b8:	e722      	b.n	405000 <__sfvwrite_r+0x120>
  4051ba:	f04f 30ff 	mov.w	r0, #4294967295
  4051be:	e6bf      	b.n	404f40 <__sfvwrite_r+0x60>
  4051c0:	9a00      	ldr	r2, [sp, #0]
  4051c2:	230c      	movs	r3, #12
  4051c4:	6013      	str	r3, [r2, #0]
  4051c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4051ca:	e709      	b.n	404fe0 <__sfvwrite_r+0x100>
  4051cc:	7ffffc00 	.word	0x7ffffc00

004051d0 <_fwalk_reent>:
  4051d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4051d4:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  4051d8:	d01f      	beq.n	40521a <_fwalk_reent+0x4a>
  4051da:	4688      	mov	r8, r1
  4051dc:	4606      	mov	r6, r0
  4051de:	f04f 0900 	mov.w	r9, #0
  4051e2:	687d      	ldr	r5, [r7, #4]
  4051e4:	68bc      	ldr	r4, [r7, #8]
  4051e6:	3d01      	subs	r5, #1
  4051e8:	d411      	bmi.n	40520e <_fwalk_reent+0x3e>
  4051ea:	89a3      	ldrh	r3, [r4, #12]
  4051ec:	2b01      	cmp	r3, #1
  4051ee:	f105 35ff 	add.w	r5, r5, #4294967295
  4051f2:	d908      	bls.n	405206 <_fwalk_reent+0x36>
  4051f4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  4051f8:	3301      	adds	r3, #1
  4051fa:	4621      	mov	r1, r4
  4051fc:	4630      	mov	r0, r6
  4051fe:	d002      	beq.n	405206 <_fwalk_reent+0x36>
  405200:	47c0      	blx	r8
  405202:	ea49 0900 	orr.w	r9, r9, r0
  405206:	1c6b      	adds	r3, r5, #1
  405208:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40520c:	d1ed      	bne.n	4051ea <_fwalk_reent+0x1a>
  40520e:	683f      	ldr	r7, [r7, #0]
  405210:	2f00      	cmp	r7, #0
  405212:	d1e6      	bne.n	4051e2 <_fwalk_reent+0x12>
  405214:	4648      	mov	r0, r9
  405216:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40521a:	46b9      	mov	r9, r7
  40521c:	4648      	mov	r0, r9
  40521e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405222:	bf00      	nop

00405224 <__locale_mb_cur_max>:
  405224:	4b04      	ldr	r3, [pc, #16]	; (405238 <__locale_mb_cur_max+0x14>)
  405226:	4a05      	ldr	r2, [pc, #20]	; (40523c <__locale_mb_cur_max+0x18>)
  405228:	681b      	ldr	r3, [r3, #0]
  40522a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  40522c:	2b00      	cmp	r3, #0
  40522e:	bf08      	it	eq
  405230:	4613      	moveq	r3, r2
  405232:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  405236:	4770      	bx	lr
  405238:	2040000c 	.word	0x2040000c
  40523c:	2040084c 	.word	0x2040084c

00405240 <__retarget_lock_init_recursive>:
  405240:	4770      	bx	lr
  405242:	bf00      	nop

00405244 <__retarget_lock_close_recursive>:
  405244:	4770      	bx	lr
  405246:	bf00      	nop

00405248 <__retarget_lock_acquire_recursive>:
  405248:	4770      	bx	lr
  40524a:	bf00      	nop

0040524c <__retarget_lock_release_recursive>:
  40524c:	4770      	bx	lr
  40524e:	bf00      	nop

00405250 <__swhatbuf_r>:
  405250:	b570      	push	{r4, r5, r6, lr}
  405252:	460c      	mov	r4, r1
  405254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405258:	2900      	cmp	r1, #0
  40525a:	b090      	sub	sp, #64	; 0x40
  40525c:	4615      	mov	r5, r2
  40525e:	461e      	mov	r6, r3
  405260:	db14      	blt.n	40528c <__swhatbuf_r+0x3c>
  405262:	aa01      	add	r2, sp, #4
  405264:	f000 fc9e 	bl	405ba4 <_fstat_r>
  405268:	2800      	cmp	r0, #0
  40526a:	db0f      	blt.n	40528c <__swhatbuf_r+0x3c>
  40526c:	9a02      	ldr	r2, [sp, #8]
  40526e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  405272:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  405276:	fab2 f282 	clz	r2, r2
  40527a:	0952      	lsrs	r2, r2, #5
  40527c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  405280:	f44f 6000 	mov.w	r0, #2048	; 0x800
  405284:	6032      	str	r2, [r6, #0]
  405286:	602b      	str	r3, [r5, #0]
  405288:	b010      	add	sp, #64	; 0x40
  40528a:	bd70      	pop	{r4, r5, r6, pc}
  40528c:	89a2      	ldrh	r2, [r4, #12]
  40528e:	2300      	movs	r3, #0
  405290:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  405294:	6033      	str	r3, [r6, #0]
  405296:	d004      	beq.n	4052a2 <__swhatbuf_r+0x52>
  405298:	2240      	movs	r2, #64	; 0x40
  40529a:	4618      	mov	r0, r3
  40529c:	602a      	str	r2, [r5, #0]
  40529e:	b010      	add	sp, #64	; 0x40
  4052a0:	bd70      	pop	{r4, r5, r6, pc}
  4052a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4052a6:	602b      	str	r3, [r5, #0]
  4052a8:	b010      	add	sp, #64	; 0x40
  4052aa:	bd70      	pop	{r4, r5, r6, pc}

004052ac <__smakebuf_r>:
  4052ac:	898a      	ldrh	r2, [r1, #12]
  4052ae:	0792      	lsls	r2, r2, #30
  4052b0:	460b      	mov	r3, r1
  4052b2:	d506      	bpl.n	4052c2 <__smakebuf_r+0x16>
  4052b4:	f101 0243 	add.w	r2, r1, #67	; 0x43
  4052b8:	2101      	movs	r1, #1
  4052ba:	601a      	str	r2, [r3, #0]
  4052bc:	611a      	str	r2, [r3, #16]
  4052be:	6159      	str	r1, [r3, #20]
  4052c0:	4770      	bx	lr
  4052c2:	b5f0      	push	{r4, r5, r6, r7, lr}
  4052c4:	b083      	sub	sp, #12
  4052c6:	ab01      	add	r3, sp, #4
  4052c8:	466a      	mov	r2, sp
  4052ca:	460c      	mov	r4, r1
  4052cc:	4606      	mov	r6, r0
  4052ce:	f7ff ffbf 	bl	405250 <__swhatbuf_r>
  4052d2:	9900      	ldr	r1, [sp, #0]
  4052d4:	4605      	mov	r5, r0
  4052d6:	4630      	mov	r0, r6
  4052d8:	f7fd fec4 	bl	403064 <_malloc_r>
  4052dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4052e0:	b1d8      	cbz	r0, 40531a <__smakebuf_r+0x6e>
  4052e2:	9a01      	ldr	r2, [sp, #4]
  4052e4:	4f15      	ldr	r7, [pc, #84]	; (40533c <__smakebuf_r+0x90>)
  4052e6:	9900      	ldr	r1, [sp, #0]
  4052e8:	63f7      	str	r7, [r6, #60]	; 0x3c
  4052ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4052ee:	81a3      	strh	r3, [r4, #12]
  4052f0:	6020      	str	r0, [r4, #0]
  4052f2:	6120      	str	r0, [r4, #16]
  4052f4:	6161      	str	r1, [r4, #20]
  4052f6:	b91a      	cbnz	r2, 405300 <__smakebuf_r+0x54>
  4052f8:	432b      	orrs	r3, r5
  4052fa:	81a3      	strh	r3, [r4, #12]
  4052fc:	b003      	add	sp, #12
  4052fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405300:	4630      	mov	r0, r6
  405302:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  405306:	f000 fc61 	bl	405bcc <_isatty_r>
  40530a:	b1a0      	cbz	r0, 405336 <__smakebuf_r+0x8a>
  40530c:	89a3      	ldrh	r3, [r4, #12]
  40530e:	f023 0303 	bic.w	r3, r3, #3
  405312:	f043 0301 	orr.w	r3, r3, #1
  405316:	b21b      	sxth	r3, r3
  405318:	e7ee      	b.n	4052f8 <__smakebuf_r+0x4c>
  40531a:	059a      	lsls	r2, r3, #22
  40531c:	d4ee      	bmi.n	4052fc <__smakebuf_r+0x50>
  40531e:	f023 0303 	bic.w	r3, r3, #3
  405322:	f104 0243 	add.w	r2, r4, #67	; 0x43
  405326:	f043 0302 	orr.w	r3, r3, #2
  40532a:	2101      	movs	r1, #1
  40532c:	81a3      	strh	r3, [r4, #12]
  40532e:	6022      	str	r2, [r4, #0]
  405330:	6122      	str	r2, [r4, #16]
  405332:	6161      	str	r1, [r4, #20]
  405334:	e7e2      	b.n	4052fc <__smakebuf_r+0x50>
  405336:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40533a:	e7dd      	b.n	4052f8 <__smakebuf_r+0x4c>
  40533c:	00404a6d 	.word	0x00404a6d

00405340 <__ascii_mbtowc>:
  405340:	b082      	sub	sp, #8
  405342:	b149      	cbz	r1, 405358 <__ascii_mbtowc+0x18>
  405344:	b15a      	cbz	r2, 40535e <__ascii_mbtowc+0x1e>
  405346:	b16b      	cbz	r3, 405364 <__ascii_mbtowc+0x24>
  405348:	7813      	ldrb	r3, [r2, #0]
  40534a:	600b      	str	r3, [r1, #0]
  40534c:	7812      	ldrb	r2, [r2, #0]
  40534e:	1c10      	adds	r0, r2, #0
  405350:	bf18      	it	ne
  405352:	2001      	movne	r0, #1
  405354:	b002      	add	sp, #8
  405356:	4770      	bx	lr
  405358:	a901      	add	r1, sp, #4
  40535a:	2a00      	cmp	r2, #0
  40535c:	d1f3      	bne.n	405346 <__ascii_mbtowc+0x6>
  40535e:	4610      	mov	r0, r2
  405360:	b002      	add	sp, #8
  405362:	4770      	bx	lr
  405364:	f06f 0001 	mvn.w	r0, #1
  405368:	e7f4      	b.n	405354 <__ascii_mbtowc+0x14>
  40536a:	bf00      	nop
  40536c:	0000      	movs	r0, r0
	...

00405370 <memchr>:
  405370:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  405374:	2a10      	cmp	r2, #16
  405376:	db2b      	blt.n	4053d0 <memchr+0x60>
  405378:	f010 0f07 	tst.w	r0, #7
  40537c:	d008      	beq.n	405390 <memchr+0x20>
  40537e:	f810 3b01 	ldrb.w	r3, [r0], #1
  405382:	3a01      	subs	r2, #1
  405384:	428b      	cmp	r3, r1
  405386:	d02d      	beq.n	4053e4 <memchr+0x74>
  405388:	f010 0f07 	tst.w	r0, #7
  40538c:	b342      	cbz	r2, 4053e0 <memchr+0x70>
  40538e:	d1f6      	bne.n	40537e <memchr+0xe>
  405390:	b4f0      	push	{r4, r5, r6, r7}
  405392:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  405396:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40539a:	f022 0407 	bic.w	r4, r2, #7
  40539e:	f07f 0700 	mvns.w	r7, #0
  4053a2:	2300      	movs	r3, #0
  4053a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  4053a8:	3c08      	subs	r4, #8
  4053aa:	ea85 0501 	eor.w	r5, r5, r1
  4053ae:	ea86 0601 	eor.w	r6, r6, r1
  4053b2:	fa85 f547 	uadd8	r5, r5, r7
  4053b6:	faa3 f587 	sel	r5, r3, r7
  4053ba:	fa86 f647 	uadd8	r6, r6, r7
  4053be:	faa5 f687 	sel	r6, r5, r7
  4053c2:	b98e      	cbnz	r6, 4053e8 <memchr+0x78>
  4053c4:	d1ee      	bne.n	4053a4 <memchr+0x34>
  4053c6:	bcf0      	pop	{r4, r5, r6, r7}
  4053c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4053cc:	f002 0207 	and.w	r2, r2, #7
  4053d0:	b132      	cbz	r2, 4053e0 <memchr+0x70>
  4053d2:	f810 3b01 	ldrb.w	r3, [r0], #1
  4053d6:	3a01      	subs	r2, #1
  4053d8:	ea83 0301 	eor.w	r3, r3, r1
  4053dc:	b113      	cbz	r3, 4053e4 <memchr+0x74>
  4053de:	d1f8      	bne.n	4053d2 <memchr+0x62>
  4053e0:	2000      	movs	r0, #0
  4053e2:	4770      	bx	lr
  4053e4:	3801      	subs	r0, #1
  4053e6:	4770      	bx	lr
  4053e8:	2d00      	cmp	r5, #0
  4053ea:	bf06      	itte	eq
  4053ec:	4635      	moveq	r5, r6
  4053ee:	3803      	subeq	r0, #3
  4053f0:	3807      	subne	r0, #7
  4053f2:	f015 0f01 	tst.w	r5, #1
  4053f6:	d107      	bne.n	405408 <memchr+0x98>
  4053f8:	3001      	adds	r0, #1
  4053fa:	f415 7f80 	tst.w	r5, #256	; 0x100
  4053fe:	bf02      	ittt	eq
  405400:	3001      	addeq	r0, #1
  405402:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  405406:	3001      	addeq	r0, #1
  405408:	bcf0      	pop	{r4, r5, r6, r7}
  40540a:	3801      	subs	r0, #1
  40540c:	4770      	bx	lr
  40540e:	bf00      	nop

00405410 <memmove>:
  405410:	4288      	cmp	r0, r1
  405412:	b5f0      	push	{r4, r5, r6, r7, lr}
  405414:	d90d      	bls.n	405432 <memmove+0x22>
  405416:	188b      	adds	r3, r1, r2
  405418:	4298      	cmp	r0, r3
  40541a:	d20a      	bcs.n	405432 <memmove+0x22>
  40541c:	1884      	adds	r4, r0, r2
  40541e:	2a00      	cmp	r2, #0
  405420:	d051      	beq.n	4054c6 <memmove+0xb6>
  405422:	4622      	mov	r2, r4
  405424:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  405428:	f802 4d01 	strb.w	r4, [r2, #-1]!
  40542c:	4299      	cmp	r1, r3
  40542e:	d1f9      	bne.n	405424 <memmove+0x14>
  405430:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405432:	2a0f      	cmp	r2, #15
  405434:	d948      	bls.n	4054c8 <memmove+0xb8>
  405436:	ea41 0300 	orr.w	r3, r1, r0
  40543a:	079b      	lsls	r3, r3, #30
  40543c:	d146      	bne.n	4054cc <memmove+0xbc>
  40543e:	f100 0410 	add.w	r4, r0, #16
  405442:	f101 0310 	add.w	r3, r1, #16
  405446:	4615      	mov	r5, r2
  405448:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40544c:	f844 6c10 	str.w	r6, [r4, #-16]
  405450:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  405454:	f844 6c0c 	str.w	r6, [r4, #-12]
  405458:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40545c:	f844 6c08 	str.w	r6, [r4, #-8]
  405460:	3d10      	subs	r5, #16
  405462:	f853 6c04 	ldr.w	r6, [r3, #-4]
  405466:	f844 6c04 	str.w	r6, [r4, #-4]
  40546a:	2d0f      	cmp	r5, #15
  40546c:	f103 0310 	add.w	r3, r3, #16
  405470:	f104 0410 	add.w	r4, r4, #16
  405474:	d8e8      	bhi.n	405448 <memmove+0x38>
  405476:	f1a2 0310 	sub.w	r3, r2, #16
  40547a:	f023 030f 	bic.w	r3, r3, #15
  40547e:	f002 0e0f 	and.w	lr, r2, #15
  405482:	3310      	adds	r3, #16
  405484:	f1be 0f03 	cmp.w	lr, #3
  405488:	4419      	add	r1, r3
  40548a:	4403      	add	r3, r0
  40548c:	d921      	bls.n	4054d2 <memmove+0xc2>
  40548e:	1f1e      	subs	r6, r3, #4
  405490:	460d      	mov	r5, r1
  405492:	4674      	mov	r4, lr
  405494:	3c04      	subs	r4, #4
  405496:	f855 7b04 	ldr.w	r7, [r5], #4
  40549a:	f846 7f04 	str.w	r7, [r6, #4]!
  40549e:	2c03      	cmp	r4, #3
  4054a0:	d8f8      	bhi.n	405494 <memmove+0x84>
  4054a2:	f1ae 0404 	sub.w	r4, lr, #4
  4054a6:	f024 0403 	bic.w	r4, r4, #3
  4054aa:	3404      	adds	r4, #4
  4054ac:	4421      	add	r1, r4
  4054ae:	4423      	add	r3, r4
  4054b0:	f002 0203 	and.w	r2, r2, #3
  4054b4:	b162      	cbz	r2, 4054d0 <memmove+0xc0>
  4054b6:	3b01      	subs	r3, #1
  4054b8:	440a      	add	r2, r1
  4054ba:	f811 4b01 	ldrb.w	r4, [r1], #1
  4054be:	f803 4f01 	strb.w	r4, [r3, #1]!
  4054c2:	428a      	cmp	r2, r1
  4054c4:	d1f9      	bne.n	4054ba <memmove+0xaa>
  4054c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4054c8:	4603      	mov	r3, r0
  4054ca:	e7f3      	b.n	4054b4 <memmove+0xa4>
  4054cc:	4603      	mov	r3, r0
  4054ce:	e7f2      	b.n	4054b6 <memmove+0xa6>
  4054d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4054d2:	4672      	mov	r2, lr
  4054d4:	e7ee      	b.n	4054b4 <memmove+0xa4>
  4054d6:	bf00      	nop

004054d8 <_realloc_r>:
  4054d8:	2900      	cmp	r1, #0
  4054da:	f000 8095 	beq.w	405608 <_realloc_r+0x130>
  4054de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4054e2:	460d      	mov	r5, r1
  4054e4:	4616      	mov	r6, r2
  4054e6:	b083      	sub	sp, #12
  4054e8:	4680      	mov	r8, r0
  4054ea:	f106 070b 	add.w	r7, r6, #11
  4054ee:	f7fe f951 	bl	403794 <__malloc_lock>
  4054f2:	f855 ec04 	ldr.w	lr, [r5, #-4]
  4054f6:	2f16      	cmp	r7, #22
  4054f8:	f02e 0403 	bic.w	r4, lr, #3
  4054fc:	f1a5 0908 	sub.w	r9, r5, #8
  405500:	d83c      	bhi.n	40557c <_realloc_r+0xa4>
  405502:	2210      	movs	r2, #16
  405504:	4617      	mov	r7, r2
  405506:	42be      	cmp	r6, r7
  405508:	d83d      	bhi.n	405586 <_realloc_r+0xae>
  40550a:	4294      	cmp	r4, r2
  40550c:	da43      	bge.n	405596 <_realloc_r+0xbe>
  40550e:	4bc4      	ldr	r3, [pc, #784]	; (405820 <_realloc_r+0x348>)
  405510:	6899      	ldr	r1, [r3, #8]
  405512:	eb09 0004 	add.w	r0, r9, r4
  405516:	4288      	cmp	r0, r1
  405518:	f000 80b4 	beq.w	405684 <_realloc_r+0x1ac>
  40551c:	6843      	ldr	r3, [r0, #4]
  40551e:	f023 0101 	bic.w	r1, r3, #1
  405522:	4401      	add	r1, r0
  405524:	6849      	ldr	r1, [r1, #4]
  405526:	07c9      	lsls	r1, r1, #31
  405528:	d54c      	bpl.n	4055c4 <_realloc_r+0xec>
  40552a:	f01e 0f01 	tst.w	lr, #1
  40552e:	f000 809b 	beq.w	405668 <_realloc_r+0x190>
  405532:	4631      	mov	r1, r6
  405534:	4640      	mov	r0, r8
  405536:	f7fd fd95 	bl	403064 <_malloc_r>
  40553a:	4606      	mov	r6, r0
  40553c:	2800      	cmp	r0, #0
  40553e:	d03a      	beq.n	4055b6 <_realloc_r+0xde>
  405540:	f855 3c04 	ldr.w	r3, [r5, #-4]
  405544:	f023 0301 	bic.w	r3, r3, #1
  405548:	444b      	add	r3, r9
  40554a:	f1a0 0208 	sub.w	r2, r0, #8
  40554e:	429a      	cmp	r2, r3
  405550:	f000 8121 	beq.w	405796 <_realloc_r+0x2be>
  405554:	1f22      	subs	r2, r4, #4
  405556:	2a24      	cmp	r2, #36	; 0x24
  405558:	f200 8107 	bhi.w	40576a <_realloc_r+0x292>
  40555c:	2a13      	cmp	r2, #19
  40555e:	f200 80db 	bhi.w	405718 <_realloc_r+0x240>
  405562:	4603      	mov	r3, r0
  405564:	462a      	mov	r2, r5
  405566:	6811      	ldr	r1, [r2, #0]
  405568:	6019      	str	r1, [r3, #0]
  40556a:	6851      	ldr	r1, [r2, #4]
  40556c:	6059      	str	r1, [r3, #4]
  40556e:	6892      	ldr	r2, [r2, #8]
  405570:	609a      	str	r2, [r3, #8]
  405572:	4629      	mov	r1, r5
  405574:	4640      	mov	r0, r8
  405576:	f7ff fbcd 	bl	404d14 <_free_r>
  40557a:	e01c      	b.n	4055b6 <_realloc_r+0xde>
  40557c:	f027 0707 	bic.w	r7, r7, #7
  405580:	2f00      	cmp	r7, #0
  405582:	463a      	mov	r2, r7
  405584:	dabf      	bge.n	405506 <_realloc_r+0x2e>
  405586:	2600      	movs	r6, #0
  405588:	230c      	movs	r3, #12
  40558a:	4630      	mov	r0, r6
  40558c:	f8c8 3000 	str.w	r3, [r8]
  405590:	b003      	add	sp, #12
  405592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405596:	462e      	mov	r6, r5
  405598:	1be3      	subs	r3, r4, r7
  40559a:	2b0f      	cmp	r3, #15
  40559c:	d81e      	bhi.n	4055dc <_realloc_r+0x104>
  40559e:	f8d9 3004 	ldr.w	r3, [r9, #4]
  4055a2:	f003 0301 	and.w	r3, r3, #1
  4055a6:	4323      	orrs	r3, r4
  4055a8:	444c      	add	r4, r9
  4055aa:	f8c9 3004 	str.w	r3, [r9, #4]
  4055ae:	6863      	ldr	r3, [r4, #4]
  4055b0:	f043 0301 	orr.w	r3, r3, #1
  4055b4:	6063      	str	r3, [r4, #4]
  4055b6:	4640      	mov	r0, r8
  4055b8:	f7fe f8f2 	bl	4037a0 <__malloc_unlock>
  4055bc:	4630      	mov	r0, r6
  4055be:	b003      	add	sp, #12
  4055c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4055c4:	f023 0303 	bic.w	r3, r3, #3
  4055c8:	18e1      	adds	r1, r4, r3
  4055ca:	4291      	cmp	r1, r2
  4055cc:	db1f      	blt.n	40560e <_realloc_r+0x136>
  4055ce:	68c3      	ldr	r3, [r0, #12]
  4055d0:	6882      	ldr	r2, [r0, #8]
  4055d2:	462e      	mov	r6, r5
  4055d4:	60d3      	str	r3, [r2, #12]
  4055d6:	460c      	mov	r4, r1
  4055d8:	609a      	str	r2, [r3, #8]
  4055da:	e7dd      	b.n	405598 <_realloc_r+0xc0>
  4055dc:	f8d9 2004 	ldr.w	r2, [r9, #4]
  4055e0:	eb09 0107 	add.w	r1, r9, r7
  4055e4:	f002 0201 	and.w	r2, r2, #1
  4055e8:	444c      	add	r4, r9
  4055ea:	f043 0301 	orr.w	r3, r3, #1
  4055ee:	4317      	orrs	r7, r2
  4055f0:	f8c9 7004 	str.w	r7, [r9, #4]
  4055f4:	604b      	str	r3, [r1, #4]
  4055f6:	6863      	ldr	r3, [r4, #4]
  4055f8:	f043 0301 	orr.w	r3, r3, #1
  4055fc:	3108      	adds	r1, #8
  4055fe:	6063      	str	r3, [r4, #4]
  405600:	4640      	mov	r0, r8
  405602:	f7ff fb87 	bl	404d14 <_free_r>
  405606:	e7d6      	b.n	4055b6 <_realloc_r+0xde>
  405608:	4611      	mov	r1, r2
  40560a:	f7fd bd2b 	b.w	403064 <_malloc_r>
  40560e:	f01e 0f01 	tst.w	lr, #1
  405612:	d18e      	bne.n	405532 <_realloc_r+0x5a>
  405614:	f855 1c08 	ldr.w	r1, [r5, #-8]
  405618:	eba9 0a01 	sub.w	sl, r9, r1
  40561c:	f8da 1004 	ldr.w	r1, [sl, #4]
  405620:	f021 0103 	bic.w	r1, r1, #3
  405624:	440b      	add	r3, r1
  405626:	4423      	add	r3, r4
  405628:	4293      	cmp	r3, r2
  40562a:	db25      	blt.n	405678 <_realloc_r+0x1a0>
  40562c:	68c2      	ldr	r2, [r0, #12]
  40562e:	6881      	ldr	r1, [r0, #8]
  405630:	4656      	mov	r6, sl
  405632:	60ca      	str	r2, [r1, #12]
  405634:	6091      	str	r1, [r2, #8]
  405636:	f8da 100c 	ldr.w	r1, [sl, #12]
  40563a:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40563e:	1f22      	subs	r2, r4, #4
  405640:	2a24      	cmp	r2, #36	; 0x24
  405642:	60c1      	str	r1, [r0, #12]
  405644:	6088      	str	r0, [r1, #8]
  405646:	f200 8094 	bhi.w	405772 <_realloc_r+0x29a>
  40564a:	2a13      	cmp	r2, #19
  40564c:	d96f      	bls.n	40572e <_realloc_r+0x256>
  40564e:	6829      	ldr	r1, [r5, #0]
  405650:	f8ca 1008 	str.w	r1, [sl, #8]
  405654:	6869      	ldr	r1, [r5, #4]
  405656:	f8ca 100c 	str.w	r1, [sl, #12]
  40565a:	2a1b      	cmp	r2, #27
  40565c:	f200 80a2 	bhi.w	4057a4 <_realloc_r+0x2cc>
  405660:	3508      	adds	r5, #8
  405662:	f10a 0210 	add.w	r2, sl, #16
  405666:	e063      	b.n	405730 <_realloc_r+0x258>
  405668:	f855 3c08 	ldr.w	r3, [r5, #-8]
  40566c:	eba9 0a03 	sub.w	sl, r9, r3
  405670:	f8da 1004 	ldr.w	r1, [sl, #4]
  405674:	f021 0103 	bic.w	r1, r1, #3
  405678:	1863      	adds	r3, r4, r1
  40567a:	4293      	cmp	r3, r2
  40567c:	f6ff af59 	blt.w	405532 <_realloc_r+0x5a>
  405680:	4656      	mov	r6, sl
  405682:	e7d8      	b.n	405636 <_realloc_r+0x15e>
  405684:	6841      	ldr	r1, [r0, #4]
  405686:	f021 0b03 	bic.w	fp, r1, #3
  40568a:	44a3      	add	fp, r4
  40568c:	f107 0010 	add.w	r0, r7, #16
  405690:	4583      	cmp	fp, r0
  405692:	da56      	bge.n	405742 <_realloc_r+0x26a>
  405694:	f01e 0f01 	tst.w	lr, #1
  405698:	f47f af4b 	bne.w	405532 <_realloc_r+0x5a>
  40569c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4056a0:	eba9 0a01 	sub.w	sl, r9, r1
  4056a4:	f8da 1004 	ldr.w	r1, [sl, #4]
  4056a8:	f021 0103 	bic.w	r1, r1, #3
  4056ac:	448b      	add	fp, r1
  4056ae:	4558      	cmp	r0, fp
  4056b0:	dce2      	bgt.n	405678 <_realloc_r+0x1a0>
  4056b2:	4656      	mov	r6, sl
  4056b4:	f8da 100c 	ldr.w	r1, [sl, #12]
  4056b8:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4056bc:	1f22      	subs	r2, r4, #4
  4056be:	2a24      	cmp	r2, #36	; 0x24
  4056c0:	60c1      	str	r1, [r0, #12]
  4056c2:	6088      	str	r0, [r1, #8]
  4056c4:	f200 808f 	bhi.w	4057e6 <_realloc_r+0x30e>
  4056c8:	2a13      	cmp	r2, #19
  4056ca:	f240 808a 	bls.w	4057e2 <_realloc_r+0x30a>
  4056ce:	6829      	ldr	r1, [r5, #0]
  4056d0:	f8ca 1008 	str.w	r1, [sl, #8]
  4056d4:	6869      	ldr	r1, [r5, #4]
  4056d6:	f8ca 100c 	str.w	r1, [sl, #12]
  4056da:	2a1b      	cmp	r2, #27
  4056dc:	f200 808a 	bhi.w	4057f4 <_realloc_r+0x31c>
  4056e0:	3508      	adds	r5, #8
  4056e2:	f10a 0210 	add.w	r2, sl, #16
  4056e6:	6829      	ldr	r1, [r5, #0]
  4056e8:	6011      	str	r1, [r2, #0]
  4056ea:	6869      	ldr	r1, [r5, #4]
  4056ec:	6051      	str	r1, [r2, #4]
  4056ee:	68a9      	ldr	r1, [r5, #8]
  4056f0:	6091      	str	r1, [r2, #8]
  4056f2:	eb0a 0107 	add.w	r1, sl, r7
  4056f6:	ebab 0207 	sub.w	r2, fp, r7
  4056fa:	f042 0201 	orr.w	r2, r2, #1
  4056fe:	6099      	str	r1, [r3, #8]
  405700:	604a      	str	r2, [r1, #4]
  405702:	f8da 3004 	ldr.w	r3, [sl, #4]
  405706:	f003 0301 	and.w	r3, r3, #1
  40570a:	431f      	orrs	r7, r3
  40570c:	4640      	mov	r0, r8
  40570e:	f8ca 7004 	str.w	r7, [sl, #4]
  405712:	f7fe f845 	bl	4037a0 <__malloc_unlock>
  405716:	e751      	b.n	4055bc <_realloc_r+0xe4>
  405718:	682b      	ldr	r3, [r5, #0]
  40571a:	6003      	str	r3, [r0, #0]
  40571c:	686b      	ldr	r3, [r5, #4]
  40571e:	6043      	str	r3, [r0, #4]
  405720:	2a1b      	cmp	r2, #27
  405722:	d82d      	bhi.n	405780 <_realloc_r+0x2a8>
  405724:	f100 0308 	add.w	r3, r0, #8
  405728:	f105 0208 	add.w	r2, r5, #8
  40572c:	e71b      	b.n	405566 <_realloc_r+0x8e>
  40572e:	4632      	mov	r2, r6
  405730:	6829      	ldr	r1, [r5, #0]
  405732:	6011      	str	r1, [r2, #0]
  405734:	6869      	ldr	r1, [r5, #4]
  405736:	6051      	str	r1, [r2, #4]
  405738:	68a9      	ldr	r1, [r5, #8]
  40573a:	6091      	str	r1, [r2, #8]
  40573c:	461c      	mov	r4, r3
  40573e:	46d1      	mov	r9, sl
  405740:	e72a      	b.n	405598 <_realloc_r+0xc0>
  405742:	eb09 0107 	add.w	r1, r9, r7
  405746:	ebab 0b07 	sub.w	fp, fp, r7
  40574a:	f04b 0201 	orr.w	r2, fp, #1
  40574e:	6099      	str	r1, [r3, #8]
  405750:	604a      	str	r2, [r1, #4]
  405752:	f855 3c04 	ldr.w	r3, [r5, #-4]
  405756:	f003 0301 	and.w	r3, r3, #1
  40575a:	431f      	orrs	r7, r3
  40575c:	4640      	mov	r0, r8
  40575e:	f845 7c04 	str.w	r7, [r5, #-4]
  405762:	f7fe f81d 	bl	4037a0 <__malloc_unlock>
  405766:	462e      	mov	r6, r5
  405768:	e728      	b.n	4055bc <_realloc_r+0xe4>
  40576a:	4629      	mov	r1, r5
  40576c:	f7ff fe50 	bl	405410 <memmove>
  405770:	e6ff      	b.n	405572 <_realloc_r+0x9a>
  405772:	4629      	mov	r1, r5
  405774:	4630      	mov	r0, r6
  405776:	461c      	mov	r4, r3
  405778:	46d1      	mov	r9, sl
  40577a:	f7ff fe49 	bl	405410 <memmove>
  40577e:	e70b      	b.n	405598 <_realloc_r+0xc0>
  405780:	68ab      	ldr	r3, [r5, #8]
  405782:	6083      	str	r3, [r0, #8]
  405784:	68eb      	ldr	r3, [r5, #12]
  405786:	60c3      	str	r3, [r0, #12]
  405788:	2a24      	cmp	r2, #36	; 0x24
  40578a:	d017      	beq.n	4057bc <_realloc_r+0x2e4>
  40578c:	f100 0310 	add.w	r3, r0, #16
  405790:	f105 0210 	add.w	r2, r5, #16
  405794:	e6e7      	b.n	405566 <_realloc_r+0x8e>
  405796:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40579a:	f023 0303 	bic.w	r3, r3, #3
  40579e:	441c      	add	r4, r3
  4057a0:	462e      	mov	r6, r5
  4057a2:	e6f9      	b.n	405598 <_realloc_r+0xc0>
  4057a4:	68a9      	ldr	r1, [r5, #8]
  4057a6:	f8ca 1010 	str.w	r1, [sl, #16]
  4057aa:	68e9      	ldr	r1, [r5, #12]
  4057ac:	f8ca 1014 	str.w	r1, [sl, #20]
  4057b0:	2a24      	cmp	r2, #36	; 0x24
  4057b2:	d00c      	beq.n	4057ce <_realloc_r+0x2f6>
  4057b4:	3510      	adds	r5, #16
  4057b6:	f10a 0218 	add.w	r2, sl, #24
  4057ba:	e7b9      	b.n	405730 <_realloc_r+0x258>
  4057bc:	692b      	ldr	r3, [r5, #16]
  4057be:	6103      	str	r3, [r0, #16]
  4057c0:	696b      	ldr	r3, [r5, #20]
  4057c2:	6143      	str	r3, [r0, #20]
  4057c4:	f105 0218 	add.w	r2, r5, #24
  4057c8:	f100 0318 	add.w	r3, r0, #24
  4057cc:	e6cb      	b.n	405566 <_realloc_r+0x8e>
  4057ce:	692a      	ldr	r2, [r5, #16]
  4057d0:	f8ca 2018 	str.w	r2, [sl, #24]
  4057d4:	696a      	ldr	r2, [r5, #20]
  4057d6:	f8ca 201c 	str.w	r2, [sl, #28]
  4057da:	3518      	adds	r5, #24
  4057dc:	f10a 0220 	add.w	r2, sl, #32
  4057e0:	e7a6      	b.n	405730 <_realloc_r+0x258>
  4057e2:	4632      	mov	r2, r6
  4057e4:	e77f      	b.n	4056e6 <_realloc_r+0x20e>
  4057e6:	4629      	mov	r1, r5
  4057e8:	4630      	mov	r0, r6
  4057ea:	9301      	str	r3, [sp, #4]
  4057ec:	f7ff fe10 	bl	405410 <memmove>
  4057f0:	9b01      	ldr	r3, [sp, #4]
  4057f2:	e77e      	b.n	4056f2 <_realloc_r+0x21a>
  4057f4:	68a9      	ldr	r1, [r5, #8]
  4057f6:	f8ca 1010 	str.w	r1, [sl, #16]
  4057fa:	68e9      	ldr	r1, [r5, #12]
  4057fc:	f8ca 1014 	str.w	r1, [sl, #20]
  405800:	2a24      	cmp	r2, #36	; 0x24
  405802:	d003      	beq.n	40580c <_realloc_r+0x334>
  405804:	3510      	adds	r5, #16
  405806:	f10a 0218 	add.w	r2, sl, #24
  40580a:	e76c      	b.n	4056e6 <_realloc_r+0x20e>
  40580c:	692a      	ldr	r2, [r5, #16]
  40580e:	f8ca 2018 	str.w	r2, [sl, #24]
  405812:	696a      	ldr	r2, [r5, #20]
  405814:	f8ca 201c 	str.w	r2, [sl, #28]
  405818:	3518      	adds	r5, #24
  40581a:	f10a 0220 	add.w	r2, sl, #32
  40581e:	e762      	b.n	4056e6 <_realloc_r+0x20e>
  405820:	20400438 	.word	0x20400438

00405824 <__sread>:
  405824:	b510      	push	{r4, lr}
  405826:	460c      	mov	r4, r1
  405828:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40582c:	f000 f9f6 	bl	405c1c <_read_r>
  405830:	2800      	cmp	r0, #0
  405832:	db03      	blt.n	40583c <__sread+0x18>
  405834:	6d23      	ldr	r3, [r4, #80]	; 0x50
  405836:	4403      	add	r3, r0
  405838:	6523      	str	r3, [r4, #80]	; 0x50
  40583a:	bd10      	pop	{r4, pc}
  40583c:	89a3      	ldrh	r3, [r4, #12]
  40583e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  405842:	81a3      	strh	r3, [r4, #12]
  405844:	bd10      	pop	{r4, pc}
  405846:	bf00      	nop

00405848 <__swrite>:
  405848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40584c:	4616      	mov	r6, r2
  40584e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  405852:	461f      	mov	r7, r3
  405854:	05d3      	lsls	r3, r2, #23
  405856:	460c      	mov	r4, r1
  405858:	4605      	mov	r5, r0
  40585a:	d507      	bpl.n	40586c <__swrite+0x24>
  40585c:	2200      	movs	r2, #0
  40585e:	2302      	movs	r3, #2
  405860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405864:	f000 f9c4 	bl	405bf0 <_lseek_r>
  405868:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40586c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  405870:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  405874:	81a2      	strh	r2, [r4, #12]
  405876:	463b      	mov	r3, r7
  405878:	4632      	mov	r2, r6
  40587a:	4628      	mov	r0, r5
  40587c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405880:	f000 b8a4 	b.w	4059cc <_write_r>

00405884 <__sseek>:
  405884:	b510      	push	{r4, lr}
  405886:	460c      	mov	r4, r1
  405888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40588c:	f000 f9b0 	bl	405bf0 <_lseek_r>
  405890:	89a3      	ldrh	r3, [r4, #12]
  405892:	1c42      	adds	r2, r0, #1
  405894:	bf0e      	itee	eq
  405896:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40589a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40589e:	6520      	strne	r0, [r4, #80]	; 0x50
  4058a0:	81a3      	strh	r3, [r4, #12]
  4058a2:	bd10      	pop	{r4, pc}

004058a4 <__sclose>:
  4058a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4058a8:	f000 b908 	b.w	405abc <_close_r>

004058ac <__swbuf_r>:
  4058ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4058ae:	460d      	mov	r5, r1
  4058b0:	4614      	mov	r4, r2
  4058b2:	4606      	mov	r6, r0
  4058b4:	b110      	cbz	r0, 4058bc <__swbuf_r+0x10>
  4058b6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4058b8:	2b00      	cmp	r3, #0
  4058ba:	d04b      	beq.n	405954 <__swbuf_r+0xa8>
  4058bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4058c0:	69a3      	ldr	r3, [r4, #24]
  4058c2:	60a3      	str	r3, [r4, #8]
  4058c4:	b291      	uxth	r1, r2
  4058c6:	0708      	lsls	r0, r1, #28
  4058c8:	d539      	bpl.n	40593e <__swbuf_r+0x92>
  4058ca:	6923      	ldr	r3, [r4, #16]
  4058cc:	2b00      	cmp	r3, #0
  4058ce:	d036      	beq.n	40593e <__swbuf_r+0x92>
  4058d0:	b2ed      	uxtb	r5, r5
  4058d2:	0489      	lsls	r1, r1, #18
  4058d4:	462f      	mov	r7, r5
  4058d6:	d515      	bpl.n	405904 <__swbuf_r+0x58>
  4058d8:	6822      	ldr	r2, [r4, #0]
  4058da:	6961      	ldr	r1, [r4, #20]
  4058dc:	1ad3      	subs	r3, r2, r3
  4058de:	428b      	cmp	r3, r1
  4058e0:	da1c      	bge.n	40591c <__swbuf_r+0x70>
  4058e2:	3301      	adds	r3, #1
  4058e4:	68a1      	ldr	r1, [r4, #8]
  4058e6:	1c50      	adds	r0, r2, #1
  4058e8:	3901      	subs	r1, #1
  4058ea:	60a1      	str	r1, [r4, #8]
  4058ec:	6020      	str	r0, [r4, #0]
  4058ee:	7015      	strb	r5, [r2, #0]
  4058f0:	6962      	ldr	r2, [r4, #20]
  4058f2:	429a      	cmp	r2, r3
  4058f4:	d01a      	beq.n	40592c <__swbuf_r+0x80>
  4058f6:	89a3      	ldrh	r3, [r4, #12]
  4058f8:	07db      	lsls	r3, r3, #31
  4058fa:	d501      	bpl.n	405900 <__swbuf_r+0x54>
  4058fc:	2d0a      	cmp	r5, #10
  4058fe:	d015      	beq.n	40592c <__swbuf_r+0x80>
  405900:	4638      	mov	r0, r7
  405902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405904:	6e61      	ldr	r1, [r4, #100]	; 0x64
  405906:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40590a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40590e:	81a2      	strh	r2, [r4, #12]
  405910:	6822      	ldr	r2, [r4, #0]
  405912:	6661      	str	r1, [r4, #100]	; 0x64
  405914:	6961      	ldr	r1, [r4, #20]
  405916:	1ad3      	subs	r3, r2, r3
  405918:	428b      	cmp	r3, r1
  40591a:	dbe2      	blt.n	4058e2 <__swbuf_r+0x36>
  40591c:	4621      	mov	r1, r4
  40591e:	4630      	mov	r0, r6
  405920:	f7ff f87a 	bl	404a18 <_fflush_r>
  405924:	b940      	cbnz	r0, 405938 <__swbuf_r+0x8c>
  405926:	6822      	ldr	r2, [r4, #0]
  405928:	2301      	movs	r3, #1
  40592a:	e7db      	b.n	4058e4 <__swbuf_r+0x38>
  40592c:	4621      	mov	r1, r4
  40592e:	4630      	mov	r0, r6
  405930:	f7ff f872 	bl	404a18 <_fflush_r>
  405934:	2800      	cmp	r0, #0
  405936:	d0e3      	beq.n	405900 <__swbuf_r+0x54>
  405938:	f04f 37ff 	mov.w	r7, #4294967295
  40593c:	e7e0      	b.n	405900 <__swbuf_r+0x54>
  40593e:	4621      	mov	r1, r4
  405940:	4630      	mov	r0, r6
  405942:	f7fe ff55 	bl	4047f0 <__swsetup_r>
  405946:	2800      	cmp	r0, #0
  405948:	d1f6      	bne.n	405938 <__swbuf_r+0x8c>
  40594a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40594e:	6923      	ldr	r3, [r4, #16]
  405950:	b291      	uxth	r1, r2
  405952:	e7bd      	b.n	4058d0 <__swbuf_r+0x24>
  405954:	f7ff f8b8 	bl	404ac8 <__sinit>
  405958:	e7b0      	b.n	4058bc <__swbuf_r+0x10>
  40595a:	bf00      	nop

0040595c <_wcrtomb_r>:
  40595c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40595e:	4606      	mov	r6, r0
  405960:	b085      	sub	sp, #20
  405962:	461f      	mov	r7, r3
  405964:	b189      	cbz	r1, 40598a <_wcrtomb_r+0x2e>
  405966:	4c10      	ldr	r4, [pc, #64]	; (4059a8 <_wcrtomb_r+0x4c>)
  405968:	4d10      	ldr	r5, [pc, #64]	; (4059ac <_wcrtomb_r+0x50>)
  40596a:	6824      	ldr	r4, [r4, #0]
  40596c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40596e:	2c00      	cmp	r4, #0
  405970:	bf08      	it	eq
  405972:	462c      	moveq	r4, r5
  405974:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  405978:	47a0      	blx	r4
  40597a:	1c43      	adds	r3, r0, #1
  40597c:	d103      	bne.n	405986 <_wcrtomb_r+0x2a>
  40597e:	2200      	movs	r2, #0
  405980:	238a      	movs	r3, #138	; 0x8a
  405982:	603a      	str	r2, [r7, #0]
  405984:	6033      	str	r3, [r6, #0]
  405986:	b005      	add	sp, #20
  405988:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40598a:	460c      	mov	r4, r1
  40598c:	4906      	ldr	r1, [pc, #24]	; (4059a8 <_wcrtomb_r+0x4c>)
  40598e:	4a07      	ldr	r2, [pc, #28]	; (4059ac <_wcrtomb_r+0x50>)
  405990:	6809      	ldr	r1, [r1, #0]
  405992:	6b49      	ldr	r1, [r1, #52]	; 0x34
  405994:	2900      	cmp	r1, #0
  405996:	bf08      	it	eq
  405998:	4611      	moveq	r1, r2
  40599a:	4622      	mov	r2, r4
  40599c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  4059a0:	a901      	add	r1, sp, #4
  4059a2:	47a0      	blx	r4
  4059a4:	e7e9      	b.n	40597a <_wcrtomb_r+0x1e>
  4059a6:	bf00      	nop
  4059a8:	2040000c 	.word	0x2040000c
  4059ac:	2040084c 	.word	0x2040084c

004059b0 <__ascii_wctomb>:
  4059b0:	b121      	cbz	r1, 4059bc <__ascii_wctomb+0xc>
  4059b2:	2aff      	cmp	r2, #255	; 0xff
  4059b4:	d804      	bhi.n	4059c0 <__ascii_wctomb+0x10>
  4059b6:	700a      	strb	r2, [r1, #0]
  4059b8:	2001      	movs	r0, #1
  4059ba:	4770      	bx	lr
  4059bc:	4608      	mov	r0, r1
  4059be:	4770      	bx	lr
  4059c0:	238a      	movs	r3, #138	; 0x8a
  4059c2:	6003      	str	r3, [r0, #0]
  4059c4:	f04f 30ff 	mov.w	r0, #4294967295
  4059c8:	4770      	bx	lr
  4059ca:	bf00      	nop

004059cc <_write_r>:
  4059cc:	b570      	push	{r4, r5, r6, lr}
  4059ce:	460d      	mov	r5, r1
  4059d0:	4c08      	ldr	r4, [pc, #32]	; (4059f4 <_write_r+0x28>)
  4059d2:	4611      	mov	r1, r2
  4059d4:	4606      	mov	r6, r0
  4059d6:	461a      	mov	r2, r3
  4059d8:	4628      	mov	r0, r5
  4059da:	2300      	movs	r3, #0
  4059dc:	6023      	str	r3, [r4, #0]
  4059de:	f7fa fc3b 	bl	400258 <_write>
  4059e2:	1c43      	adds	r3, r0, #1
  4059e4:	d000      	beq.n	4059e8 <_write_r+0x1c>
  4059e6:	bd70      	pop	{r4, r5, r6, pc}
  4059e8:	6823      	ldr	r3, [r4, #0]
  4059ea:	2b00      	cmp	r3, #0
  4059ec:	d0fb      	beq.n	4059e6 <_write_r+0x1a>
  4059ee:	6033      	str	r3, [r6, #0]
  4059f0:	bd70      	pop	{r4, r5, r6, pc}
  4059f2:	bf00      	nop
  4059f4:	20400c44 	.word	0x20400c44

004059f8 <__register_exitproc>:
  4059f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4059fc:	4d2c      	ldr	r5, [pc, #176]	; (405ab0 <__register_exitproc+0xb8>)
  4059fe:	4606      	mov	r6, r0
  405a00:	6828      	ldr	r0, [r5, #0]
  405a02:	4698      	mov	r8, r3
  405a04:	460f      	mov	r7, r1
  405a06:	4691      	mov	r9, r2
  405a08:	f7ff fc1e 	bl	405248 <__retarget_lock_acquire_recursive>
  405a0c:	4b29      	ldr	r3, [pc, #164]	; (405ab4 <__register_exitproc+0xbc>)
  405a0e:	681c      	ldr	r4, [r3, #0]
  405a10:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  405a14:	2b00      	cmp	r3, #0
  405a16:	d03e      	beq.n	405a96 <__register_exitproc+0x9e>
  405a18:	685a      	ldr	r2, [r3, #4]
  405a1a:	2a1f      	cmp	r2, #31
  405a1c:	dc1c      	bgt.n	405a58 <__register_exitproc+0x60>
  405a1e:	f102 0e01 	add.w	lr, r2, #1
  405a22:	b176      	cbz	r6, 405a42 <__register_exitproc+0x4a>
  405a24:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  405a28:	2401      	movs	r4, #1
  405a2a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  405a2e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  405a32:	4094      	lsls	r4, r2
  405a34:	4320      	orrs	r0, r4
  405a36:	2e02      	cmp	r6, #2
  405a38:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  405a3c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  405a40:	d023      	beq.n	405a8a <__register_exitproc+0x92>
  405a42:	3202      	adds	r2, #2
  405a44:	f8c3 e004 	str.w	lr, [r3, #4]
  405a48:	6828      	ldr	r0, [r5, #0]
  405a4a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  405a4e:	f7ff fbfd 	bl	40524c <__retarget_lock_release_recursive>
  405a52:	2000      	movs	r0, #0
  405a54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405a58:	4b17      	ldr	r3, [pc, #92]	; (405ab8 <__register_exitproc+0xc0>)
  405a5a:	b30b      	cbz	r3, 405aa0 <__register_exitproc+0xa8>
  405a5c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  405a60:	f7fd faf0 	bl	403044 <malloc>
  405a64:	4603      	mov	r3, r0
  405a66:	b1d8      	cbz	r0, 405aa0 <__register_exitproc+0xa8>
  405a68:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  405a6c:	6002      	str	r2, [r0, #0]
  405a6e:	2100      	movs	r1, #0
  405a70:	6041      	str	r1, [r0, #4]
  405a72:	460a      	mov	r2, r1
  405a74:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  405a78:	f04f 0e01 	mov.w	lr, #1
  405a7c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  405a80:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  405a84:	2e00      	cmp	r6, #0
  405a86:	d0dc      	beq.n	405a42 <__register_exitproc+0x4a>
  405a88:	e7cc      	b.n	405a24 <__register_exitproc+0x2c>
  405a8a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  405a8e:	430c      	orrs	r4, r1
  405a90:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  405a94:	e7d5      	b.n	405a42 <__register_exitproc+0x4a>
  405a96:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  405a9a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  405a9e:	e7bb      	b.n	405a18 <__register_exitproc+0x20>
  405aa0:	6828      	ldr	r0, [r5, #0]
  405aa2:	f7ff fbd3 	bl	40524c <__retarget_lock_release_recursive>
  405aa6:	f04f 30ff 	mov.w	r0, #4294967295
  405aaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405aae:	bf00      	nop
  405ab0:	20400848 	.word	0x20400848
  405ab4:	00406120 	.word	0x00406120
  405ab8:	00403045 	.word	0x00403045

00405abc <_close_r>:
  405abc:	b538      	push	{r3, r4, r5, lr}
  405abe:	4c07      	ldr	r4, [pc, #28]	; (405adc <_close_r+0x20>)
  405ac0:	2300      	movs	r3, #0
  405ac2:	4605      	mov	r5, r0
  405ac4:	4608      	mov	r0, r1
  405ac6:	6023      	str	r3, [r4, #0]
  405ac8:	f7fb f8b2 	bl	400c30 <_close>
  405acc:	1c43      	adds	r3, r0, #1
  405ace:	d000      	beq.n	405ad2 <_close_r+0x16>
  405ad0:	bd38      	pop	{r3, r4, r5, pc}
  405ad2:	6823      	ldr	r3, [r4, #0]
  405ad4:	2b00      	cmp	r3, #0
  405ad6:	d0fb      	beq.n	405ad0 <_close_r+0x14>
  405ad8:	602b      	str	r3, [r5, #0]
  405ada:	bd38      	pop	{r3, r4, r5, pc}
  405adc:	20400c44 	.word	0x20400c44

00405ae0 <_fclose_r>:
  405ae0:	b570      	push	{r4, r5, r6, lr}
  405ae2:	b159      	cbz	r1, 405afc <_fclose_r+0x1c>
  405ae4:	4605      	mov	r5, r0
  405ae6:	460c      	mov	r4, r1
  405ae8:	b110      	cbz	r0, 405af0 <_fclose_r+0x10>
  405aea:	6b83      	ldr	r3, [r0, #56]	; 0x38
  405aec:	2b00      	cmp	r3, #0
  405aee:	d03c      	beq.n	405b6a <_fclose_r+0x8a>
  405af0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  405af2:	07d8      	lsls	r0, r3, #31
  405af4:	d505      	bpl.n	405b02 <_fclose_r+0x22>
  405af6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405afa:	b92b      	cbnz	r3, 405b08 <_fclose_r+0x28>
  405afc:	2600      	movs	r6, #0
  405afe:	4630      	mov	r0, r6
  405b00:	bd70      	pop	{r4, r5, r6, pc}
  405b02:	89a3      	ldrh	r3, [r4, #12]
  405b04:	0599      	lsls	r1, r3, #22
  405b06:	d53c      	bpl.n	405b82 <_fclose_r+0xa2>
  405b08:	4621      	mov	r1, r4
  405b0a:	4628      	mov	r0, r5
  405b0c:	f7fe fee4 	bl	4048d8 <__sflush_r>
  405b10:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  405b12:	4606      	mov	r6, r0
  405b14:	b133      	cbz	r3, 405b24 <_fclose_r+0x44>
  405b16:	69e1      	ldr	r1, [r4, #28]
  405b18:	4628      	mov	r0, r5
  405b1a:	4798      	blx	r3
  405b1c:	2800      	cmp	r0, #0
  405b1e:	bfb8      	it	lt
  405b20:	f04f 36ff 	movlt.w	r6, #4294967295
  405b24:	89a3      	ldrh	r3, [r4, #12]
  405b26:	061a      	lsls	r2, r3, #24
  405b28:	d422      	bmi.n	405b70 <_fclose_r+0x90>
  405b2a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  405b2c:	b141      	cbz	r1, 405b40 <_fclose_r+0x60>
  405b2e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  405b32:	4299      	cmp	r1, r3
  405b34:	d002      	beq.n	405b3c <_fclose_r+0x5c>
  405b36:	4628      	mov	r0, r5
  405b38:	f7ff f8ec 	bl	404d14 <_free_r>
  405b3c:	2300      	movs	r3, #0
  405b3e:	6323      	str	r3, [r4, #48]	; 0x30
  405b40:	6c61      	ldr	r1, [r4, #68]	; 0x44
  405b42:	b121      	cbz	r1, 405b4e <_fclose_r+0x6e>
  405b44:	4628      	mov	r0, r5
  405b46:	f7ff f8e5 	bl	404d14 <_free_r>
  405b4a:	2300      	movs	r3, #0
  405b4c:	6463      	str	r3, [r4, #68]	; 0x44
  405b4e:	f7fe ffe7 	bl	404b20 <__sfp_lock_acquire>
  405b52:	6e63      	ldr	r3, [r4, #100]	; 0x64
  405b54:	2200      	movs	r2, #0
  405b56:	07db      	lsls	r3, r3, #31
  405b58:	81a2      	strh	r2, [r4, #12]
  405b5a:	d50e      	bpl.n	405b7a <_fclose_r+0x9a>
  405b5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405b5e:	f7ff fb71 	bl	405244 <__retarget_lock_close_recursive>
  405b62:	f7fe ffe3 	bl	404b2c <__sfp_lock_release>
  405b66:	4630      	mov	r0, r6
  405b68:	bd70      	pop	{r4, r5, r6, pc}
  405b6a:	f7fe ffad 	bl	404ac8 <__sinit>
  405b6e:	e7bf      	b.n	405af0 <_fclose_r+0x10>
  405b70:	6921      	ldr	r1, [r4, #16]
  405b72:	4628      	mov	r0, r5
  405b74:	f7ff f8ce 	bl	404d14 <_free_r>
  405b78:	e7d7      	b.n	405b2a <_fclose_r+0x4a>
  405b7a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405b7c:	f7ff fb66 	bl	40524c <__retarget_lock_release_recursive>
  405b80:	e7ec      	b.n	405b5c <_fclose_r+0x7c>
  405b82:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405b84:	f7ff fb60 	bl	405248 <__retarget_lock_acquire_recursive>
  405b88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405b8c:	2b00      	cmp	r3, #0
  405b8e:	d1bb      	bne.n	405b08 <_fclose_r+0x28>
  405b90:	6e66      	ldr	r6, [r4, #100]	; 0x64
  405b92:	f016 0601 	ands.w	r6, r6, #1
  405b96:	d1b1      	bne.n	405afc <_fclose_r+0x1c>
  405b98:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405b9a:	f7ff fb57 	bl	40524c <__retarget_lock_release_recursive>
  405b9e:	4630      	mov	r0, r6
  405ba0:	bd70      	pop	{r4, r5, r6, pc}
  405ba2:	bf00      	nop

00405ba4 <_fstat_r>:
  405ba4:	b538      	push	{r3, r4, r5, lr}
  405ba6:	460b      	mov	r3, r1
  405ba8:	4c07      	ldr	r4, [pc, #28]	; (405bc8 <_fstat_r+0x24>)
  405baa:	4605      	mov	r5, r0
  405bac:	4611      	mov	r1, r2
  405bae:	4618      	mov	r0, r3
  405bb0:	2300      	movs	r3, #0
  405bb2:	6023      	str	r3, [r4, #0]
  405bb4:	f7fb f840 	bl	400c38 <_fstat>
  405bb8:	1c43      	adds	r3, r0, #1
  405bba:	d000      	beq.n	405bbe <_fstat_r+0x1a>
  405bbc:	bd38      	pop	{r3, r4, r5, pc}
  405bbe:	6823      	ldr	r3, [r4, #0]
  405bc0:	2b00      	cmp	r3, #0
  405bc2:	d0fb      	beq.n	405bbc <_fstat_r+0x18>
  405bc4:	602b      	str	r3, [r5, #0]
  405bc6:	bd38      	pop	{r3, r4, r5, pc}
  405bc8:	20400c44 	.word	0x20400c44

00405bcc <_isatty_r>:
  405bcc:	b538      	push	{r3, r4, r5, lr}
  405bce:	4c07      	ldr	r4, [pc, #28]	; (405bec <_isatty_r+0x20>)
  405bd0:	2300      	movs	r3, #0
  405bd2:	4605      	mov	r5, r0
  405bd4:	4608      	mov	r0, r1
  405bd6:	6023      	str	r3, [r4, #0]
  405bd8:	f7fb f834 	bl	400c44 <_isatty>
  405bdc:	1c43      	adds	r3, r0, #1
  405bde:	d000      	beq.n	405be2 <_isatty_r+0x16>
  405be0:	bd38      	pop	{r3, r4, r5, pc}
  405be2:	6823      	ldr	r3, [r4, #0]
  405be4:	2b00      	cmp	r3, #0
  405be6:	d0fb      	beq.n	405be0 <_isatty_r+0x14>
  405be8:	602b      	str	r3, [r5, #0]
  405bea:	bd38      	pop	{r3, r4, r5, pc}
  405bec:	20400c44 	.word	0x20400c44

00405bf0 <_lseek_r>:
  405bf0:	b570      	push	{r4, r5, r6, lr}
  405bf2:	460d      	mov	r5, r1
  405bf4:	4c08      	ldr	r4, [pc, #32]	; (405c18 <_lseek_r+0x28>)
  405bf6:	4611      	mov	r1, r2
  405bf8:	4606      	mov	r6, r0
  405bfa:	461a      	mov	r2, r3
  405bfc:	4628      	mov	r0, r5
  405bfe:	2300      	movs	r3, #0
  405c00:	6023      	str	r3, [r4, #0]
  405c02:	f7fb f821 	bl	400c48 <_lseek>
  405c06:	1c43      	adds	r3, r0, #1
  405c08:	d000      	beq.n	405c0c <_lseek_r+0x1c>
  405c0a:	bd70      	pop	{r4, r5, r6, pc}
  405c0c:	6823      	ldr	r3, [r4, #0]
  405c0e:	2b00      	cmp	r3, #0
  405c10:	d0fb      	beq.n	405c0a <_lseek_r+0x1a>
  405c12:	6033      	str	r3, [r6, #0]
  405c14:	bd70      	pop	{r4, r5, r6, pc}
  405c16:	bf00      	nop
  405c18:	20400c44 	.word	0x20400c44

00405c1c <_read_r>:
  405c1c:	b570      	push	{r4, r5, r6, lr}
  405c1e:	460d      	mov	r5, r1
  405c20:	4c08      	ldr	r4, [pc, #32]	; (405c44 <_read_r+0x28>)
  405c22:	4611      	mov	r1, r2
  405c24:	4606      	mov	r6, r0
  405c26:	461a      	mov	r2, r3
  405c28:	4628      	mov	r0, r5
  405c2a:	2300      	movs	r3, #0
  405c2c:	6023      	str	r3, [r4, #0]
  405c2e:	f7fa faf5 	bl	40021c <_read>
  405c32:	1c43      	adds	r3, r0, #1
  405c34:	d000      	beq.n	405c38 <_read_r+0x1c>
  405c36:	bd70      	pop	{r4, r5, r6, pc}
  405c38:	6823      	ldr	r3, [r4, #0]
  405c3a:	2b00      	cmp	r3, #0
  405c3c:	d0fb      	beq.n	405c36 <_read_r+0x1a>
  405c3e:	6033      	str	r3, [r6, #0]
  405c40:	bd70      	pop	{r4, r5, r6, pc}
  405c42:	bf00      	nop
  405c44:	20400c44 	.word	0x20400c44

00405c48 <__aeabi_uldivmod>:
  405c48:	b953      	cbnz	r3, 405c60 <__aeabi_uldivmod+0x18>
  405c4a:	b94a      	cbnz	r2, 405c60 <__aeabi_uldivmod+0x18>
  405c4c:	2900      	cmp	r1, #0
  405c4e:	bf08      	it	eq
  405c50:	2800      	cmpeq	r0, #0
  405c52:	bf1c      	itt	ne
  405c54:	f04f 31ff 	movne.w	r1, #4294967295
  405c58:	f04f 30ff 	movne.w	r0, #4294967295
  405c5c:	f000 b97a 	b.w	405f54 <__aeabi_idiv0>
  405c60:	f1ad 0c08 	sub.w	ip, sp, #8
  405c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  405c68:	f000 f806 	bl	405c78 <__udivmoddi4>
  405c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
  405c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  405c74:	b004      	add	sp, #16
  405c76:	4770      	bx	lr

00405c78 <__udivmoddi4>:
  405c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405c7c:	468c      	mov	ip, r1
  405c7e:	460d      	mov	r5, r1
  405c80:	4604      	mov	r4, r0
  405c82:	9e08      	ldr	r6, [sp, #32]
  405c84:	2b00      	cmp	r3, #0
  405c86:	d151      	bne.n	405d2c <__udivmoddi4+0xb4>
  405c88:	428a      	cmp	r2, r1
  405c8a:	4617      	mov	r7, r2
  405c8c:	d96d      	bls.n	405d6a <__udivmoddi4+0xf2>
  405c8e:	fab2 fe82 	clz	lr, r2
  405c92:	f1be 0f00 	cmp.w	lr, #0
  405c96:	d00b      	beq.n	405cb0 <__udivmoddi4+0x38>
  405c98:	f1ce 0c20 	rsb	ip, lr, #32
  405c9c:	fa01 f50e 	lsl.w	r5, r1, lr
  405ca0:	fa20 fc0c 	lsr.w	ip, r0, ip
  405ca4:	fa02 f70e 	lsl.w	r7, r2, lr
  405ca8:	ea4c 0c05 	orr.w	ip, ip, r5
  405cac:	fa00 f40e 	lsl.w	r4, r0, lr
  405cb0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  405cb4:	0c25      	lsrs	r5, r4, #16
  405cb6:	fbbc f8fa 	udiv	r8, ip, sl
  405cba:	fa1f f987 	uxth.w	r9, r7
  405cbe:	fb0a cc18 	mls	ip, sl, r8, ip
  405cc2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  405cc6:	fb08 f309 	mul.w	r3, r8, r9
  405cca:	42ab      	cmp	r3, r5
  405ccc:	d90a      	bls.n	405ce4 <__udivmoddi4+0x6c>
  405cce:	19ed      	adds	r5, r5, r7
  405cd0:	f108 32ff 	add.w	r2, r8, #4294967295
  405cd4:	f080 8123 	bcs.w	405f1e <__udivmoddi4+0x2a6>
  405cd8:	42ab      	cmp	r3, r5
  405cda:	f240 8120 	bls.w	405f1e <__udivmoddi4+0x2a6>
  405cde:	f1a8 0802 	sub.w	r8, r8, #2
  405ce2:	443d      	add	r5, r7
  405ce4:	1aed      	subs	r5, r5, r3
  405ce6:	b2a4      	uxth	r4, r4
  405ce8:	fbb5 f0fa 	udiv	r0, r5, sl
  405cec:	fb0a 5510 	mls	r5, sl, r0, r5
  405cf0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  405cf4:	fb00 f909 	mul.w	r9, r0, r9
  405cf8:	45a1      	cmp	r9, r4
  405cfa:	d909      	bls.n	405d10 <__udivmoddi4+0x98>
  405cfc:	19e4      	adds	r4, r4, r7
  405cfe:	f100 33ff 	add.w	r3, r0, #4294967295
  405d02:	f080 810a 	bcs.w	405f1a <__udivmoddi4+0x2a2>
  405d06:	45a1      	cmp	r9, r4
  405d08:	f240 8107 	bls.w	405f1a <__udivmoddi4+0x2a2>
  405d0c:	3802      	subs	r0, #2
  405d0e:	443c      	add	r4, r7
  405d10:	eba4 0409 	sub.w	r4, r4, r9
  405d14:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  405d18:	2100      	movs	r1, #0
  405d1a:	2e00      	cmp	r6, #0
  405d1c:	d061      	beq.n	405de2 <__udivmoddi4+0x16a>
  405d1e:	fa24 f40e 	lsr.w	r4, r4, lr
  405d22:	2300      	movs	r3, #0
  405d24:	6034      	str	r4, [r6, #0]
  405d26:	6073      	str	r3, [r6, #4]
  405d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405d2c:	428b      	cmp	r3, r1
  405d2e:	d907      	bls.n	405d40 <__udivmoddi4+0xc8>
  405d30:	2e00      	cmp	r6, #0
  405d32:	d054      	beq.n	405dde <__udivmoddi4+0x166>
  405d34:	2100      	movs	r1, #0
  405d36:	e886 0021 	stmia.w	r6, {r0, r5}
  405d3a:	4608      	mov	r0, r1
  405d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405d40:	fab3 f183 	clz	r1, r3
  405d44:	2900      	cmp	r1, #0
  405d46:	f040 808e 	bne.w	405e66 <__udivmoddi4+0x1ee>
  405d4a:	42ab      	cmp	r3, r5
  405d4c:	d302      	bcc.n	405d54 <__udivmoddi4+0xdc>
  405d4e:	4282      	cmp	r2, r0
  405d50:	f200 80fa 	bhi.w	405f48 <__udivmoddi4+0x2d0>
  405d54:	1a84      	subs	r4, r0, r2
  405d56:	eb65 0503 	sbc.w	r5, r5, r3
  405d5a:	2001      	movs	r0, #1
  405d5c:	46ac      	mov	ip, r5
  405d5e:	2e00      	cmp	r6, #0
  405d60:	d03f      	beq.n	405de2 <__udivmoddi4+0x16a>
  405d62:	e886 1010 	stmia.w	r6, {r4, ip}
  405d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405d6a:	b912      	cbnz	r2, 405d72 <__udivmoddi4+0xfa>
  405d6c:	2701      	movs	r7, #1
  405d6e:	fbb7 f7f2 	udiv	r7, r7, r2
  405d72:	fab7 fe87 	clz	lr, r7
  405d76:	f1be 0f00 	cmp.w	lr, #0
  405d7a:	d134      	bne.n	405de6 <__udivmoddi4+0x16e>
  405d7c:	1beb      	subs	r3, r5, r7
  405d7e:	0c3a      	lsrs	r2, r7, #16
  405d80:	fa1f fc87 	uxth.w	ip, r7
  405d84:	2101      	movs	r1, #1
  405d86:	fbb3 f8f2 	udiv	r8, r3, r2
  405d8a:	0c25      	lsrs	r5, r4, #16
  405d8c:	fb02 3318 	mls	r3, r2, r8, r3
  405d90:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  405d94:	fb0c f308 	mul.w	r3, ip, r8
  405d98:	42ab      	cmp	r3, r5
  405d9a:	d907      	bls.n	405dac <__udivmoddi4+0x134>
  405d9c:	19ed      	adds	r5, r5, r7
  405d9e:	f108 30ff 	add.w	r0, r8, #4294967295
  405da2:	d202      	bcs.n	405daa <__udivmoddi4+0x132>
  405da4:	42ab      	cmp	r3, r5
  405da6:	f200 80d1 	bhi.w	405f4c <__udivmoddi4+0x2d4>
  405daa:	4680      	mov	r8, r0
  405dac:	1aed      	subs	r5, r5, r3
  405dae:	b2a3      	uxth	r3, r4
  405db0:	fbb5 f0f2 	udiv	r0, r5, r2
  405db4:	fb02 5510 	mls	r5, r2, r0, r5
  405db8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  405dbc:	fb0c fc00 	mul.w	ip, ip, r0
  405dc0:	45a4      	cmp	ip, r4
  405dc2:	d907      	bls.n	405dd4 <__udivmoddi4+0x15c>
  405dc4:	19e4      	adds	r4, r4, r7
  405dc6:	f100 33ff 	add.w	r3, r0, #4294967295
  405dca:	d202      	bcs.n	405dd2 <__udivmoddi4+0x15a>
  405dcc:	45a4      	cmp	ip, r4
  405dce:	f200 80b8 	bhi.w	405f42 <__udivmoddi4+0x2ca>
  405dd2:	4618      	mov	r0, r3
  405dd4:	eba4 040c 	sub.w	r4, r4, ip
  405dd8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  405ddc:	e79d      	b.n	405d1a <__udivmoddi4+0xa2>
  405dde:	4631      	mov	r1, r6
  405de0:	4630      	mov	r0, r6
  405de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405de6:	f1ce 0420 	rsb	r4, lr, #32
  405dea:	fa05 f30e 	lsl.w	r3, r5, lr
  405dee:	fa07 f70e 	lsl.w	r7, r7, lr
  405df2:	fa20 f804 	lsr.w	r8, r0, r4
  405df6:	0c3a      	lsrs	r2, r7, #16
  405df8:	fa25 f404 	lsr.w	r4, r5, r4
  405dfc:	ea48 0803 	orr.w	r8, r8, r3
  405e00:	fbb4 f1f2 	udiv	r1, r4, r2
  405e04:	ea4f 4518 	mov.w	r5, r8, lsr #16
  405e08:	fb02 4411 	mls	r4, r2, r1, r4
  405e0c:	fa1f fc87 	uxth.w	ip, r7
  405e10:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  405e14:	fb01 f30c 	mul.w	r3, r1, ip
  405e18:	42ab      	cmp	r3, r5
  405e1a:	fa00 f40e 	lsl.w	r4, r0, lr
  405e1e:	d909      	bls.n	405e34 <__udivmoddi4+0x1bc>
  405e20:	19ed      	adds	r5, r5, r7
  405e22:	f101 30ff 	add.w	r0, r1, #4294967295
  405e26:	f080 808a 	bcs.w	405f3e <__udivmoddi4+0x2c6>
  405e2a:	42ab      	cmp	r3, r5
  405e2c:	f240 8087 	bls.w	405f3e <__udivmoddi4+0x2c6>
  405e30:	3902      	subs	r1, #2
  405e32:	443d      	add	r5, r7
  405e34:	1aeb      	subs	r3, r5, r3
  405e36:	fa1f f588 	uxth.w	r5, r8
  405e3a:	fbb3 f0f2 	udiv	r0, r3, r2
  405e3e:	fb02 3310 	mls	r3, r2, r0, r3
  405e42:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  405e46:	fb00 f30c 	mul.w	r3, r0, ip
  405e4a:	42ab      	cmp	r3, r5
  405e4c:	d907      	bls.n	405e5e <__udivmoddi4+0x1e6>
  405e4e:	19ed      	adds	r5, r5, r7
  405e50:	f100 38ff 	add.w	r8, r0, #4294967295
  405e54:	d26f      	bcs.n	405f36 <__udivmoddi4+0x2be>
  405e56:	42ab      	cmp	r3, r5
  405e58:	d96d      	bls.n	405f36 <__udivmoddi4+0x2be>
  405e5a:	3802      	subs	r0, #2
  405e5c:	443d      	add	r5, r7
  405e5e:	1aeb      	subs	r3, r5, r3
  405e60:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  405e64:	e78f      	b.n	405d86 <__udivmoddi4+0x10e>
  405e66:	f1c1 0720 	rsb	r7, r1, #32
  405e6a:	fa22 f807 	lsr.w	r8, r2, r7
  405e6e:	408b      	lsls	r3, r1
  405e70:	fa05 f401 	lsl.w	r4, r5, r1
  405e74:	ea48 0303 	orr.w	r3, r8, r3
  405e78:	fa20 fe07 	lsr.w	lr, r0, r7
  405e7c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  405e80:	40fd      	lsrs	r5, r7
  405e82:	ea4e 0e04 	orr.w	lr, lr, r4
  405e86:	fbb5 f9fc 	udiv	r9, r5, ip
  405e8a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  405e8e:	fb0c 5519 	mls	r5, ip, r9, r5
  405e92:	fa1f f883 	uxth.w	r8, r3
  405e96:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  405e9a:	fb09 f408 	mul.w	r4, r9, r8
  405e9e:	42ac      	cmp	r4, r5
  405ea0:	fa02 f201 	lsl.w	r2, r2, r1
  405ea4:	fa00 fa01 	lsl.w	sl, r0, r1
  405ea8:	d908      	bls.n	405ebc <__udivmoddi4+0x244>
  405eaa:	18ed      	adds	r5, r5, r3
  405eac:	f109 30ff 	add.w	r0, r9, #4294967295
  405eb0:	d243      	bcs.n	405f3a <__udivmoddi4+0x2c2>
  405eb2:	42ac      	cmp	r4, r5
  405eb4:	d941      	bls.n	405f3a <__udivmoddi4+0x2c2>
  405eb6:	f1a9 0902 	sub.w	r9, r9, #2
  405eba:	441d      	add	r5, r3
  405ebc:	1b2d      	subs	r5, r5, r4
  405ebe:	fa1f fe8e 	uxth.w	lr, lr
  405ec2:	fbb5 f0fc 	udiv	r0, r5, ip
  405ec6:	fb0c 5510 	mls	r5, ip, r0, r5
  405eca:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  405ece:	fb00 f808 	mul.w	r8, r0, r8
  405ed2:	45a0      	cmp	r8, r4
  405ed4:	d907      	bls.n	405ee6 <__udivmoddi4+0x26e>
  405ed6:	18e4      	adds	r4, r4, r3
  405ed8:	f100 35ff 	add.w	r5, r0, #4294967295
  405edc:	d229      	bcs.n	405f32 <__udivmoddi4+0x2ba>
  405ede:	45a0      	cmp	r8, r4
  405ee0:	d927      	bls.n	405f32 <__udivmoddi4+0x2ba>
  405ee2:	3802      	subs	r0, #2
  405ee4:	441c      	add	r4, r3
  405ee6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  405eea:	eba4 0408 	sub.w	r4, r4, r8
  405eee:	fba0 8902 	umull	r8, r9, r0, r2
  405ef2:	454c      	cmp	r4, r9
  405ef4:	46c6      	mov	lr, r8
  405ef6:	464d      	mov	r5, r9
  405ef8:	d315      	bcc.n	405f26 <__udivmoddi4+0x2ae>
  405efa:	d012      	beq.n	405f22 <__udivmoddi4+0x2aa>
  405efc:	b156      	cbz	r6, 405f14 <__udivmoddi4+0x29c>
  405efe:	ebba 030e 	subs.w	r3, sl, lr
  405f02:	eb64 0405 	sbc.w	r4, r4, r5
  405f06:	fa04 f707 	lsl.w	r7, r4, r7
  405f0a:	40cb      	lsrs	r3, r1
  405f0c:	431f      	orrs	r7, r3
  405f0e:	40cc      	lsrs	r4, r1
  405f10:	6037      	str	r7, [r6, #0]
  405f12:	6074      	str	r4, [r6, #4]
  405f14:	2100      	movs	r1, #0
  405f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405f1a:	4618      	mov	r0, r3
  405f1c:	e6f8      	b.n	405d10 <__udivmoddi4+0x98>
  405f1e:	4690      	mov	r8, r2
  405f20:	e6e0      	b.n	405ce4 <__udivmoddi4+0x6c>
  405f22:	45c2      	cmp	sl, r8
  405f24:	d2ea      	bcs.n	405efc <__udivmoddi4+0x284>
  405f26:	ebb8 0e02 	subs.w	lr, r8, r2
  405f2a:	eb69 0503 	sbc.w	r5, r9, r3
  405f2e:	3801      	subs	r0, #1
  405f30:	e7e4      	b.n	405efc <__udivmoddi4+0x284>
  405f32:	4628      	mov	r0, r5
  405f34:	e7d7      	b.n	405ee6 <__udivmoddi4+0x26e>
  405f36:	4640      	mov	r0, r8
  405f38:	e791      	b.n	405e5e <__udivmoddi4+0x1e6>
  405f3a:	4681      	mov	r9, r0
  405f3c:	e7be      	b.n	405ebc <__udivmoddi4+0x244>
  405f3e:	4601      	mov	r1, r0
  405f40:	e778      	b.n	405e34 <__udivmoddi4+0x1bc>
  405f42:	3802      	subs	r0, #2
  405f44:	443c      	add	r4, r7
  405f46:	e745      	b.n	405dd4 <__udivmoddi4+0x15c>
  405f48:	4608      	mov	r0, r1
  405f4a:	e708      	b.n	405d5e <__udivmoddi4+0xe6>
  405f4c:	f1a8 0802 	sub.w	r8, r8, #2
  405f50:	443d      	add	r5, r7
  405f52:	e72b      	b.n	405dac <__udivmoddi4+0x134>

00405f54 <__aeabi_idiv0>:
  405f54:	4770      	bx	lr
  405f56:	bf00      	nop

00405f58 <CSWTCH.7>:
  405f58:	0100 0000 0300 0000 0200 0000 4449 454c     ............IDLE
  405f68:	0000 0000 6d54 5172 0000 0000 6d54 2072     ....TmrQ....Tmr 
  405f78:	7653 0063 5249 2051 7562 2074 6b6f 000a     Svc.IRQ but ok..
  405f88:	5249 2051 7764 6220 7475 6f20 0a6b 0000     IRQ dw but ok...
  405f98:	7953 2073 6e69 7469 6f20 206b 000a 0000     Sys init ok ....
  405fa8:	6166 686c 2061 6d65 6320 6972 7261 6f20     falha em criar o
  405fb8:	7320 6d65 6661 726f 206f 7764 0a20 0000      semaforo dw ...
  405fc8:	6166 686c 2061 6d65 6320 6972 7261 6f20     falha em criar o
  405fd8:	7320 6d65 6661 726f 206f 000a 6166 686c      semaforo ..falh
  405fe8:	2061 6d65 6320 6972 7261 6120 7120 6575     a em criar a que
  405ff8:	6575 0a20 0000 0000 6166 686c 2061 6d65     ue .....falha em
  406008:	6320 6972 7261 6120 7120 6575 6575 3220      criar a queue 2
  406018:	0a20 0000 654c 0064 6146 6c69 6465 7420      ...Led.Failed t
  406028:	206f 7263 6165 6574 7420 7365 2074 656c     o create test le
  406038:	2064 6174 6b73 0a0d 0000 0000 6174 6b73     d task......task
  406048:	6c20 6465 6320 6572 7461 6465 0a0d 0000      led created....
  406058:	5542 0054 6146 6c69 6465 7420 206f 7263     BUT.Failed to cr
  406068:	6165 6574 5520 7261 5474 2078 6174 6b73     eate UartTx task
  406078:	0a0d 0000 6174 6b73 6220 7475 6320 6572     ....task but cre
  406088:	7461 6465 0a0d 0000 5542 2054 5542 2054     ated....BUT BUT 
  406098:	5542 2054 5542 0a54 0000 0000 7542 2074     BUT BUT.....But 
  4060a8:	6170 7373 756f 6f20 7320 6d65 6661 726f     passou o semafor
  4060b8:	0a6f 0000 7542 2074 6572 6563 6562 2075     o...But recebeu 
  4060c8:	6425 000a 6174 6b73 625f 7475 203a 6564     %d..task_but: de
  4060d8:	616c 2079 203d 6425 000a 0000 454c 2044     lay = %d....LED 
  4060e8:	454c 2044 454c 2044 454c 0a44 0000 0000     LED LED LED.....
  4060f8:	6174 6b73 6c5f 6465 203a 6425 0a20 0000     task_led: %d ...
  406108:	7473 6361 206b 766f 7265 6c66 776f 2520     stack overflow %
  406118:	2078 7325 0a0d 0000                         x %s....

00406120 <_global_impure_ptr>:
  406120:	0010 2040 3130 3332 3534 3736 3938 4241     ..@ 0123456789AB
  406130:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
  406140:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
  406150:	296c 0000                                   l)..

00406154 <blanks.7217>:
  406154:	2020 2020 2020 2020 2020 2020 2020 2020                     

00406164 <zeroes.7218>:
  406164:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  406174:	0043 0000 4f50 4953 0058 0000 002e 0000     C...POSIX.......

00406184 <_ctype_>:
  406184:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  406194:	2020 2020 2020 2020 2020 2020 2020 2020                     
  4061a4:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  4061b4:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  4061c4:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  4061d4:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  4061e4:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  4061f4:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  406204:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

00406288 <_init>:
  406288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40628a:	bf00      	nop
  40628c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40628e:	bc08      	pop	{r3}
  406290:	469e      	mov	lr, r3
  406292:	4770      	bx	lr

00406294 <__init_array_start>:
  406294:	004048b9 	.word	0x004048b9

00406298 <__frame_dummy_init_array_entry>:
  406298:	00400165                                e.@.

0040629c <_fini>:
  40629c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40629e:	bf00      	nop
  4062a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4062a2:	bc08      	pop	{r3}
  4062a4:	469e      	mov	lr, r3
  4062a6:	4770      	bx	lr

004062a8 <__fini_array_start>:
  4062a8:	00400141 	.word	0x00400141
